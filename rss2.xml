<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hanga(c)k</title>
    <link>https://hangack.github.io/</link>
    
    <atom:link href="https://hangack.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 03 Mar 2022 08:59:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>g2g-crwaling05: 엑세스 키 관리 문제</title>
      <link>https://hangack.github.io/2022/03/03/Codding/Python/crwaling_G2G/g2g-crwaling05/</link>
      <guid>https://hangack.github.io/2022/03/03/Codding/Python/crwaling_G2G/g2g-crwaling05/</guid>
      <pubDate>Thu, 03 Mar 2022 08:22:24 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;엑세스키-노출&quot;&gt;&lt;a href=&quot;#엑세스키-노출&quot; class=&quot;headerlink&quot; title=&quot;엑세스키 노출&quot;&gt;&lt;/a&gt;엑세스키 노출&lt;/h1&gt;&lt;p&gt;파일 하나에서 함수를 모두 관리했었고, 당연 문제가 됐다.&lt;/p&gt;
&lt;p&gt;이전 업데이트 때 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="엑세스키-노출"><a href="#엑세스키-노출" class="headerlink" title="엑세스키 노출"></a>엑세스키 노출</h1><p>파일 하나에서 함수를 모두 관리했었고, 당연 문제가 됐다.</p><p>이전 업데이트 때 깜빡하고 GCP acc 키가 제거되지 않은 상태로 push 해버린 것.</p><h2 id="조취-20220303"><a href="#조취-20220303" class="headerlink" title="조취(20220303)"></a>조취(20220303)</h2><p>당장 연결 권한을 바꿔야한다.<br>그 이후, 같은 실수가 발생하지 않도록 관리방법이 추가되야한다.</p><p>불특정된 사람들이 깃헙을 유심히 볼만한 정도는 아니라 다행이라 생각한다.</p><h3 id="엑세스키-제거-후-재발급"><a href="#엑세스키-제거-후-재발급" class="headerlink" title="엑세스키 제거 후 재발급"></a>엑세스키 제거 후 재발급</h3><p>commit을 일일히 삭제하는 방법을 생각했지만, 어딘가엔 데이터가 남을 가능성이 있어 GCP에서 서비스 키를 새로 발급받았다.</p><p>이걸로 일단 노출된 키로 접근하는 불상사는 막았다.</p><h3 id="새로운-py-파일-생성"><a href="#새로운-py-파일-생성" class="headerlink" title="새로운 py 파일 생성"></a>새로운 py 파일 생성</h3><p>source를 계속 업데이트 한다면 역시 까먹어도 문제 없도록 엑세스 함수를 숨기거나 따로 관리해야한다.</p><p>기존에 사용하던 crawl_URL_boost.py에서 SQL에 접근하는 데이터가 들어있는 <code>connecting</code>, <code>dataInsertPsycopg2</code>, <code>accGBQ</code>을 crawl_acc_sql.py 파일로 옮겨 개인 모듈로 관리한다.</p><p>crawl_acc_sql.py에 사용되는 모듈들을 boost에서 옮겨담는다.</p><figure class="highlight python"><figcaption><span>crawl_acc_sql.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_gbq</span><br><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="keyword">from</span> psycopg2 <span class="keyword">import</span> connect, extensions</span><br><span class="line"><span class="keyword">import</span> psycopg2.extras <span class="keyword">as</span> extras</span><br><span class="line"><span class="keyword">from</span> google.oauth2 <span class="keyword">import</span> service_account</span><br></pre></td></tr></table></figure><p>crawl_URL_boost.py에는 crawl_acc_sql 모듈을 추가함에 따라 기존 함수들도 모듈에 맞춰 수정했다.</p><figure class="highlight python"><figcaption><span>crawl_URL_boost.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> crawl_acc_sql <span class="keyword">as</span> accsql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    conn = accsql.connecting()</span><br><span class="line">    accsql.dataInsertPsycopg2(conn, data=df)</span><br><span class="line"></span><br><span class="line">    accsql.accGBQ(df)</span><br></pre></td></tr></table></figure><p>혹시 모를 에러를 대비해 .backup 로컬 폴더에 수정된 날짜를 파일명에 추가해 이전 버전을 백업했다.</p><p>새로운 sql을 추가하지 않는 이상 crawl_acc_sql.py를 편집할 일은 없으므로 계정 키를 항상 지워서 업로드해야하는 불편함이 줄었다.</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><ul><li><a href="https://github.com/hangack/project-green/tree/main/crawling-g2g/source">crawling-g2g/source/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crwaling-G2G/">crwaling_G2G</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/GCP/">GCP</category>
      
      
      <comments>https://hangack.github.io/2022/03/03/Codding/Python/crwaling_G2G/g2g-crwaling05/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>g2g-crwaling04: 동적페이지 로드 문제 발생</title>
      <link>https://hangack.github.io/2022/02/24/Codding/Python/crwaling_G2G/g2g-crwaling04/</link>
      <guid>https://hangack.github.io/2022/02/24/Codding/Python/crwaling_G2G/g2g-crwaling04/</guid>
      <pubDate>Thu, 24 Feb 2022 08:57:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;동적 페이지 자동 크롤링을 새벽마다 돌리면서 URL이 변경되지 않는 동작의 경우 요소를 찾을 때 까지 대기하는 코드가 때때로 에러를 일으킨다.&lt;/p&gt;
&lt;p&gt;다음에 error가 식별됐을 때 Error 명을 식별해서 &lt;code&gt;try&lt;/code&gt; -</description>
        
      
      
      
      <content:encoded><![CDATA[<p>동적 페이지 자동 크롤링을 새벽마다 돌리면서 URL이 변경되지 않는 동작의 경우 요소를 찾을 때 까지 대기하는 코드가 때때로 에러를 일으킨다.</p><p>다음에 error가 식별됐을 때 Error 명을 식별해서 <code>try</code> - <code>except</code> 구문으로 예외처리하고 <code>time.sleep</code> 함수를 넣어준 다음 try 재귀 함수를 돌리는 코드를 추가 작성해 업데이트할 예정이다.</p><h2 id="try-amp-재귀함수-추가-20220226"><a href="#try-amp-재귀함수-추가-20220226" class="headerlink" title="try &amp; 재귀함수 추가(20220226)"></a>try &amp; 재귀함수 추가(20220226)</h2><p><code>get_data()</code> 함수에 <code>try</code> - <code>except</code>로 구성된 재귀함수 <code>try_clickable()</code>을 추가했다.</p><p>클릭 동작이 들어간 <code>list.extend</code> 부분만 업데이트 했지만, 만약 클릭 동작이 필요없는 페이지에서도 <code>IndexError</code>가 발생한다면 앞부분에도 추가해야한다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://dojang.io/mod/page/view.php?id=2352">python 재귀호출</a></li><li><a href="https://dojang.io/mod/page/view.php?id=2398">python 예외처리</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crwaling-G2G/">crwaling_G2G</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2022/02/24/Codding/Python/crwaling_G2G/g2g-crwaling04/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>스팀: 넥스트 페스티벌 Feb-2022</title>
      <link>https://hangack.github.io/2022/02/22/hobby/games/steam_next-fest_feb-2022/</link>
      <guid>https://hangack.github.io/2022/02/22/hobby/games/steam_next-fest_feb-2022/</guid>
      <pubDate>Tue, 22 Feb 2022 13:22:22 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Steam-Next-Fest&quot;&gt;&lt;a href=&quot;#Steam-Next-Fest&quot; class=&quot;headerlink&quot; title=&quot;Steam Next Fest&quot;&gt;&lt;/a&gt;Steam Next Fest&lt;/h1&gt;&lt;p&gt;개발중 혹은 출시예정 게임의 데모</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Steam-Next-Fest"><a href="#Steam-Next-Fest" class="headerlink" title="Steam Next Fest"></a>Steam Next Fest</h1><p>개발중 혹은 출시예정 게임의 데모버전을 1주간 플레이 가능한 스팀 행사: NEXT FESTIVAL의 2022년 2월 버전</p><p><a href="https://store.steampowered.com/sale/nextfest"><img src="\images\2202\steam-next-fest\nextfest.jpg" alt="Next-Fest"></a></p><p>많은 유저의 플레이 후기를 듣고 구매하기엔 힘든 인디게임 특성상 플레이어가 30분이 됐건 반나절이 넘던 부담없이 플레이하고 찜해놓을 수 있다는 장점이 크다.</p><h2 id="플레이"><a href="#플레이" class="headerlink" title="플레이"></a>플레이</h2><p>아직 많은 게임을 해보지는 않았다. </p><h3 id="Godlike-Burger"><a href="#Godlike-Burger" class="headerlink" title="Godlike_Burger"></a>Godlike_Burger</h3><p>코옵 게임인 overcooked!와 비슷하게 레스토랑 디펜스 형식을 사용한 &lt;<a href="https://store.steampowered.com/app/1432910/Godlike_Burger/">Godlike_Burger</a>&gt;</p><p><img src="\images\2202\steam-next-fest\godlike-burger.png" alt="godlike-burger"></p><p>타이쿤류 모바일 게임같은 인터페이스와 대비되어 스토리 배경과 소재가 굉장히 어둡다. Pegi-18로 분류되지 않을까 싶다.</p><p>로그라이크, 디펜스, PvE, 경영, 함정을 이용한 전략 시뮬 등 다양한 장르를 녹여놨다.</p><p>4시간 이전에 그만둔 이유는 스테이지간 레벨 간격이 너무 넓었다. 첫 행성에서 신경써야하는 손놈은 한 종족밖에 없었으나,<br>플레이가 너무 지루해 두번째 생성으로 넘어가고 종족이 4종류가 되고, 극단적으로 늘어난 종족과 높은 종족 능력치가 부족한 정보력과 자원의 빈공간을 강하게 파고들었다.<br>게다가 대응해야할 손놈이 1에서 4로 늘고 레시피도 복잡해지면서 플레이어는 갑작스레 뇌지컬 요구를 강하게 받았고 화면 사방에 조그맣게 보이는 손놈 아이콘을 통해 자원 유통해야 했지만 4종족이나 되는 복잡성에 강한 스트레스도 주어졌다.<br>그렇다고 첫 행성으로 돌아가기엔 1종족 상대는 또 극단적인 자동화로 게임플레이가 극단적으로 지루해진다.<br>데모버전이라 많은걸 넣지 못하고 초반/중반/중후반의 세 스테이지만 넣은거같지만 초반-중반 과정의 난이도차가 너무 심하기에 적당한 데모 플레이를 위한 초중반 스테이지 추가가 필요하다 생각한다.</p><h3 id="IXION"><a href="#IXION" class="headerlink" title="IXION"></a>IXION</h3><p>그리스 신화: 죄를 지어 수레바퀴에 걸린 인간의 이름을 따온 <a href="https://store.steampowered.com/app/1113120/IXION/">IXION</a></p><p>사운드가 안나와서 가오갤 이후 오랜만에 그래픽드라이버 업데이트를…</p><p><img src="\images\2202\steam-next-fest\ixion01.jpg" alt="IXION-play"></p><p>우주 배경의 타이쿤이라는 모선에서 이뤄지는 도시 경영 시뮬레이션.</p><p>공개된 내용은 다른 은하로 발진하기까지 과정이 끝이다.</p><p>플레이하면서 &lt;프로스트 펑크&gt;와 유사한 인상을 받았고 &lt;파피용&gt; 소설로부터 영감을 받은 작품으로 느껴졌다.</p><p><img src="\images\2202\steam-next-fest\ixion02.jpg" alt="IXION-demo"></p><p>데모 플레이는 아포칼립스 배경(혹은 도시경영)의 시뮬레이션에 익숙한 유저에 대한 데이터 수집이 목적인 구성으로 느껴졌다.</p><p>한글의 문제인진 모르겠지만 목표 등을 나타내는 인터페이스가 잘 들어오지 않아 사이클 낭비로 식량 부족 문제가 발생해 리트라이했다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li>Steam: <a href="https://store.steampowered.com/sale/nextfest">Next_Fest</a></li><li><a href="https://store.steampowered.com/app/1432910/Godlike_Burger/">Godlike_Burger</a></li><li><a href="https://store.steampowered.com/app/1483190/Memory_Lost/">Memory_Lost</a></li><li><a href="https://store.steampowered.com/app/1621690/Core_Keeper/">Core_Keeper</a></li><li><a href="https://store.steampowered.com/app/1113120/IXION/">IXION</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/%EC%9D%B8%EB%94%94%EA%B2%8C%EC%9E%84/">인디게임</category>
      
      <category domain="https://hangack.github.io/tags/%EC%8A%A4%ED%8C%80/">스팀</category>
      
      
      <comments>https://hangack.github.io/2022/02/22/hobby/games/steam_next-fest_feb-2022/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pandas_gbq python과 google bigquery 연동하기</title>
      <link>https://hangack.github.io/2022/02/16/Codding/Python/SQL/pandas_gbq-python-google-bigquery/</link>
      <guid>https://hangack.github.io/2022/02/16/Codding/Python/SQL/pandas_gbq-python-google-bigquery/</guid>
      <pubDate>Wed, 16 Feb 2022 09:49:23 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://hangack.github.io/2022/02/16/Codding/GCP/BigQuery/GCP-accesskey/&quot;&gt;GCP 엑세스키 발급받기&lt;/a&gt;를 선행&lt;/p&gt;
&lt;h1 id=&quot;라이브러리-설치&quot;&gt;&lt;a href=&quot;#</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://hangack.github.io/2022/02/16/Codding/GCP/BigQuery/GCP-accesskey/">GCP 엑세스키 발급받기</a>를 선행</p><h1 id="라이브러리-설치"><a href="#라이브러리-설치" class="headerlink" title="라이브러리 설치"></a>라이브러리 설치</h1><h2 id="google-cloud-bigquery"><a href="#google-cloud-bigquery" class="headerlink" title="google-cloud-bigquery"></a>google-cloud-bigquery</h2><p>python과 google bigquery를 연동하기 위한 라이브러리</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install google-cloud-bigquery</span></span><br></pre></td></tr></table></figure><h2 id="pandas-gbq"><a href="#pandas-gbq" class="headerlink" title="pandas-gbq"></a>pandas-gbq</h2><p>dataframe을 gbq에 업로드하기 위한 라이브러리</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install pandas-gbq</span></span><br></pre></td></tr></table></figure><h1 id="GBQ-연동"><a href="#GBQ-연동" class="headerlink" title="GBQ 연동"></a>GBQ 연동</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.oauth2 <span class="keyword">import</span> service_account</span><br><span class="line"></span><br><span class="line"><span class="comment">## json 파일 내용</span></span><br><span class="line">credentials = service_account.Credentials.from_service_account_info(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;project_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;private_key_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;private_key&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client_email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;auth_uri&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;token_uri&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;auth_provider_x509_cert_url&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;client_x509_cert_url&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">## json 파일 경로를 사용하고 싶으면 `from_service_account_file` 함수를 사용하면된다</span></span><br><span class="line">credentials = service_account.Credentials.from_service_account_file(<span class="string">&quot;URL.json&quot;</span>)</span><br></pre></td></tr></table></figure><p>업로드 하고싶은 dataframe(<code>df</code>)을 만들어두자.</p><p><code>pandas.to_gbq</code>로 연동하면 브라우저 창을 통해 쿠키를 받아야하므로 <code>pandas_gbq</code>를 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_gbq</span><br><span class="line"></span><br><span class="line">project_id = <span class="string">&quot;project_id&quot;</span></span><br><span class="line">table_name = <span class="string">&quot;data_set_name.table_name&quot;</span></span><br><span class="line"></span><br><span class="line">pandas_gbq.context.credentials = credentials</span><br><span class="line">pandas_gbq.context.project = project_id</span><br></pre></td></tr></table></figure><h2 id="dataframe-업로드"><a href="#dataframe-업로드" class="headerlink" title="dataframe 업로드"></a>dataframe 업로드</h2><p><code>if_exists</code> 요소의 기본값 = “fail”</p><ul><li>fail: 테이블이 존재하면 <code>pandas_gbq.gbq.TableCreationError</code> 발생</li><li>replace: 테이블이 있는 경우 다시 만들고 데이터 삽입</li><li>append: 테이블에 데이터 삽입(테이블이 없는 경우 테이블 생성)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas_gbq.to_gbq(df, table_name, project_id=project_id, if_exists=<span class="string">&quot;append&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="bigquery-data-받아오기"><a href="#bigquery-data-받아오기" class="headerlink" title="bigquery data 받아오기"></a>bigquery data 받아오기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;SELECT * FROM `data_set_name.table_name`&quot;</span></span><br><span class="line">readdf = pd.read_gbq(query=query, project_id=project_id, credentials=credentials, dialect=<span class="string">&#x27;standard&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://pandas-gbq.readthedocs.io/en/latest/api.html#pandas_gbq">API Reference: pandas_gbq</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_gbq.html">pandas.to_gbq</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.read_gbq.html">pandas.read_gbq</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/SQL/">SQL</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/GBQ/">GBQ</category>
      
      
      <comments>https://hangack.github.io/2022/02/16/Codding/Python/SQL/pandas_gbq-python-google-bigquery/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pyspark 설치</title>
      <link>https://hangack.github.io/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/</link>
      <guid>https://hangack.github.io/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/</guid>
      <pubDate>Mon, 14 Feb 2022 00:11:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;pyspark&quot;&gt;&lt;a href=&quot;#pyspark&quot; class=&quot;headerlink&quot; title=&quot;pyspark&quot;&gt;&lt;/a&gt;pyspark&lt;/h1&gt;&lt;p&gt;대용량 data를 관리하기 위한 유사 SQL 라이브러리&lt;/p&gt;
&lt;h2 id=&quot;사전-준비&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="pyspark"><a href="#pyspark" class="headerlink" title="pyspark"></a>pyspark</h1><p>대용량 data를 관리하기 위한 유사 SQL 라이브러리</p><h2 id="사전-준비"><a href="#사전-준비" class="headerlink" title="사전 준비"></a>사전 준비</h2><ul><li>python 설치</li><li>java 설치</li><li>spark 다운로드</li><li>winutils 다운로드</li></ul><h3 id="python-설치"><a href="#python-설치" class="headerlink" title="python 설치"></a>python 설치</h3><p>파이썬 혹은 아나콘다를 설치한다.<br>python 버전 3 이상으로 설치한다.</p><ul><li><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></li><li><a href="https://hangack.github.io/2021/11/01/Codding/Python/basic/Python0_download/">아나콘다 설치</a></li></ul><h3 id="java-설치"><a href="#java-설치" class="headerlink" title="java 설치"></a>java 설치</h3><p>나의 경우 java가 설치되어있고 <code>JAVA_HOME</code> 환경변수까지 설정되있기에 그대로 사용했으나 아니라면 오라클에 로그인하고 java를 설치한다.</p><ul><li><a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></li></ul><p>이후 <code>JAVA_HOME</code> 환경 변수를 추가해준다.</p><p><img src="/images/2202/pyspark-설치/JAVA_HOME.png" alt="JAVA_HOME"></p><p>시스템 변수, 사용자 변수 중 원하는 영역에 추가해준다.<br>난 여러 계정을 사용하지 않으니 그냥 사용자 변수에 넣어줬다.</p><h3 id="Spark-다운로드"><a href="#Spark-다운로드" class="headerlink" title="Spark 다운로드"></a>Spark 다운로드</h3><p>Spark tgz 압축파일을 다운받는다.</p><ul><li><a href="https://spark.apache.org/downloads.html">spark</a></li></ul><p><img src="/images/2202/pyspark-설치/Spark.png" alt="SPARK"></p><p>원하는 경로에 압축 풀고 위와 동일하게 환경 변수를 설정해준다.</p><p><img src="/images/2202/pyspark-설치/Spark-경로.png" alt="SPARK-경로"><br><img src="/images/2202/pyspark-설치/SPARK_HOME.png" alt="SPARK_HOME"></p><h3 id="winutils-다운로드"><a href="#winutils-다운로드" class="headerlink" title="winutils 다운로드"></a>winutils 다운로드</h3><p>위에서 받은 spark 버전과 동일 버전의 <code>winutils.exe</code>를 받아준다.</p><ul><li><a href="https://github.com/cdarlint/winutils">winutils</a></li></ul><p>winutils용 폴더를 만들고 bin 파일 아래에 넣어준다.</p><p><img src="/images/2202/pyspark-설치/winutils-경로.png" alt="winutils-경로"></p><p>hadoop 환경변수도 설정한다.</p><p><img src="/images/2202/pyspark-설치/HADOOP_HOME.png" alt="HADOOP_HOME"></p><h3 id="Path-설정"><a href="#Path-설정" class="headerlink" title="Path 설정"></a>Path 설정</h3><p>마지막으로 path 값에</p><ul><li>%JAVA_HOME%\bin</li><li>%SPARK_HOME%\bin</li><li>%HADOOP_HOME%\bin<br>을 넣어준다.</li></ul><p><img src="/images/2202/pyspark-설치/Path.png" alt="path"></p><h2 id="pyspark-실행"><a href="#pyspark-실행" class="headerlink" title="pyspark 실행"></a>pyspark 실행</h2><p>CMD(혹은 Anaconda Prompt)를 열어서 pyspark 설치한다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install pyspark</span></span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pyspark</span></span><br></pre></td></tr></table></figure><p><img src="/images/2202/pyspark-설치/pyspark.png" alt="pyspark"></p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://databricks.com/kr/glossary/pyspark">PySpark란 무엇입니까?</a></li><li><a href="https://dschloe.github.io/python/python_edu/00_settings/spark_installation_windows_10/">Spark Installation on Windows 10</a></li><li><a href="https://ahnty0122.tistory.com/22">WINDOWS에 PySpark 설치</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/pyspark/">pyspark</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/pyspark/">pyspark</category>
      
      
      <comments>https://hangack.github.io/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>unique 요소만 포함하는 set</title>
      <link>https://hangack.github.io/2022/02/07/Codding/Python/basic/unique-list-set/</link>
      <guid>https://hangack.github.io/2022/02/07/Codding/Python/basic/unique-list-set/</guid>
      <pubDate>Mon, 07 Feb 2022 06:45:16 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;특정 집합을 만들다보니 같은 값이 저장되지 않는 리스트를 만들 필요가 생겼다.&lt;br&gt;set() 형식을 사용하면 unique한 객체만 포함하는 집합을 만들 수 있다.&lt;/p&gt;
&lt;p&gt;단, 사용하려면 &lt;code&gt;set()&lt;/code&gt;으로 객체를 초기화 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>특정 집합을 만들다보니 같은 값이 저장되지 않는 리스트를 만들 필요가 생겼다.<br>set() 형식을 사용하면 unique한 객체만 포함하는 집합을 만들 수 있다.</p><p>단, 사용하려면 <code>set()</code>으로 객체를 초기화 해야한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">31</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><pre><code>&#123;1, 2, 3, 10, 31&#125;</code></pre><p>dictionary와 동일한 <code>&#123;</code>, <code>&#125;</code>로 사용되지만 dictionary와 다르게 key가 없는 list 형식이다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://wikidocs.net/16044">set(집합)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EA%B8%B0%EC%B4%88/">기초</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2022/02/07/Codding/Python/basic/unique-list-set/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>g2g-crwaling03: G2G poe 현거래 매물 수집시작</title>
      <link>https://hangack.github.io/2022/02/07/Codding/Python/crwaling_G2G/g2g-crwaling03/</link>
      <guid>https://hangack.github.io/2022/02/07/Codding/Python/crwaling_G2G/g2g-crwaling03/</guid>
      <pubDate>Mon, 07 Feb 2022 03:13:40 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;저번 토요일(02/05) poe 리그 시작일에 맞춰 한국시간 06시마다 매일 현거래 매물 데이터를 postSQL과 GBQ에 수집중이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2202/g2g-poe-수집/postSQL.png&quot; alt=&quot;po</description>
        
      
      
      
      <content:encoded><![CDATA[<p>저번 토요일(02/05) poe 리그 시작일에 맞춰 한국시간 06시마다 매일 현거래 매물 데이터를 postSQL과 GBQ에 수집중이다.</p><p><img src="/images/2202/g2g-poe-수집/postSQL.png" alt="postSQL"></p><p><a href="https://hangack.github.io/2022/02/16/Codding/Python/SQL/pandas_gbq-python-google-bigquery/">pandas_gbq python과 google bigquery 연동하기</a></p><p><img src="/images/2202/g2g-poe-수집/GBQ.png" alt="GBQ"></p><p>2, 3 시즌 이상 데이터가 쌓이면 반복되는 데이터로 머신 러닝을 돌려 유저가 빠지는(혹은 매물이 폭락하는) 기간을 예상할 수 있을 것이다.</p><p>그 전에 <a href="https://marketingplatform.google.com/about/data-studio/?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=japac-KR-all-en-dr-bkws-all-all-trial-b-dr-1009882&amp;utm_content=text-ad-none-none-DEV_c-CRE_308452914459-ADGP_Hybrid+%7C+BKWS+-+PHR+%7C+Txt+~+Data+Analytics+~+Google+Data+Studio_Data+Studio-KWID_43700065777624269-kwd-355732973731&amp;userloc_1009863-network_g&amp;utm_term=KW_google%20datastudio&amp;gclid=Cj0KCQiAmKiQBhClARIsAKtSj-l71qfnWEwmx4uDL4V0iXKQQpyZ-o_Bbdg4ceQbT3errRfqtEhthokaAgMcEALw_wcB&amp;gclsrc=aw.ds">google data studio</a>를 이용해서 대쉬보드도 관리할 예정이다.</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crwaling-G2G/">crwaling_G2G</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2022/02/07/Codding/Python/crwaling_G2G/g2g-crwaling03/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>datetime 날짜와 시간</title>
      <link>https://hangack.github.io/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/</link>
      <guid>https://hangack.github.io/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/</guid>
      <pubDate>Thu, 03 Feb 2022 17:14:30 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;datatime&quot;&gt;&lt;a href=&quot;#datatime&quot; class=&quot;headerlink&quot; title=&quot;datatime&quot;&gt;&lt;/a&gt;datatime&lt;/h1&gt;&lt;p&gt;datetime 모듈은 특정 시간과 날짜를 불러오는 파이썬 내장 모듈이다.&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="datatime"><a href="#datatime" class="headerlink" title="datatime"></a>datatime</h1><p>datetime 모듈은 특정 시간과 날짜를 불러오는 파이썬 내장 모듈이다.</p><h2 id="날짜와-시간-함수"><a href="#날짜와-시간-함수" class="headerlink" title="날짜와 시간 함수"></a>날짜와 시간 함수</h2><p>datatime 모듈을 사용하면 시간 날짜 UTC timezone을 불러올 수 있고, 내장 함수로 <code>data</code>, <code>time</code> 등을 사용해 날짜 혹은 시간만 지정하고 특정 시간대를 지정해 불러올 수도 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.date.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.time(<span class="number">12</span>,<span class="number">59</span>,<span class="number">33</span>, microsecond=<span class="number">333333</span>, tzinfo=datetime.timezone.utc))</span><br></pre></td></tr></table></figure><br>    2022-02-03<br>    2022-02-03 03:36:07.407621<br>    12:59:33.333333+00:00</p><h2 id="strftime-원하는-형식으로-변경"><a href="#strftime-원하는-형식으로-변경" class="headerlink" title="strftime(원하는 형식으로 변경)"></a>strftime(원하는 형식으로 변경)</h2><p>strftime을 사용하면 불러온 시간을 원하는 형식으로 바꿀 수 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(datetime.datetime.today().strftime(<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>))</span><br></pre></td></tr></table></figure><br>    2022/02/03 03:40:36</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://docs.python.org/ko/3/library/datetime.html">datatime — 기본 날짜와 시간 형</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%AA%A8%EB%93%88/">모듈</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/datetime/">datetime</category>
      
      
      <comments>https://hangack.github.io/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>time 모듈로 일시정지</title>
      <link>https://hangack.github.io/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/</link>
      <guid>https://hangack.github.io/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/</guid>
      <pubDate>Wed, 02 Feb 2022 13:22:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;python 내장 함수인 &lt;code&gt;time&lt;/code&gt; 모듈을 사용하면 시간 관련 추출이나 간섭을 할 수 있다.&lt;/p&gt;
&lt;p&gt;그 중 이번에 내가 사용할 함수는 &lt;code&gt;sleep()&lt;/code&gt; 함수로 지정한 시간 단위만큼 프로그램 실행 중간</description>
        
      
      
      
      <content:encoded><![CDATA[<p>python 내장 함수인 <code>time</code> 모듈을 사용하면 시간 관련 추출이나 간섭을 할 수 있다.</p><p>그 중 이번에 내가 사용할 함수는 <code>sleep()</code> 함수로 지정한 시간 단위만큼 프로그램 실행 중간에 딜레이를 줄 수 있다.</p><p>특히 이번에 크롤링 중인 페이지가 동적페이지에 하나의 URL에서 클릭으로 HTML 코드만 바뀌는 옵션이 들어가 selenium만으로 크롤링하면 때때로 에러가 발생했다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>을 사용하면 코드 중간에 3초간 딜레이 줄 수 있다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://docs.python.org/ko/3/library/time.html">time — 시간 액세스와 변환</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%AA%A8%EB%93%88/">모듈</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/time/">time</category>
      
      
      <comments>https://hangack.github.io/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GCP 엑세스키 발급받기</title>
      <link>https://hangack.github.io/2022/01/27/Codding/GCP/BigQuery/GCP-accesskey/</link>
      <guid>https://hangack.github.io/2022/01/27/Codding/GCP/BigQuery/GCP-accesskey/</guid>
      <pubDate>Thu, 27 Jan 2022 07:38:47 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Google-Cloud-Platform&quot;&gt;&lt;a href=&quot;#Google-Cloud-Platform&quot; class=&quot;headerlink&quot; title=&quot;Google Cloud Platform&quot;&gt;&lt;/a&gt;Google Cloud Platform&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h1><p>Python 코드에서 Bigquery로 data를 보내기 위해 <a href="https://cloud.google.com/?authuser=1">GCP</a> 엑세스 키가 필요해졌다.</p><p>google cloud 콘솔에 접속하자.</p><h2 id="Service-Account-생성"><a href="#Service-Account-생성" class="headerlink" title="Service Account 생성"></a>Service Account 생성</h2><p>콘솔에서 엑세스 키를 발급받을 프로젝트를 선택하자.</p><ul><li>다음으로 [탐색 메뉴] - [IAM 및 관리자] - [서비스 계정]에 접속한다.</li><li>[+ 서비스 계정 만들기]를 클릭해서 서비스 계정을 만들고 프로젝트 엑세스 권한을 설정하면된다.</li></ul><p><img src="/images/2202/GCP-key/권한.png" alt="계정 생성"></p><h2 id="Service-Account-Key-발급받기"><a href="#Service-Account-Key-발급받기" class="headerlink" title="Service Account Key 발급받기"></a>Service Account Key 발급받기</h2><ul><li>생성된 계정의 [작업] - [키 관리]로 이동한다.</li><li>[키 추가] - [새 키 만들기] - [JSON]으로 발급받아서 사용하면 된다.</li></ul><h2 id="python-GCP-연동하기"><a href="#python-GCP-연동하기" class="headerlink" title="python GCP 연동하기"></a>python GCP 연동하기</h2><ul><li><a href="https://hangack.github.io/2022/02/16/Codding/Python/SQL/pandas_gbq-python-google-bigquery/">pandas_gbq python과 google bigquery 연동하기</a></li></ul><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://wooiljeong.github.io/python/python-bigquery/">Python BigQuery 연동하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/Google-Cloud/">Google Cloud</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/Google-Cloud/bigquery/">bigquery</category>
      
      
      <category domain="https://hangack.github.io/tags/GCP/">GCP</category>
      
      
      <comments>https://hangack.github.io/2022/01/27/Codding/GCP/BigQuery/GCP-accesskey/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>g2g-crwaling01: 크롤링 g2g 종목 선정</title>
      <link>https://hangack.github.io/2022/01/23/Codding/Python/crwaling_G2G/g2g-crwaling01/</link>
      <guid>https://hangack.github.io/2022/01/23/Codding/Python/crwaling_G2G/g2g-crwaling01/</guid>
      <pubDate>Sat, 22 Jan 2022 19:37:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;현거래 매물 크롤링을 통해 얻을 수 있는 정보는 간단하게 가격 범위와 판매자 인원으로 볼 수 있다.&lt;/p&gt;
&lt;p&gt;판매 가격은 대쉬보드로 활용할 수 있을거 같다.&lt;/p&gt;
&lt;p&gt;하지만 결국 어느 시점에 게임(혹은 신규 컨텐츠)의 수명이 어느 순간까지</description>
        
      
      
      
      <content:encoded><![CDATA[<p>현거래 매물 크롤링을 통해 얻을 수 있는 정보는 간단하게 가격 범위와 판매자 인원으로 볼 수 있다.</p><p>판매 가격은 대쉬보드로 활용할 수 있을거 같다.</p><p>하지만 결국 어느 시점에 게임(혹은 신규 컨텐츠)의 수명이 어느 순간까지 지속되는지 예측하는 등 프로모션, 마케팅적으로 아웃풋이 나오는게 중요하다.<br>따라서 신규 컨텐츠 출시 간격이 나름 규칙적인, 그리고 신규 컨텐츠 발매마다 서버가 초기화되서 재화 가치도 고정되지 않는 게임인 POE에 대한 현거래 data를 크롤링하기로 했다.</p><p>전 세계가 공유하고 모드만 바뀌는 서버 구성이므로 모든 서버를 수집할 예정이고, 시각화 혹은 예측 모델을 만들 때 업자 매물을 제거하기 편하게 리그가 종료된 시점에도 수집을 계속한다.</p><p>신규 컨텐츠가 나올 때 항상 20:00 UTC(05:00 KOR)에 서버가 열리므로 1시간 뒤인 새벽 6시에 매일 수집한다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://www.g2g.com/">G2G</a></li><li><a href="https://www.pathofexile.com/">Path of Exile</a></li><li><a href="https://pathofexile.fandom.com/wiki/League">POE League</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crwaling-G2G/">crwaling_G2G</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%81%AC%EB%A1%A4%EB%A7%81/">크롤링</category>
      
      
      <comments>https://hangack.github.io/2022/01/23/Codding/Python/crwaling_G2G/g2g-crwaling01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BeautifulSoup find와 select</title>
      <link>https://hangack.github.io/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/</link>
      <guid>https://hangack.github.io/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/</guid>
      <pubDate>Thu, 20 Jan 2022 07:13:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;request 혹은 selenium으로 html 코드를 뜯어왔다면 태그를 특정지어서 불러올 데이터를 지정해줘야한다.&lt;br&gt;이 때, 사용할 수 있는 모듈 중 하나가 BeautifulSoup와 Scrapy다.&lt;/p&gt;
&lt;h1 id=&quot;BeautifulS</description>
        
      
      
      
      <content:encoded><![CDATA[<p>request 혹은 selenium으로 html 코드를 뜯어왔다면 태그를 특정지어서 불러올 데이터를 지정해줘야한다.<br>이 때, 사용할 수 있는 모듈 중 하나가 BeautifulSoup와 Scrapy다.</p><h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><p>bs4를 설치하고 BeautifulSoup를 사용한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install beautifulsoup4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html)</span><br></pre></td></tr></table></figure><p>기본적으로 태그를 식별하는 방법은 <code>find</code>와 <code>select</code>가 있다.</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find의 경우 <code>tag</code>의 <code>id</code>, <code>class</code> 등을 지정해서 찾을 수 있다.</p><p>python에서는 <code>class</code>가 따로 쓰이므로 class 요소를 지정할 때는 <code>class_</code>로 넣어줘야한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.find(<span class="string">&quot;strong&quot;</span>)</span><br><span class="line">soup.find(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;cdp_i&quot;</span>)</span><br><span class="line">soup.find(class_=<span class="string">&quot;cdp_i&quot;</span>)</span><br><span class="line">soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;hide&quot;</span>)</span><br></pre></td></tr></table></figure><p>class와 id같은 요소를 지정해서 불러오기 때문에 특정 상황에선 정확도가 높다.</p><h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all"></a>find_all</h3><p><code>find()</code>의 경우 하나의 태그 html만 불러올 수 있는대, <code>find_all()</code>을 사용하면 조건을 만족하는 모든 html을 list 형식으로 받아온다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>select를 사용하면 <code>find_all()</code>처럼 list로 받아올 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">soup.select(<span class="string">&quot;a.cdp_i&quot;</span>)</span><br><span class="line">soup.select(<span class="string">&quot;.cdp_i&quot;</span>)</span><br><span class="line">soup.select(<span class="string">&quot;div#hide&quot;</span>)</span><br></pre></td></tr></table></figure><p>또한, 중첩 tag를 선택할 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">&quot;div#hide &gt; a.cdp_i&quot;</span>)</span><br></pre></td></tr></table></figure><p>div 태그의 id=”hide” 내부의 a 태그의 class=”cdp_i”인 html을 불러온다.</p><p>select의 경우 메모리 소모량과 수행시간이 find와 비교하면 효율적이다.</p><h3 id="select-one"><a href="#select-one" class="headerlink" title="select_one"></a>select_one</h3><p>find의 경우와 반대로 가장 앞의 하나만 불러오기 위해선 <code>select_one</code>을 사용하면된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select_one(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://beautiful-soup-4.readthedocs.io/en/latest/#">Beautiful Soup Documentation</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crawling/">crawling</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/bs4/">bs4</category>
      
      
      <comments>https://hangack.github.io/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>g2g-crwaling00: javascript 동적페이지 크롤링</title>
      <link>https://hangack.github.io/2022/01/17/Codding/Python/crwaling_G2G/g2g-crwaling00/</link>
      <guid>https://hangack.github.io/2022/01/17/Codding/Python/crwaling_G2G/g2g-crwaling00/</guid>
      <pubDate>Sun, 16 Jan 2022 23:04:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;현거래 매물 거래 현황을 수집하려 한다.&lt;br&gt;전 세계를 대상으로하는 게임의 거래 데이터를 수집할 예정이니 세계 규모의 사이트 중 유명한 현거래 사이트인 &lt;a href=&quot;https://www.g2g.com/&quot;&gt;G2G&lt;/a&gt;를 크롤링할 예정이다.&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>현거래 매물 거래 현황을 수집하려 한다.<br>전 세계를 대상으로하는 게임의 거래 데이터를 수집할 예정이니 세계 규모의 사이트 중 유명한 현거래 사이트인 <a href="https://www.g2g.com/">G2G</a>를 크롤링할 예정이다.</p><p>G2G를 크롤링 하는데 request로 html을 가져오니 사이트 구조만 긁어오고 텍스트 내용이 들어간 태그들은 가져오지 못했다.</p><p>문제는 request의 경우 사이트에서 바로 html 코드를 긁어오기 때문에 유저의 행동에 따라 혹은 서버에서 요청을 받고 정보를 불러오는 javascript 동적페이지에 대한 대응을 할 수 없던거였다.</p><h1 id="my-work"><a href="#my-work" class="headerlink" title="my work"></a>my work</h1><ul><li><a href="https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/">selenium 사용하기</a></li><li>github: <a href="https://github.com/hangack/project-green/tree/main/crawling-g2g">project</a></li><li><a href="https://github.com/hangack/project-green/blob/main/crawling-g2g/source/crawl_URL_boost.py">crawl_URL_boost.py</a></li></ul><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://www.g2g.com/">G2G</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crwaling-G2G/">crwaling_G2G</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/selenium/">selenium</category>
      
      <category domain="https://hangack.github.io/tags/%ED%81%AC%EB%A1%A4%EB%A7%81/">크롤링</category>
      
      
      <comments>https://hangack.github.io/2022/01/17/Codding/Python/crwaling_G2G/g2g-crwaling00/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>selenium 사용하기</title>
      <link>https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/</link>
      <guid>https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/</guid>
      <pubDate>Sun, 16 Jan 2022 14:33:47 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;크롤링-문제-발생&quot;&gt;&lt;a href=&quot;#크롤링-문제-발생&quot; class=&quot;headerlink&quot; title=&quot;크롤링 문제 발생&quot;&gt;&lt;/a&gt;크롤링 문제 발생&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.g2g.com/&quot;&gt;G2G&lt;/a&gt; 페이지</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="크롤링-문제-발생"><a href="#크롤링-문제-발생" class="headerlink" title="크롤링 문제 발생"></a>크롤링 문제 발생</h1><p><a href="https://www.g2g.com/">G2G</a> 페이지를 크롤링하면서 원하는 html 구문이 <a href="https://docs.python-requests.org/en/latest/">requests</a> 방식으로는 스크래핑이 안되서 이유를 찾아봤다.<br>g2g 페이지는 javascript를 활용, 동적 페이지로 구성된 녀석이라 페이지를 열어서 활성된 html 구문을 가져와야 원하는 정보를 받아올 수 있는 경우였다.</p><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><p>직접 페이지를 열기 위한 라이브러리 <a href="https://www.selenium.dev/">selenium</a>의 파이썬(or 아나콘다) 설치를 진행한다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install selenium</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda install selenium</span></span><br></pre></td></tr></table></figure><br>나의 경우 venv 환경을 이용할 예정이라 venv 경로에서 bash를 이용해 <code>pip install</code> 해줬다.</p><h2 id="브라우저-webdriver-설치"><a href="#브라우저-webdriver-설치" class="headerlink" title="브라우저 webdriver 설치"></a>브라우저 webdriver 설치</h2><p>selenium을 받으면 끝이 아니라 selenium으로 html 구문을 받아오기 위해 webdriver를 받아와서 지정해줘야한다.</p><ul><li><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">Chrome(old)</a>, <a href="https://sites.google.com/chromium.org/driver/">Chrome(new)</a></li><li><a href="https://github.com/mozilla/geckodriver/releases">Firefox</a></li><li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">Edge</a></li><li><a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">Safari</a></li></ul><p>사용중인 os 기준으로 driver를 다운받으면 되지만, chrome의 경우 chrome 버전에 맞춰서 받아주자.</p><p>난 비교적 깔린 확장프로그램이 적어 가벼운 Firefox로 진행했다.</p><h2 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h2><p>위에서 다운받은 webdriver를 압축해제 해주고 받은 브라우저에 맞춰서 driver를 지정해주자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox(executable_path=<span class="string">&quot;webdriver 경로.exe&quot;</span>)</span><br><span class="line">url = <span class="string">&quot;https://www.g2g.com/categories/new-world-coins&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">html = driver.page_source</span><br></pre></td></tr></table></figure><p>일반 <a href="https://www.mozilla.org/ko/firefox/new/">Firefox</a>와 <a href="https://www.mozilla.org/ko/firefox/channel/desktop/">Nightly 버전</a>이 같이 깔려있어서 그런지 Firefox Nightly 버전으로 열렸다.</p><p>불러온 html 구문을 BeautifulSoup, Scrapy와 같은 크롤링 라이브러리 명령어에 가져올 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html)</span><br></pre></td></tr></table></figure><h2 id="브라우저-종료"><a href="#브라우저-종료" class="headerlink" title="브라우저 종료"></a>브라우저 종료</h2><p>driver 명령어만 이용하면 url을 직접 넣어줘야하지만,<br>클릭, 새창에서 열기 등 다양한 명령어를 사용할 수 있다. 필요할 때 찾아볼 예정이다.</p><p>페이지 크롤링이 끝났고, 브라우저가 열려있을 필요 없다면 종료해주면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.close()  <span class="comment"># 탭 닫기</span></span><br><span class="line">driver.quit()   <span class="comment"># 창 닫기</span></span><br></pre></td></tr></table></figure><h2 id="로딩-대기"><a href="#로딩-대기" class="headerlink" title="로딩 대기"></a>로딩 대기</h2><p>코드 실행 대기를 생각하면 <code>time</code> 모듈의 <code>sleep()</code>함수를 사용해 주어진 시간 동안 무조건 대기를 진행할 수 있다.</p><p>하지만 우리가 원하는건 무조건적인 대기가 아니라 html 코드를 불러오기 위해 브라우저 로딩이 끝날 때까지만 코드를 대기시키는 방법이다.</p><h3 id="Implicit-Waits-암시적-대기"><a href="#Implicit-Waits-암시적-대기" class="headerlink" title="Implicit Waits,암시적 대기"></a>Implicit Waits,암시적 대기</h3><p>옵션 설정하듯 대기시간을 한번 설정하면 전역 적용된다.<br>bs4같은 모듈이 아닌 driver 라이브러리를 활용해 특정 요소를 찾을 때 활용할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># seconds</span></span><br><span class="line"></span><br><span class="line">driver.get(URL)</span><br><span class="line">driver.find_element_by_id(Elements)</span><br></pre></td></tr></table></figure><h3 id="Explicit-Waits-명시적-대기"><a href="#Explicit-Waits-명시적-대기" class="headerlink" title="Explicit Waits, 명시적 대기"></a>Explicit Waits, 명시적 대기</h3><p>특정 조건이 만족할 때까지 지정된 시간 동안 대기하고, timeout된 경우 TimeoutException이 발생한다.</p><p><code>expected_conditions</code> 함수의 조건이 만족할 때까지 기다리는 코드를 사용할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">30</span>)</span><br><span class="line"><span class="comment"># 특정 요소를 찾을 수 있을 때까지</span></span><br><span class="line">element = EC.presence_of_element_located((By.CLASS_NAME , <span class="string">&quot;offers-bottom-attributes.offer__content-lower-items&quot;</span>))</span><br><span class="line">wait.until(element)</span><br></pre></td></tr></table></figure><p>동적 페이지의 경우 하나의 URL에서 구조가 바뀌는 경우도 있다.</p><p>이런 경우 클릭이 가능할 때까지 기다리는 함수를 사용할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 클릭이 가능할 때까지</span></span><br><span class="line">element = EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//a[@href=&quot;#!-1&quot;]&#x27;</span>))</span><br></pre></td></tr></table></figure><p>아래의 조건들을 활용할 수 있다.</p><ul><li><code>title_is</code></li><li><code>title_contains</code></li><li><code>presence_of_element_located</code></li><li><code>visibility_of_element_located</code></li><li><code>visibility_of</code></li><li><code>presence_of_all_elements_located</code></li><li><code>text_to_be_present_in_element</code></li><li><code>text_to_be_present_in_element_value</code></li><li><code>frame_to_be_available_and_switch_to_it</code></li><li><code>invisibility_of_element_located</code></li><li><code>element_to_be_clickable</code></li><li><code>staleness_of</code></li><li><code>element_to_be_selected</code></li><li><code>element_located_to_be_selected</code></li><li><code>element_selection_state_to_be</code></li><li><code>element_located_selection_state_to_be</code></li><li><code>alert_is_present</code></li></ul><p><code>try</code> ~ <code>finally</code> 구문을 활용하면 true인 경우 다음 단계로 넘어가는 코드를 활용할 수 있다.</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://selenium-python.readthedocs.io/">Selenium with Python</a></li><li><a href="https://greeksharifa.github.io/references/2020/10/30/python-selenium-usage/">Python Selenium 사용법</a></li><li><a href="https://stackoverflow.com/questions/68355161/an-error-occurred-while-parsing-the-page-python">G2G javascript crawling</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crawling/">crawling</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/selenium/">selenium</category>
      
      
      <comments>https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[TGA] The Game Awards 2021 봤음</title>
      <link>https://hangack.github.io/2021/12/11/hobby/games/TGA2021/</link>
      <guid>https://hangack.github.io/2021/12/11/hobby/games/TGA2021/</guid>
      <pubDate>Sat, 11 Dec 2021 02:46:18 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;TGA-2021&quot;&gt;&lt;a href=&quot;#TGA-2021&quot; class=&quot;headerlink&quot; title=&quot;TGA 2021&quot;&gt;&lt;/a&gt;TGA 2021&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https:/</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="TGA-2021"><a href="#TGA-2021" class="headerlink" title="TGA 2021"></a>TGA 2021</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/OS4m2O3V93o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>작년 야랄났던 그 시상식</p><h2 id="2021년"><a href="#2021년" class="headerlink" title="2021년"></a>2021년</h2><p>이번년도 TGA GOTY 게임은 하고 싶지만 실행도 못해보겠네 ㅠ<br>근대 저 아저씨는 실제로도 저런 말투 엌ㅋㅋ</p><p>데스 루프는 난 들어본적 없는데 계속 나오네.<br>케나, 데스루프 중 하나는 해볼 듯</p><h2 id="발매-예정"><a href="#발매-예정" class="headerlink" title="발매 예정"></a>발매 예정</h2><p>드에 인퀴지션 만든 사람이 새로운 스튜디오에서 <a href="https://www.playnightingale.com/">나이팅게일</a>이란 게임을 만든다. 발헤임? 이카루스?에 스토리를 얹은 스팀펑크 느낌인건가. 드에 만든 사람이라니 일단 기대컨 들어간다</p><p>IP 깡패 <a href="https://www.focus-entmt.com/en-us/games/warhammer-40000-space-marine-2">즌쟁망치</a>는 매년 등장하네 죽지 않아</p><p>부?활할 <a href="https://frontiers.sonicthehedgehog.com/v2/index.html">파란 고슴도치</a>는 젤다 라이크?</p><p>히어로 영화 게임 스핀오프는 그닥이지만 아캄 시리즈는 괜춘다고 보기에 <a href="https://www.suicidesquadgame.com/ko-kr">살자 특공대</a>, 괜찮을지도</p><p><a href="https://playwonderlands.2k.com/ko-KR/">원더(보더)랜드</a>는 클리셰들이 내 취향일거같은대.<br>그래서 앨리스 어사일럼은 대체 언제 나옴</p><p><a href="https://dokev.pearlabyss.com/ko/Main/Index#subscribe">도깨V</a> 개같이 흥행? 요구르팅 노선? 자칫하면 심심할 수 밖에 없는 플레이를 어떤 방식으로 풀었을지 기대 중</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/TGA/">TGA</category>
      
      
      <comments>https://hangack.github.io/2021/12/11/hobby/games/TGA2021/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이참 파일 확장자 타입 변경하기</title>
      <link>https://hangack.github.io/2021/12/11/Codding/Python/Setting/pycharm-file-type/</link>
      <guid>https://hangack.github.io/2021/12/11/Codding/Python/Setting/pycharm-file-type/</guid>
      <pubDate>Sat, 11 Dec 2021 00:34:18 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;파이참에서 파일을 만들다보면 확장자명을 지정하지 않고 파일을 만드면서 text 형식으로 지정하는 경우가 있다.&lt;br&gt;보통의 경우 auto-detected이지만, 잘못 지정하면 확장자를 바꿔도 기존에 지정한 형식으로 읽어온다.&lt;br&gt;이 경우 지정한</description>
        
      
      
      
      <content:encoded><![CDATA[<p>파이참에서 파일을 만들다보면 확장자명을 지정하지 않고 파일을 만드면서 text 형식으로 지정하는 경우가 있다.<br>보통의 경우 auto-detected이지만, 잘못 지정하면 확장자를 바꿔도 기존에 지정한 형식으로 읽어온다.<br>이 경우 지정한 형식을 제거해주면 된다.</p><p><img src="\images\2112\pycharm-filetype\filetypes.png" alt=""></p><p>Setting - File Types</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/11/Codding/Python/Setting/pycharm-file-type/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이참 가상환경 생성</title>
      <link>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/</link>
      <guid>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/</guid>
      <pubDate>Thu, 09 Dec 2021 05:13:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;가상환경&quot;&gt;&lt;a href=&quot;#가상환경&quot; class=&quot;headerlink&quot; title=&quot;가상환경&quot;&gt;&lt;/a&gt;가상환경&lt;/h1&gt;&lt;p&gt;라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.&lt;br&gt;모든 패키지에 대응할 수는 없으니</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="가상환경"><a href="#가상환경" class="headerlink" title="가상환경"></a>가상환경</h1><p>라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.<br>모든 패키지에 대응할 수는 없으니 파이썬이나 해당 패키지를 재설치 혹은 Downgrade를 진행해야 할 것이다.<br>위 문제를 해결할 수 있는 방법이 여러 파이썬을 생성해 각각 환경에 맞는 패키지를 설치해 따로 불러오는 방법으로 <strong>가상환경</strong>이라 한다.</p><h2 id="가상환경-생성"><a href="#가상환경-생성" class="headerlink" title="가상환경 생성"></a>가상환경 생성</h2><h3 id="설정에서-생성하기"><a href="#설정에서-생성하기" class="headerlink" title="설정에서 생성하기"></a>설정에서 생성하기</h3><p>프로젝트를 생성하고 코드 작업을 진행하다 버전 에러가 났을 때,</p><p>Files - Settings - Project: <dir> - Python Interpreter 에서 <code>Add...</code> 를 눌러 추가할 수 있다.</p><p><img src="\images\2112\pycharm-venv\env-setting1.png" alt=""></p><p>가장 기본적인 Venv를 설치할 수 있다. anaconda 설치가 됐다면 conda 환경도 추가할 수 있지만, 기본적인 파이썬 Venv 설치를 진행할 예정.<br>파이썬 exe 경로와 가상환경 dir 경로를 잘 확인해주자</p><p><img src="\images\2112\pycharm-venv\env-setting2.png" alt=""></p><h3 id="프로젝트와-같이-생성하기"><a href="#프로젝트와-같이-생성하기" class="headerlink" title="프로젝트와 같이 생성하기"></a>프로젝트와 같이 생성하기</h3><p>보통의 경우는 파이참에서 프로젝트를 생성하며 가상환경 설치를 진행할 것이다.</p><p><img src="\images\2112\pycharm-venv\env-setting2-2.png" alt=""></p><h3 id="터미널에서-생성하기"><a href="#터미널에서-생성하기" class="headerlink" title="터미널에서 생성하기"></a>터미널에서 생성하기</h3><p>파이참같은 개발환경을 사용하지 못하고 리눅스 등 환경의 터미널에서 생성해야할 경우는 <a href="https://docs.python.org/ko/3.8/library/venv.html">venv — 가상 환경 생성</a>를 참조한다.</p><h1 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h1><p>파이썬 가상환경을 생성했다면 사용할 패키지를 설치하면 된다.</p><p>정상적으로 설치했다면 문제 없겠지만 어느 파이썬을 참조하고 있는지 터미널에서 확인해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> window</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">where</span> python</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> mac, linux .ect</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> python</span></span><br></pre></td></tr></table></figure><p><img src="\images\2112\pycharm-venv\where-python.png" alt=""></p><p>가상환경을 참조하지 못하고 있다면 아래 명령어로 (venv) 강제 진입해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> window</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/Scripts/activate</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> mac, linux .ect</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/bin/activate</span></span><br></pre></td></tr></table></figure><h2 id="설정-interpreter에서"><a href="#설정-interpreter에서" class="headerlink" title="설정 interpreter에서"></a>설정 interpreter에서</h2><p>파이참 같은 경우엔 Python Interpreter - install 버튼을 선택해 설치할 패키지와 버전을 선택할 수 있다.</p><p><img src="\images\2112\pycharm-venv\env-setting4.png" alt=""></p><h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h2><p>버전을 일일히 기억하고 있기도 뭐하고 설치할 패키지가 많다면 하나하나 설치하는 것도 일이다.</p><p><a href="https://github.com/pycaret/pycaret/blob/master/requirements.txt">pycaret</a>같은 패키지를 보면 <code>requirements.txt</code>로 관리한다.</p><p>텍스트 파일에 원하는 패키지와 버전을 입력했다면 pip 명령어로 한번에 설치를 진행할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><h1 id="Jupyter-ipynb에서-가상환경-사용"><a href="#Jupyter-ipynb에서-가상환경-사용" class="headerlink" title="Jupyter ipynb에서 가상환경 사용"></a>Jupyter <code>ipynb</code>에서 가상환경 사용</h1><p>가상환경 이름과 표시될 이름을 설정해준다.</p><p>난 각각 <dir 이름>과 &lt;파이썬버전(dir 이름)&gt;으로 설정했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython kernel install --user --name python_ml --display-name &quot;Python3(python_ml)&quot;</span><br></pre></td></tr></table></figure><p>정상적으로 등록됐다면 jupyter 환경으로 접속하면 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jupyter lab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter notebook</span></span><br></pre></td></tr></table></figure><p>주피터 랩을 추천한다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://docs.python.org/ko/3.8/library/venv.html">venv — 가상 환경 생성</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이참, 파이썬 인코딩 설정</title>
      <link>https://hangack.github.io/2021/12/08/Codding/Python/Setting/pycharm-encoding/</link>
      <guid>https://hangack.github.io/2021/12/08/Codding/Python/Setting/pycharm-encoding/</guid>
      <pubDate>Wed, 08 Dec 2021 00:04:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;어떤 작업환경을 사용하든 가능하다면 &lt;code&gt;UTF-8&lt;/code&gt; 포멧으로 작업하는걸 추천한다.&lt;/p&gt;
&lt;p&gt;pycharm에서도 인코딩 방식 변경을 지원함.&lt;/p&gt;
&lt;p&gt;file - setting - editor - file encodings</description>
        
      
      
      
      <content:encoded><![CDATA[<p>어떤 작업환경을 사용하든 가능하다면 <code>UTF-8</code> 포멧으로 작업하는걸 추천한다.</p><p>pycharm에서도 인코딩 방식 변경을 지원함.</p><p>file - setting - editor - file encodings에서 Global Encoding이 <code>UTF-8</code>이 아니라면 변경해주자.</p><p>프로젝트 인코딩과 속성 파일 인코딩 방식은 OS가 윈도우라면 새 프로젝트를 열 때 마다 기본값으로 돌아갈 것이다.<br>필요한 설정이 아니라면 크게 신경쓰진 말자.</p><p><img src="\images\2112\pycharm-encoding\utf-8.png" alt="encoding"></p><p>※ 코드 파일 맨 윗단에 아래 주석을 추가하면 자동 UTF-8 인코딩 해준다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>pycharm에서 UTF-8로 변경했고 python 3++를 사용중이기에 추가할 필요는 없지만 작업 파일을 공유하거나 먼 미래에 열어볼 나를 위해 추가한다.</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/08/Codding/Python/Setting/pycharm-encoding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey Graphs</title>
      <link>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/</link>
      <guid>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/</guid>
      <pubDate>Tue, 07 Dec 2021 03:09:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Dynamic-plot&quot;&gt;&lt;a href=&quot;#Dynamic-plot&quot; class=&quot;headerlink&quot; title=&quot;Dynamic plot&quot;&gt;&lt;/a&gt;Dynamic plot&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hangack.githu</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Dynamic-plot"><a href="#Dynamic-plot" class="headerlink" title="Dynamic plot"></a>Dynamic plot</h1><p><a href="https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/">Kaggle_Survey01 - Pie</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/1.embed" height="525" width="100%"></iframe><p><a href="https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/">Kaggle_Survey02 - Bar</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/10.embed" height="525" width="100%"></iframe><p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Kaggle_Survey03 - Treemap</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/12.embed" height="525" width="100%"></iframe><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/14.embed" height="525" width="100%"></iframe><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><ul><li><a href="https://www.kaggle.com/kaggle/kaggle-survey-2017">Kaggle_Survey: 2017</a></li><li><a href="https://www.kaggle.com/kaggle/kaggle-survey-2018">Kaggle_Survey: 2018</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2019">Kaggle_Survey: 2019</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2020">Kaggle_Survey: 2020</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2021">Kaggle_Survey: 2021</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle-Survey03-B: replace가 작동 안함 [pandas]</title>
      <link>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/</link>
      <guid>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/</guid>
      <pubDate>Mon, 06 Dec 2021 02:17:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Japan-amp-China-IDE’s&quot;&gt;&lt;a href=&quot;#Japan-amp-China-IDE’s&quot; class=&quot;headerlink&quot; title=&quot;Japan &amp;amp; China: IDE’s&quot;&gt;&lt;/a&gt;Japan &amp;amp; China: I</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Japan-amp-China-IDE’s"><a href="#Japan-amp-China-IDE’s" class="headerlink" title="Japan &amp; China: IDE’s"></a>Japan &amp; China: IDE’s</h1><p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Program_Language 과정</a>과 동일</p><p>Treemap을 뽑으려니 “Jupyter (JupyterLab, Jupyter Notebooks, etc)”와 “Visual Studio / Visual Studio Code”가 너무 길어 플롯에서 식별하기 난감하다.</p><p>각각 “Jupyter”와 “VS / VSCode”로 간략화 하려한다.</p><h2 id="1차-시도"><a href="#1차-시도" class="headerlink" title="1차 시도"></a>1차 시도</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc)&#x27;</span>, value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Visual Studio / Visual Studio Code&#x27;</span>, value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>둘 다 변경되지 않았다.</p><h2 id="2차-시도"><a href="#2차-시도" class="headerlink" title="2차 시도"></a>2차 시도</h2><p>실제 string을 확인해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df_IDEs_JnC_21n19.loc[<span class="number">0</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(df_IDEs_JnC_21n19.iloc[<span class="number">29</span>].tolist())</span><br></pre></td></tr></table></figure><pre><code>[&#39;2021&#39;, &#39;Japan&#39;, &#39;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#39;, 200][&#39;2019&#39;, &#39;China&#39;, &#39; Visual Studio / Visual Studio Code &#39;, 200]</code></pre><p>뒤(혹은 앞뒤)로 공백이 들어간 상황임을 알 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#x27;</span>, value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27; Visual Studio / Visual Studio Code &#x27;</span>, value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>성공적으로 변경됐다.</p><h3 id="더-간편하게"><a href="#더-간편하게" class="headerlink" title="더 간편하게"></a>더 간편하게</h3><p>근대 이럴거면 그냥 요소를 뽑아내서 직접 삽입하는게 편할 듯하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[<span class="number">0</span>,<span class="string">&quot;IDE\&#x27;s&quot;</span>], value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[<span class="number">29</span>,<span class="string">&quot;IDE\&#x27;s&quot;</span>], value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>인덱스와 칼럼명을 직접 지정해 뽑아낸 string과 동일한 요소를 모두 변경한다.</p><h2 id="정규식"><a href="#정규식" class="headerlink" title="정규식?"></a>정규식?</h2><p>‘ Visual Studio / Visual Studio Code ‘ 요소는 실제로는 아니지만 정규 표현식으로 해석할 여지가 있다.<br>정 방법을 못찾겠다면 <code>regex</code> 요소를 <code>True</code>로 지정해보는것도 방법이 될 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#x27;</span>, value = <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Visual Studio / Visual Studio Code&#x27;</span>, value = <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>, regex = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="IDE’s-Treemap"><a href="#IDE’s-Treemap" class="headerlink" title="IDE’s Treemap"></a>IDE’s Treemap</h1><p><img src="\images\2112\kaggle-survey03\IDEs.png" alt="IDE&#39;s"></p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html">pandas.DataFrame.replace</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

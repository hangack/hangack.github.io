<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hanga(c)k</title>
    <link>https://hangack.github.io/</link>
    
    <atom:link href="https://hangack.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 14 Feb 2022 08:08:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>pyspark 설치</title>
      <link>https://hangack.github.io/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/</link>
      <guid>https://hangack.github.io/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/</guid>
      <pubDate>Mon, 14 Feb 2022 00:11:31 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;pyspark&quot;&gt;&lt;a href=&quot;#pyspark&quot; class=&quot;headerlink&quot; title=&quot;pyspark&quot;&gt;&lt;/a&gt;pyspark&lt;/h1&gt;&lt;p&gt;대용량 data를 관리하기 위한 유사 SQL 라이브러리&lt;/p&gt;
&lt;h2 id=&quot;사전-준비&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="pyspark"><a href="#pyspark" class="headerlink" title="pyspark"></a>pyspark</h1><p>대용량 data를 관리하기 위한 유사 SQL 라이브러리</p><h2 id="사전-준비"><a href="#사전-준비" class="headerlink" title="사전 준비"></a>사전 준비</h2><ul><li>python 설치</li><li>java 설치</li><li>spark 다운로드</li><li>winutils 다운로드</li></ul><h3 id="python-설치"><a href="#python-설치" class="headerlink" title="python 설치"></a>python 설치</h3><p>파이썬 혹은 아나콘다를 설치한다.<br>python 버전 3 이상으로 설치한다.</p><ul><li><a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></li><li><a href="https://hangack.github.io/2021/11/01/Codding/Python/basic/Python0_download/">아나콘다 설치</a></li></ul><h3 id="java-설치"><a href="#java-설치" class="headerlink" title="java 설치"></a>java 설치</h3><p>나의 경우 java가 설치되어있고 <code>JAVA_HOME</code> 환경변수까지 설정되있기에 그대로 사용했으나 아니라면 오라클에 로그인하고 java를 설치한다.</p><ul><li><a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></li></ul><p>이후 <code>JAVA_HOME</code> 환경 변수를 추가해준다.</p><p><img src="/images/2202/pyspark-설치/JAVA_HOME.png" alt="JAVA_HOME"></p><p>시스템 변수, 사용자 변수 중 원하는 영역에 추가해준다.<br>난 여러 계정을 사용하지 않으니 그냥 사용자 변수에 넣어줬다.</p><h3 id="Spark-다운로드"><a href="#Spark-다운로드" class="headerlink" title="Spark 다운로드"></a>Spark 다운로드</h3><p>Spark tgz 압축파일을 다운받는다.</p><ul><li><a href="https://spark.apache.org/downloads.html">spark</a></li></ul><p><img src="/images/2202/pyspark-설치/Spark.png" alt="SPARK"></p><p>원하는 경로에 압축 풀고 위와 동일하게 환경 변수를 설정해준다.</p><p><img src="/images/2202/pyspark-설치/Spark-경로.png" alt="SPARK-경로"><br><img src="/images/2202/pyspark-설치/SPARK_HOME.png" alt="SPARK_HOME"></p><h3 id="winutils-다운로드"><a href="#winutils-다운로드" class="headerlink" title="winutils 다운로드"></a>winutils 다운로드</h3><p>위에서 받은 spark 버전과 동일 버전의 <code>winutils.exe</code>를 받아준다.</p><ul><li><a href="https://github.com/cdarlint/winutils">winutils</a></li></ul><p>winutils용 폴더를 만들고 bin 파일 아래에 넣어준다.</p><p><img src="/images/2202/pyspark-설치/winutils-경로.png" alt="winutils-경로"></p><p>hadoop 환경변수도 설정한다.</p><p><img src="/images/2202/pyspark-설치/HADOOP_HOME.png" alt="HADOOP_HOME"></p><h3 id="Path-설정"><a href="#Path-설정" class="headerlink" title="Path 설정"></a>Path 설정</h3><p>마지막으로 path 값에</p><ul><li>%JAVA_HOME%\bin</li><li>%SPARK_HOME%\bin</li><li>%HADOOP_HOME%\bin<br>을 넣어준다.</li></ul><p><img src="/images/2202/pyspark-설치/Path.png" alt="path"></p><h2 id="pyspark-실행"><a href="#pyspark-실행" class="headerlink" title="pyspark 실행"></a>pyspark 실행</h2><p>CMD(혹은 Anaconda Prompt)를 열어서 pyspark 설치한다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install pyspark</span></span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pyspark</span></span><br></pre></td></tr></table></figure><p><img src="/images/2202/pyspark-설치/pyspark.png" alt="pyspark"></p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://databricks.com/kr/glossary/pyspark">PySpark란 무엇입니까?</a></li><li><a href="https://dschloe.github.io/python/python_edu/00_settings/spark_installation_windows_10/">Spark Installation on Windows 10</a></li><li><a href="https://ahnty0122.tistory.com/22">WINDOWS에 PySpark 설치</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/pyspark/">pyspark</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/pyspark/">pyspark</category>
      
      
      <comments>https://hangack.github.io/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>unique 요소만 포함하는 set</title>
      <link>https://hangack.github.io/2022/02/07/Codding/Python/basic/unique-list-set/</link>
      <guid>https://hangack.github.io/2022/02/07/Codding/Python/basic/unique-list-set/</guid>
      <pubDate>Mon, 07 Feb 2022 06:45:16 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;특정 집합을 만들다보니 같은 값이 저장되지 않는 리스트를 만들 필요가 생겼다.&lt;br&gt;set() 형식을 사용하면 unique한 객체만 포함하는 집합을 만들 수 있다.&lt;/p&gt;
&lt;p&gt;단, 사용하려면 &lt;code&gt;set()&lt;/code&gt;으로 객체를 초기화 </description>
        
      
      
      
      <content:encoded><![CDATA[<p>특정 집합을 만들다보니 같은 값이 저장되지 않는 리스트를 만들 필요가 생겼다.<br>set() 형식을 사용하면 unique한 객체만 포함하는 집합을 만들 수 있다.</p><p>단, 사용하려면 <code>set()</code>으로 객체를 초기화 해야한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">31</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><pre><code>&#123;1, 2, 3, 10, 31&#125;</code></pre><p>dictionary와 동일한 <code>&#123;</code>, <code>&#125;</code>로 사용되지만 dictionary와 다르게 key가 없는 list 형식이다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://wikidocs.net/16044">set(집합)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EA%B8%B0%EC%B4%88/">기초</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2022/02/07/Codding/Python/basic/unique-list-set/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>datetime 날짜와 시간</title>
      <link>https://hangack.github.io/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/</link>
      <guid>https://hangack.github.io/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/</guid>
      <pubDate>Thu, 03 Feb 2022 17:14:30 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;datatime&quot;&gt;&lt;a href=&quot;#datatime&quot; class=&quot;headerlink&quot; title=&quot;datatime&quot;&gt;&lt;/a&gt;datatime&lt;/h1&gt;&lt;p&gt;datetime 모듈은 특정 시간과 날짜를 불러오는 파이썬 내장 모듈이다.&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="datatime"><a href="#datatime" class="headerlink" title="datatime"></a>datatime</h1><p>datetime 모듈은 특정 시간과 날짜를 불러오는 파이썬 내장 모듈이다.</p><h2 id="날짜와-시간-함수"><a href="#날짜와-시간-함수" class="headerlink" title="날짜와 시간 함수"></a>날짜와 시간 함수</h2><p>datatime 모듈을 사용하면 시간 날짜 UTC timezone을 불러올 수 있고, 내장 함수로 <code>data</code>, <code>time</code> 등을 사용해 날짜 혹은 시간만 지정하고 특정 시간대를 지정해 불러올 수도 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.date.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.time(<span class="number">12</span>,<span class="number">59</span>,<span class="number">33</span>, microsecond=<span class="number">333333</span>, tzinfo=datetime.timezone.utc))</span><br></pre></td></tr></table></figure><br>    2022-02-03<br>    2022-02-03 03:36:07.407621<br>    12:59:33.333333+00:00</p><h2 id="strftime-원하는-형식으로-변경"><a href="#strftime-원하는-형식으로-변경" class="headerlink" title="strftime(원하는 형식으로 변경)"></a>strftime(원하는 형식으로 변경)</h2><p>strftime을 사용하면 불러온 시간을 원하는 형식으로 바꿀 수 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(datetime.datetime.today().strftime(<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span>))</span><br></pre></td></tr></table></figure><br>    2022/02/03 03:40:36</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://docs.python.org/ko/3/library/datetime.html">datatime — 기본 날짜와 시간 형</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%AA%A8%EB%93%88/">모듈</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/datetime/">datetime</category>
      
      
      <comments>https://hangack.github.io/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>time 모듈로 일시정지</title>
      <link>https://hangack.github.io/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/</link>
      <guid>https://hangack.github.io/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/</guid>
      <pubDate>Wed, 02 Feb 2022 13:22:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;python 내장 함수인 &lt;code&gt;time&lt;/code&gt; 모듈을 사용하면 시간 관련 추출이나 간섭을 할 수 있다.&lt;/p&gt;
&lt;p&gt;그 중 이번에 내가 사용할 함수는 &lt;code&gt;sleep()&lt;/code&gt; 함수로 지정한 시간 단위만큼 프로그램 실행 중간</description>
        
      
      
      
      <content:encoded><![CDATA[<p>python 내장 함수인 <code>time</code> 모듈을 사용하면 시간 관련 추출이나 간섭을 할 수 있다.</p><p>그 중 이번에 내가 사용할 함수는 <code>sleep()</code> 함수로 지정한 시간 단위만큼 프로그램 실행 중간에 딜레이를 줄 수 있다.</p><p>특히 이번에 크롤링 중인 페이지가 동적페이지에 하나의 URL에서 클릭으로 HTML 코드만 바뀌는 옵션이 들어가 selenium만으로 크롤링하면 때때로 에러가 발생했다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>을 사용하면 코드 중간에 3초간 딜레이 줄 수 있다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://docs.python.org/ko/3/library/time.html">time — 시간 액세스와 변환</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%AA%A8%EB%93%88/">모듈</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/time/">time</category>
      
      
      <comments>https://hangack.github.io/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BeautifulSoup find와 select</title>
      <link>https://hangack.github.io/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/</link>
      <guid>https://hangack.github.io/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/</guid>
      <pubDate>Thu, 20 Jan 2022 07:13:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;request 혹은 selenium으로 html 코드를 뜯어왔다면 태그를 특정지어서 불러올 데이터를 지정해줘야한다.&lt;br&gt;이 때, 사용할 수 있는 모듈 중 하나가 BeautifulSoup와 Scrapy다.&lt;/p&gt;
&lt;h1 id=&quot;BeautifulS</description>
        
      
      
      
      <content:encoded><![CDATA[<p>request 혹은 selenium으로 html 코드를 뜯어왔다면 태그를 특정지어서 불러올 데이터를 지정해줘야한다.<br>이 때, 사용할 수 있는 모듈 중 하나가 BeautifulSoup와 Scrapy다.</p><h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><p>bs4를 설치하고 BeautifulSoup를 사용한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install beautifulsoup4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html)</span><br></pre></td></tr></table></figure><p>기본적으로 태그를 식별하는 방법은 <code>find</code>와 <code>select</code>가 있다.</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find의 경우 <code>tag</code>의 <code>id</code>, <code>class</code> 등을 지정해서 찾을 수 있다.</p><p>python에서는 <code>class</code>가 따로 쓰이므로 class 요소를 지정할 때는 <code>class_</code>로 넣어줘야한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.find(<span class="string">&quot;strong&quot;</span>)</span><br><span class="line">soup.find(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;cdp_i&quot;</span>)</span><br><span class="line">soup.find(class_=<span class="string">&quot;cdp_i&quot;</span>)</span><br><span class="line">soup.find(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;hide&quot;</span>)</span><br></pre></td></tr></table></figure><p>class와 id같은 요소를 지정해서 불러오기 때문에 특정 상황에선 정확도가 높다.</p><h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all"></a>find_all</h3><p><code>find()</code>의 경우 하나의 태그 html만 불러올 수 있는대, <code>find_all()</code>을 사용하면 조건을 만족하는 모든 html을 list 형식으로 받아온다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>select를 사용하면 <code>find_all()</code>처럼 list로 받아올 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">soup.select(<span class="string">&quot;a.cdp_i&quot;</span>)</span><br><span class="line">soup.select(<span class="string">&quot;.cdp_i&quot;</span>)</span><br><span class="line">soup.select(<span class="string">&quot;div#hide&quot;</span>)</span><br></pre></td></tr></table></figure><p>또한, 중첩 tag를 선택할 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select(<span class="string">&quot;div#hide &gt; a.cdp_i&quot;</span>)</span><br></pre></td></tr></table></figure><p>div 태그의 id=”hide” 내부의 a 태그의 class=”cdp_i”인 html을 불러온다.</p><p>select의 경우 메모리 소모량과 수행시간이 find와 비교하면 효율적이다.</p><h3 id="select-one"><a href="#select-one" class="headerlink" title="select_one"></a>select_one</h3><p>find의 경우와 반대로 가장 앞의 하나만 불러오기 위해선 <code>select_one</code>을 사용하면된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.select_one(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://beautiful-soup-4.readthedocs.io/en/latest/#">Beautiful Soup Documentation</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crawling/">crawling</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/bs4/">bs4</category>
      
      
      <comments>https://hangack.github.io/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>selenium 사용하기</title>
      <link>https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/</link>
      <guid>https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/</guid>
      <pubDate>Sun, 16 Jan 2022 14:33:47 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;크롤링-문제-발생&quot;&gt;&lt;a href=&quot;#크롤링-문제-발생&quot; class=&quot;headerlink&quot; title=&quot;크롤링 문제 발생&quot;&gt;&lt;/a&gt;크롤링 문제 발생&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.g2g.com/&quot;&gt;G2G&lt;/a&gt; 페이지</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="크롤링-문제-발생"><a href="#크롤링-문제-발생" class="headerlink" title="크롤링 문제 발생"></a>크롤링 문제 발생</h2><p><a href="https://www.g2g.com/">G2G</a> 페이지를 크롤링하면서 원하는 html 구문이 <a href="https://docs.python-requests.org/en/latest/">requests</a> 방식으로는 스크래핑이 안되서 이유를 찾아봤다.<br>g2g 페이지는 javascript를 활용, 동적 페이지로 구성된 녀석이라 페이지를 열어서 활성된 html 구문을 가져와야 원하는 정보를 받아올 수 있는 경우였다.</p><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>직접 페이지를 열기 위한 라이브러리 <a href="https://www.selenium.dev/">selenium</a>의 파이썬(or 아나콘다) 설치를 진행한다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install selenium</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda install selenium</span></span><br></pre></td></tr></table></figure><br>나의 경우 venv 환경을 이용할 예정이라 venv 경로에서 bash를 이용해 <code>pip install</code> 해줬다.</p><h3 id="브라우저-webdriver-설치"><a href="#브라우저-webdriver-설치" class="headerlink" title="브라우저 webdriver 설치"></a>브라우저 webdriver 설치</h3><p>selenium을 받으면 끝이 아니라 selenium으로 html 구문을 받아오기 위해 webdriver를 받아와서 지정해줘야한다.</p><ul><li><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">Chrome(old)</a>, <a href="https://sites.google.com/chromium.org/driver/">Chrome(new)</a></li><li><a href="https://github.com/mozilla/geckodriver/releases">Firefox</a></li><li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">Edge</a></li><li><a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">Safari</a></li></ul><p>사용중인 os 기준으로 driver를 다운받으면 되지만, chrome의 경우 chrome 버전에 맞춰서 받아주자.</p><p>난 비교적 깔린 확장프로그램이 적어 가벼운 Firefox로 진행했다.</p><h3 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h3><p>위에서 다운받은 webdriver를 압축해제 해주고 받은 브라우저에 맞춰서 driver를 지정해주자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox(executable_path=<span class="string">&quot;webdriver 경로.exe&quot;</span>)</span><br><span class="line">url = <span class="string">&quot;https://www.g2g.com/categories/new-world-coins&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line">html = driver.page_source</span><br></pre></td></tr></table></figure><p>일반 <a href="https://www.mozilla.org/ko/firefox/new/">Firefox</a>와 <a href="https://www.mozilla.org/ko/firefox/channel/desktop/">Nightly 버전</a>이 같이 깔려있어서 그런지 Firefox Nightly 버전으로 열렸다.</p><p>불러온 html 구문을 BeautifulSoup, Scrapy와 같은 크롤링 라이브러리 명령어에 가져올 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html)</span><br></pre></td></tr></table></figure><h4 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h4><p>driver 명령어만 이용하면 url을 직접 넣어줘야하지만,<br>클릭, 새창에서 열기 등 다양한 명령어를 사용할 수 있다. 필요할 때 찾아볼 예정이다.</p><p>페이지 크롤링이 끝났고, 브라우저가 열려있을 필요 없다면 종료해주면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.close()  <span class="comment"># 탭 닫기</span></span><br><span class="line">driver.quit()   <span class="comment"># 창 닫기</span></span><br></pre></td></tr></table></figure><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://greeksharifa.github.io/references/2020/10/30/python-selenium-usage/">Python Selenium 사용법</a></li><li><a href="https://stackoverflow.com/questions/68355161/an-error-occurred-while-parsing-the-page-python">G2G javascript crawling</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crawling/">crawling</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/selenium/">selenium</category>
      
      
      <comments>https://hangack.github.io/2022/01/16/Codding/Python/crawling/selenium-driver/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[TGA] The Game Awards 2021 봤음</title>
      <link>https://hangack.github.io/2021/12/11/hobby/games/TGA2021/</link>
      <guid>https://hangack.github.io/2021/12/11/hobby/games/TGA2021/</guid>
      <pubDate>Sat, 11 Dec 2021 02:46:18 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;TGA-2021&quot;&gt;&lt;a href=&quot;#TGA-2021&quot; class=&quot;headerlink&quot; title=&quot;TGA 2021&quot;&gt;&lt;/a&gt;TGA 2021&lt;/h2&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https:/</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="TGA-2021"><a href="#TGA-2021" class="headerlink" title="TGA 2021"></a>TGA 2021</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/OS4m2O3V93o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>작년 야랄났던 그 시상식</p><h2 id="2021년"><a href="#2021년" class="headerlink" title="2021년"></a>2021년</h2><p>이번년도 TGA GOTY 게임은 하고 싶지만 실행도 못해보겠네 ㅠ<br>근대 저 아저씨는 실제로도 저런 말투 엌ㅋㅋ</p><p>데스 루프는 난 들어본적 없는데 계속 나오네.<br>케나, 데스루프 중 하나는 해볼 듯</p><h2 id="발매-예정"><a href="#발매-예정" class="headerlink" title="발매 예정"></a>발매 예정</h2><p>드에 인퀴지션 만든 사람이 새로운 스튜디오에서 <a href="https://www.playnightingale.com/">나이팅게일</a>이란 게임을 만든다. 발헤임? 이카루스?에 스토리를 얹은 스팀펑크 느낌인건가. 드에 만든 사람이라니 일단 기대컨 들어간다</p><p>IP 깡패 <a href="https://www.focus-entmt.com/en-us/games/warhammer-40000-space-marine-2">즌쟁망치</a>는 매년 등장하네 죽지 않아</p><p>부?활할 <a href="https://frontiers.sonicthehedgehog.com/v2/index.html">파란 고슴도치</a>는 젤다 라이크?</p><p>히어로 영화 게임 스핀오프는 그닥이지만 아캄 시리즈는 괜춘다고 보기에 <a href="https://www.suicidesquadgame.com/ko-kr">살자 특공대</a>, 괜찮을지도</p><p><a href="https://playwonderlands.2k.com/ko-KR/">원더(보더)랜드</a>는 클리셰들이 내 취향일거같은대.<br>그래서 앨리스 어사일럼은 대체 언제 나옴</p><p><a href="https://dokev.pearlabyss.com/ko/Main/Index#subscribe">도깨V</a> 개같이 흥행? 요구르팅 노선? 자칫하면 심심할 수 밖에 없는 플레이를 어떤 방식으로 풀었을지 기대 중</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/TGA/">TGA</category>
      
      
      <comments>https://hangack.github.io/2021/12/11/hobby/games/TGA2021/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이참 파일 확장자 타입 변경하기</title>
      <link>https://hangack.github.io/2021/12/11/Codding/Python/Setting/pycharm-file-type/</link>
      <guid>https://hangack.github.io/2021/12/11/Codding/Python/Setting/pycharm-file-type/</guid>
      <pubDate>Sat, 11 Dec 2021 00:34:18 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;파이참에서 파일을 만들다보면 확장자명을 지정하지 않고 파일을 만드면서 text 형식으로 지정하는 경우가 있다.&lt;br&gt;보통의 경우 auto-detected이지만, 잘못 지정하면 확장자를 바꿔도 기존에 지정한 형식으로 읽어온다.&lt;br&gt;이 경우 지정한</description>
        
      
      
      
      <content:encoded><![CDATA[<p>파이참에서 파일을 만들다보면 확장자명을 지정하지 않고 파일을 만드면서 text 형식으로 지정하는 경우가 있다.<br>보통의 경우 auto-detected이지만, 잘못 지정하면 확장자를 바꿔도 기존에 지정한 형식으로 읽어온다.<br>이 경우 지정한 형식을 제거해주면 된다.</p><p><img src="\images\2112\pycharm-filetype\filetypes.png" alt=""></p><p>Setting - File Types</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/11/Codding/Python/Setting/pycharm-file-type/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이참 가상환경 생성</title>
      <link>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/</link>
      <guid>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/</guid>
      <pubDate>Thu, 09 Dec 2021 05:13:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;가상환경&quot;&gt;&lt;a href=&quot;#가상환경&quot; class=&quot;headerlink&quot; title=&quot;가상환경&quot;&gt;&lt;/a&gt;가상환경&lt;/h1&gt;&lt;p&gt;라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.&lt;br&gt;모든 패키지에 대응할 수는 없으니</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="가상환경"><a href="#가상환경" class="headerlink" title="가상환경"></a>가상환경</h1><p>라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.<br>모든 패키지에 대응할 수는 없으니 파이썬이나 해당 패키지를 재설치 혹은 Downgrade를 진행해야 할 것이다.<br>위 문제를 해결할 수 있는 방법이 여러 파이썬을 생성해 각각 환경에 맞는 패키지를 설치해 따로 불러오는 방법으로 <strong>가상환경</strong>이라 한다.</p><h2 id="가상환경-생성"><a href="#가상환경-생성" class="headerlink" title="가상환경 생성"></a>가상환경 생성</h2><h3 id="설정에서-생성하기"><a href="#설정에서-생성하기" class="headerlink" title="설정에서 생성하기"></a>설정에서 생성하기</h3><p>프로젝트를 생성하고 코드 작업을 진행하다 버전 에러가 났을 때,</p><p>Files - Settings - Project: <dir> - Python Interpreter 에서 <code>Add...</code> 를 눌러 추가할 수 있다.</p><p><img src="\images\2112\pycharm-venv\env-setting1.png" alt=""></p><p>가장 기본적인 Venv를 설치할 수 있다. anaconda 설치가 됐다면 conda 환경도 추가할 수 있지만, 기본적인 파이썬 Venv 설치를 진행할 예정.<br>파이썬 exe 경로와 가상환경 dir 경로를 잘 확인해주자</p><p><img src="\images\2112\pycharm-venv\env-setting2.png" alt=""></p><h3 id="프로젝트와-같이-생성하기"><a href="#프로젝트와-같이-생성하기" class="headerlink" title="프로젝트와 같이 생성하기"></a>프로젝트와 같이 생성하기</h3><p>보통의 경우는 파이참에서 프로젝트를 생성하며 가상환경 설치를 진행할 것이다.</p><p><img src="\images\2112\pycharm-venv\env-setting2-2.png" alt=""></p><h3 id="터미널에서-생성하기"><a href="#터미널에서-생성하기" class="headerlink" title="터미널에서 생성하기"></a>터미널에서 생성하기</h3><p>파이참같은 개발환경을 사용하지 못하고 리눅스 등 환경의 터미널에서 생성해야할 경우는 <a href="https://docs.python.org/ko/3.8/library/venv.html">venv — 가상 환경 생성</a>를 참조한다.</p><h1 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h1><p>파이썬 가상환경을 생성했다면 사용할 패키지를 설치하면 된다.</p><p>정상적으로 설치했다면 문제 없겠지만 어느 파이썬을 참조하고 있는지 터미널에서 확인해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> window</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">where</span> python</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> mac, linux .ect</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> python</span></span><br></pre></td></tr></table></figure><p><img src="\images\2112\pycharm-venv\where-python.png" alt=""></p><p>가상환경을 참조하지 못하고 있다면 아래 명령어로 (venv) 강제 진입해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> window</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/Scripts/activate</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> mac, linux .ect</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/bin/activate</span></span><br></pre></td></tr></table></figure><h2 id="설정-interpreter에서"><a href="#설정-interpreter에서" class="headerlink" title="설정 interpreter에서"></a>설정 interpreter에서</h2><p>파이참 같은 경우엔 Python Interpreter - install 버튼을 선택해 설치할 패키지와 버전을 선택할 수 있다.</p><p><img src="\images\2112\pycharm-venv\env-setting4.png" alt=""></p><h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h2><p>버전을 일일히 기억하고 있기도 뭐하고 설치할 패키지가 많다면 하나하나 설치하는 것도 일이다.</p><p><a href="https://github.com/pycaret/pycaret/blob/master/requirements.txt">pycaret</a>같은 패키지를 보면 <code>requirements.txt</code>로 관리한다.</p><p>텍스트 파일에 원하는 패키지와 버전을 입력했다면 pip 명령어로 한번에 설치를 진행할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><h1 id="Jupyter-ipynb에서-가상환경-사용"><a href="#Jupyter-ipynb에서-가상환경-사용" class="headerlink" title="Jupyter ipynb에서 가상환경 사용"></a>Jupyter <code>ipynb</code>에서 가상환경 사용</h1><p>가상환경 이름과 표시될 이름을 설정해준다.</p><p>난 각각 <dir 이름>과 &lt;파이썬버전(dir 이름)&gt;으로 설정했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython kernel install --user --name python_ml --display-name &quot;Python3(python_ml)&quot;</span><br></pre></td></tr></table></figure><p>정상적으로 등록됐다면 jupyter 환경으로 접속하면 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jupyter lab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter notebook</span></span><br></pre></td></tr></table></figure><p>주피터 랩을 추천한다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://docs.python.org/ko/3.8/library/venv.html">venv — 가상 환경 생성</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>파이참, 파이썬 인코딩 설정</title>
      <link>https://hangack.github.io/2021/12/08/Codding/Python/Setting/pycharm-encoding/</link>
      <guid>https://hangack.github.io/2021/12/08/Codding/Python/Setting/pycharm-encoding/</guid>
      <pubDate>Wed, 08 Dec 2021 00:04:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;어떤 작업환경을 사용하든 가능하다면 &lt;code&gt;UTF-8&lt;/code&gt; 포멧으로 작업하는걸 추천한다.&lt;/p&gt;
&lt;p&gt;pycharm에서도 인코딩 방식 변경을 지원함.&lt;/p&gt;
&lt;p&gt;file - setting - editor - file encodings</description>
        
      
      
      
      <content:encoded><![CDATA[<p>어떤 작업환경을 사용하든 가능하다면 <code>UTF-8</code> 포멧으로 작업하는걸 추천한다.</p><p>pycharm에서도 인코딩 방식 변경을 지원함.</p><p>file - setting - editor - file encodings에서 Global Encoding이 <code>UTF-8</code>이 아니라면 변경해주자.</p><p>프로젝트 인코딩과 속성 파일 인코딩 방식은 OS가 윈도우라면 새 프로젝트를 열 때 마다 기본값으로 돌아갈 것이다.<br>필요한 설정이 아니라면 크게 신경쓰진 말자.</p><p><img src="\images\2112\pycharm-encoding\utf-8.png" alt="encoding"></p><p>※ 코드 파일 맨 윗단에 아래 주석을 추가하면 자동 UTF-8 인코딩 해준다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>pycharm에서 UTF-8로 변경했고 python 3++를 사용중이기에 추가할 필요는 없지만 작업 파일을 공유하거나 먼 미래에 열어볼 나를 위해 추가한다.</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/08/Codding/Python/Setting/pycharm-encoding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey Graphs</title>
      <link>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/</link>
      <guid>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/</guid>
      <pubDate>Tue, 07 Dec 2021 03:09:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h1&gt;&lt;h1 id=&quot;Dynamic-plot&quot;&gt;&lt;a href=&quot;#Dynamic-plot&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h1><h1 id="Dynamic-plot"><a href="#Dynamic-plot" class="headerlink" title="Dynamic plot"></a>Dynamic plot</h1><p><a href="https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/">Kaggle_Survey01 - Pie</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/1.embed" height="525" width="100%"></iframe><p><a href="https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/">Kaggle_Survey02 - Bar</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/10.embed" height="525" width="100%"></iframe><p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Kaggle_Survey03 - Treemap</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/12.embed" height="525" width="100%"></iframe><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/14.embed" height="525" width="100%"></iframe><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><ul><li><a href="https://www.kaggle.com/kaggle/kaggle-survey-2017">Kaggle_Survey: 2017</a></li><li><a href="https://www.kaggle.com/kaggle/kaggle-survey-2018">Kaggle_Survey: 2018</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2019">Kaggle_Survey: 2019</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2020">Kaggle_Survey: 2020</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2021">Kaggle_Survey: 2021</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle-Survey03-B: replace가 작동 안함 [pandas]</title>
      <link>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/</link>
      <guid>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/</guid>
      <pubDate>Mon, 06 Dec 2021 02:17:40 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Japan-amp-China-IDE’s&quot;&gt;&lt;a href=&quot;#Japan-amp-China-IDE’s&quot; class=&quot;headerlink&quot; title=&quot;Japan &amp;amp; China: IDE’s&quot;&gt;&lt;/a&gt;Japan &amp;amp; China: I</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Japan-amp-China-IDE’s"><a href="#Japan-amp-China-IDE’s" class="headerlink" title="Japan &amp; China: IDE’s"></a>Japan &amp; China: IDE’s</h1><p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Program_Language 과정</a>과 동일</p><p>Treemap을 뽑으려니 “Jupyter (JupyterLab, Jupyter Notebooks, etc)”와 “Visual Studio / Visual Studio Code”가 너무 길어 플롯에서 식별하기 난감하다.</p><p>각각 “Jupyter”와 “VS / VSCode”로 간략화 하려한다.</p><h2 id="1차-시도"><a href="#1차-시도" class="headerlink" title="1차 시도"></a>1차 시도</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc)&#x27;</span>, value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Visual Studio / Visual Studio Code&#x27;</span>, value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>둘 다 변경되지 않았다.</p><h2 id="2차-시도"><a href="#2차-시도" class="headerlink" title="2차 시도"></a>2차 시도</h2><p>실제 string을 확인해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df_IDEs_JnC_21n19.loc[<span class="number">0</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(df_IDEs_JnC_21n19.iloc[<span class="number">29</span>].tolist())</span><br></pre></td></tr></table></figure><pre><code>[&#39;2021&#39;, &#39;Japan&#39;, &#39;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#39;, 200][&#39;2019&#39;, &#39;China&#39;, &#39; Visual Studio / Visual Studio Code &#39;, 200]</code></pre><p>뒤(혹은 앞뒤)로 공백이 들어간 상황임을 알 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#x27;</span>, value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27; Visual Studio / Visual Studio Code &#x27;</span>, value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>성공적으로 변경됐다.</p><h3 id="더-간편하게"><a href="#더-간편하게" class="headerlink" title="더 간편하게"></a>더 간편하게</h3><p>근대 이럴거면 그냥 요소를 뽑아내서 직접 삽입하는게 편할 듯하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[<span class="number">0</span>,<span class="string">&quot;IDE\&#x27;s&quot;</span>], value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[<span class="number">29</span>,<span class="string">&quot;IDE\&#x27;s&quot;</span>], value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>인덱스와 칼럼명을 직접 지정해 뽑아낸 string과 동일한 요소를 모두 변경한다.</p><h2 id="정규식"><a href="#정규식" class="headerlink" title="정규식?"></a>정규식?</h2><p>‘ Visual Studio / Visual Studio Code ‘ 요소는 실제로는 아니지만 정규 표현식으로 해석할 여지가 있다.<br>정 방법을 못찾겠다면 <code>regex</code> 요소를 <code>True</code>로 지정해보는것도 방법이 될 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#x27;</span>, value = <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Visual Studio / Visual Studio Code&#x27;</span>, value = <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>, regex = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="IDE’s-Treemap"><a href="#IDE’s-Treemap" class="headerlink" title="IDE’s Treemap"></a>IDE’s Treemap</h1><p><img src="\images\2112\kaggle-survey03\IDEs.png" alt="IDE&#39;s"></p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html">pandas.DataFrame.replace</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey03-A: value_counts error size 0 [pandas]</title>
      <link>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/</link>
      <guid>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/</guid>
      <pubDate>Sun, 05 Dec 2021 16:11:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/&quot;&gt;Kaggle_Survey03 - Treemap 시각화 [plotly]&lt;/a&gt;에서</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Kaggle_Survey03 - Treemap 시각화 [plotly]</a>에서 넘어왔다.</p><h1 id="오류-식별"><a href="#오류-식별" class="headerlink" title="오류 식별"></a>오류 식별</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Jp_PL = pd.DataFrame()</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Ch_PL = pd.DataFrame()</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Ch[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Ch[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 제거된 나라 칼럼과 value를 각각 삽입 및 통합</span></span><br><span class="line">df21_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df21_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)&lt;ipython-input-5-89d86f0a4d0b&gt; in &lt;module&gt;     11 ## Q7(Program_Language): 칼럼번호 8~20 - others     12 df21_Ch_PL = pd.DataFrame()---&gt; 13 df21_Ch_PL[&#39;Program_Language&#39;] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]]     14 df21_Ch_PL[&#39;counts&#39;] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]]     15 &lt;ipython-input-5-89d86f0a4d0b&gt; in &lt;listcomp&gt;(.0)     11 ## Q7(Program_Language): 칼럼번호 8~20 - others     12 df21_Ch_PL = pd.DataFrame()---&gt; 13 df21_Ch_PL[&#39;Program_Language&#39;] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]]     14 df21_Ch_PL[&#39;counts&#39;] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]]     15 E:\Sadness\anaconda3\lib\site-packages\pandas\core\indexes\base.py in __getitem__(self, key)   4295         if is_scalar(key):   4296             key = com.cast_scalar_indexer(key, warn_float=True)-&gt; 4297             return getitem(key)   4298    4299         if isinstance(key, slice):IndexError: index 0 is out of bounds for axis 0 with size 0</code></pre><h2 id="결측-column-식별-및-제거"><a href="#결측-column-식별-및-제거" class="headerlink" title="결측 column 식별 및 제거"></a>결측 column 식별 및 제거</h2><p><strong>*IndexError</strong>: index 0 is out of bounds for axis 0 with size 0<br>오류가 식별됐다.<br>아마 China, Program_Language의 특정 응답이 없어서 발생한거같다.</p><p>N/A 개수를 식별해보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;df21_Ch\&#x27;s rows_num:&quot;</span>,<span class="built_in">len</span>(df21_Ch))</span><br><span class="line"><span class="built_in">print</span>(df21_Ch.isnull().<span class="built_in">sum</span>().iloc[<span class="number">7</span>:<span class="number">20</span>])</span><br></pre></td></tr></table></figure><pre><code>df21_Ch&#39;s rows_num: 814Q7_Part_1      76Q7_Part_2     729Q7_Part_3     599Q7_Part_4     588Q7_Part_5     546Q7_Part_6     602Q7_Part_7     728Q7_Part_8     810Q7_Part_9     809Q7_Part_10    783Q7_Part_11    645Q7_Part_12    814Q7_OTHER      787dtype: int64</code></pre><p>Q7_Part_12 이 녀석이 문제였다.</p><ul><li>행 개수는 814개고 Part_12의 N/A 개수도 814개이다.</li></ul><p>위 식별 과정의 시행 횟수가 많아진다면 if 문을 사용한 define을 사용해도 되겠지만 일단은 수동으로 제거하자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Jp_PL = pd.DataFrame()</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2021 China: Q7_Part12(None) value == 0이므로 결측값 제거</span></span><br><span class="line">df21_Ch_rmQ07P12 = df21_Ch.drop([<span class="string">&#x27;Q7_Part_12&#x27;</span>], axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others - Q7_Part12(None)</span></span><br><span class="line">df21_Ch_PL = pd.DataFrame()</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 제거된 나라 칼럼과 value를 각각 삽입 및 통합</span></span><br><span class="line">df21_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df21_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey03: Treemap 시각화 [plotly]</title>
      <link>https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/</link>
      <guid>https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/</guid>
      <pubDate>Sun, 05 Dec 2021 13:55:24 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;기본-설정&quot;&gt;&lt;a href=&quot;#기본-설정&quot; class=&quot;headerlink&quot; title=&quot;기본 설정&quot;&gt;&lt;/a&gt;기본 설정&lt;/h1&gt;&lt;h2 id=&quot;module&quot;&gt;&lt;a href=&quot;#module&quot; class=&quot;headerlink&quot; title=&quot;m</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h1><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>treemap으로 많은 요소를 건드리진 않을 예정이니 express 라이브러리를 사용</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br></pre></td></tr></table></figure><h2 id="Import-data"><a href="#Import-data" class="headerlink" title="Import data"></a>Import data</h2><p>2021년 자료 외에도 19년 자료를 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df21 = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line">df19 = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line"><span class="comment">#df21 = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;, dtype=&#x27;unicode&#x27;)</span></span><br><span class="line"><span class="comment">#df19 = pd.read_csv(&quot;../input/kaggle-survey-2019/multiple_choice_responses.csv&quot;, dtype=&#x27;unicode&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="Japan-amp-China-Programming-Languages"><a href="#Japan-amp-China-Programming-Languages" class="headerlink" title="Japan &amp; China: Programming_Languages"></a>Japan &amp; China: Programming_Languages</h1><h2 id="2021-Japan-amp-China-total"><a href="#2021-Japan-amp-China-total" class="headerlink" title="2021 Japan &amp; China total"></a>2021 Japan &amp; China total</h2><p>2021년 Q3(Country) 일본 중국 추출 dataframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df21_ChJp = df21[df21.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br></pre></td></tr></table></figure><h2 id="Split-Country"><a href="#Split-Country" class="headerlink" title="Split Country"></a>Split Country</h2><p>나라별 value_counts를 위해 각 나라로 dataframe 분리</p><h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><p><a href="https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/">value_counts 오류 식별</a> 결측값 제거</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Jp_PL = pd.DataFrame()</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2021 China: Q7_Part12(None) value == 0이므로 결측값 제거</span></span><br><span class="line">df21_Ch_rmQ07P12 = df21_Ch.drop([<span class="string">&#x27;Q7_Part_12&#x27;</span>], axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others - Q7_Part12(None)</span></span><br><span class="line">df21_Ch_PL = pd.DataFrame()</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 제거된 나라 칼럼과 value를 각각 삽입 및 통합</span></span><br><span class="line">df21_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df21_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="2019-Japan-amp-China-total"><a href="#2019-Japan-amp-China-total" class="headerlink" title="2019 Japan &amp; China total"></a>2019 Japan &amp; China total</h2><p>2019년 Q3(Country) 일본 중국 추출 dataframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df19_ChJp = df19[df19.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br></pre></td></tr></table></figure><h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><p>2021년과 동일 과정</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df19_Ch = df19_ChJp[df19_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df19_Jp = df19_ChJp[df19_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q18(Program_Language): 칼럼번호 83~95 - others &amp; other(text)</span></span><br><span class="line">df19_Jp_PL = pd.DataFrame()</span><br><span class="line">df19_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df19_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Jp.columns[<span class="number">82</span>:<span class="number">93</span>]]</span><br><span class="line">df19_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df19_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Jp.columns[<span class="number">82</span>:<span class="number">93</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2019 China Q18_Part11(None) 결측값 제거</span></span><br><span class="line">df19_Ch_rmQ18P11 = df19_Ch.drop([<span class="string">&#x27;Q18_Part_11&#x27;</span>], axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Q18(Program_Language): 칼럼번호 83~95 - others &amp; other(text) - Q18_Part11(None)</span></span><br><span class="line">df19_Ch_PL = pd.DataFrame()</span><br><span class="line">df19_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df19_Ch_rmQ18P11[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Ch_rmQ18P11.columns[<span class="number">82</span>:<span class="number">92</span>]]</span><br><span class="line">df19_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df19_Ch_rmQ18P11[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Ch_rmQ18P11.columns[<span class="number">82</span>:<span class="number">92</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df19_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df19_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df19_PL_JnC = pd.concat([df19_Jp_PL,df19_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Split-year-Country"><a href="#Split-year-Country" class="headerlink" title="Split year{Country}"></a>Split year{Country}</h2><p>다른 csv인 2019자료와 2021자료 통합</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df21_PL_JnC.insert(<span class="number">0</span>, <span class="string">&#x27;year&#x27;</span>,  <span class="string">&#x27;2021&#x27;</span>)</span><br><span class="line">df19_PL_JnC.insert(<span class="number">0</span>, <span class="string">&#x27;year&#x27;</span>,  <span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df_PL_JnC_21n19 = pd.concat([df21_PL_JnC,df19_PL_JnC], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Program_Language의 19년도 21년도 통합 value_counts의 정렬(연도 - 언어 - 나라)</p><p>values는 Program_Language의 value_counts</p><h2 id="Programming-Languages-treemap"><a href="#Programming-Languages-treemap" class="headerlink" title="Programming_Languages [treemap]"></a>Programming_Languages [treemap]</h2><p>이전 언급처럼 treemap으로 많은 요소를 건드리진 않을 예정이니 express 라이브러리를 사용했다.</p><p>path 요소의 순서는 부모자식 순서로 dataframe 칼럼 순서에 제한되지 않는다. -&gt; path 요소 조정으로 순서를 맘대로 바꿀 수 있다.</p><p>color 기준: country</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(<span class="string">&quot;2019n2021&quot;</span>),<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;Program_Language&#x27;</span>,<span class="string">&#x27;Country&#x27;</span>],</span><br><span class="line">                values=<span class="string">&#x27;counts&#x27;</span>, color=<span class="string">&#x27;Country&#x27;</span>,</span><br><span class="line">                  color_discrete_map=&#123;<span class="string">&#x27;(?)&#x27;</span>:<span class="string">&#x27;lightgrey&#x27;</span>, <span class="string">&#x27;China&#x27;</span>:<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;Japan&#x27;</span>:<span class="string">&#x27;darkblue&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fig.data[<span class="number">0</span>].textinfo = <span class="string">&#x27;label+percent parent+value&#x27;</span></span><br><span class="line"></span><br><span class="line">fig.update_layout(margin = <span class="built_in">dict</span>(t=<span class="number">0</span>, l=<span class="number">0</span>, r=<span class="number">0</span>, b=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/12.embed" height="525" width="100%"></iframe><p>color 참조 값을 counts로 넣었을 때는 plotly.express 설정대로 colorbar가 나온다.</p><p>color 기준: counts</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">&#x27;#D2691E&#x27;</span>,<span class="string">&#x27;#E19B50&#x27;</span>,<span class="string">&#x27;#E6C17B&#x27;</span>,<span class="string">&#x27;#F0CB85&#x27;</span>,<span class="string">&#x27;#F5D08A&#x27;</span>,<span class="string">&#x27;#FFEFD5&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(<span class="string">&quot;2019n2021&quot;</span>),<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;Program_Language&#x27;</span>,<span class="string">&#x27;Country&#x27;</span>],</span><br><span class="line">                values=<span class="string">&#x27;counts&#x27;</span>, color=<span class="string">&#x27;counts&#x27;</span>, color_continuous_scale=colors)</span><br><span class="line"></span><br><span class="line">fig.data[<span class="number">0</span>].textinfo = <span class="string">&#x27;label+percent parent+value&#x27;</span></span><br><span class="line"></span><br><span class="line">fig.update_layout(margin = <span class="built_in">dict</span>(t=<span class="number">0</span>, l=<span class="number">0</span>, r=<span class="number">0</span>, b=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/14.embed" height="525" width="100%"></iframe>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>슈라이크(라니우스 타입B) [FTL]</title>
      <link>https://hangack.github.io/2021/12/04/hobby/games/ftl-the-shrike/</link>
      <guid>https://hangack.github.io/2021/12/04/hobby/games/ftl-the-shrike/</guid>
      <pubDate>Sat, 04 Dec 2021 10:33:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://steamuserimages-a.akamaihd.net/ugc/1823391714093260826/7AB85E684CF6A3C8200885426B94E724AC747F4D/?imw=5000&amp;amp;imh=5000&amp;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://steamuserimages-a.akamaihd.net/ugc/1823391714093260826/7AB85E684CF6A3C8200885426B94E724AC747F4D/?imw=5000&amp;imh=5000&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=false" alt=""></p><p>우리는 우연으로 승리할 수 있는 난이도를 “어려움”이라 부르기로 약속했어요</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/%EC%9D%B8%EB%94%94%EA%B2%8C%EC%9E%84/">인디게임</category>
      
      
      <comments>https://hangack.github.io/2021/12/04/hobby/games/ftl-the-shrike/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Alone [DJMAX Respect V]</title>
      <link>https://hangack.github.io/2021/12/04/hobby/games/djmax-alone/</link>
      <guid>https://hangack.github.io/2021/12/04/hobby/games/djmax-alone/</guid>
      <pubDate>Sat, 04 Dec 2021 04:21:50 GMT</pubDate>
      
        
        
      <description>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fo4-UDwaPBM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;acceler</description>
        
      
      
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/fo4-UDwaPBM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>쉰곡 서윗하네</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/DJMAX-Respect-V/">DJMAX Respect V</category>
      
      
      <comments>https://hangack.github.io/2021/12/04/hobby/games/djmax-alone/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ㅇㄱㅇㅅㅎㄷㅂㅎㅇ [ALTF4]</title>
      <link>https://hangack.github.io/2021/12/04/hobby/games/altf4/</link>
      <guid>https://hangack.github.io/2021/12/04/hobby/games/altf4/</guid>
      <pubDate>Fri, 03 Dec 2021 17:33:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://steamuserimages-a.akamaihd.net/ugc/1823391714098113676/B619D57ACE99AC554731A7522FF4BA3AA9C6DAF8/?imw=5000&amp;amp;imh=5000&amp;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://steamuserimages-a.akamaihd.net/ugc/1823391714098113676/B619D57ACE99AC554731A7522FF4BA3AA9C6DAF8/?imw=5000&amp;imh=5000&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=false" alt=""></p><p>메모리 누수 등으로 프레임 드랍 일어나면 유저, 닭 투척, 트레일 등 엔티티 속도도 같이 느려져서 자체 하드모드 쌉가능.</p><p>리부트하면 설치물도 전부 사라짐. 메모리에 할당됐던걸까?</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/%EC%9D%B8%EB%94%94%EA%B2%8C%EC%9E%84/">인디게임</category>
      
      
      <comments>https://hangack.github.io/2021/12/04/hobby/games/altf4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey02: Bar 시각화 [plotly]</title>
      <link>https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/</link>
      <guid>https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/</guid>
      <pubDate>Thu, 02 Dec 2021 15:19:33 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;이전-포스팅들과-동일-과정&quot;&gt;&lt;a href=&quot;#이전-포스팅들과-동일-과정&quot; class=&quot;headerlink&quot; title=&quot;이전 포스팅들과 동일 과정&quot;&gt;&lt;/a&gt;이전 포스팅들과 동일 과정&lt;/h1&gt;&lt;figure class=&quot;highlight </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="이전-포스팅들과-동일-과정"><a href="#이전-포스팅들과-동일-과정" class="headerlink" title="이전 포스팅들과 동일 과정"></a>이전 포스팅들과 동일 과정</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go </span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;#FF0000&#x27;</span>,<span class="string">&#x27;#FFBB00&#x27;</span>,<span class="string">&#x27;#ffff00&#x27;</span>,<span class="string">&#x27;#00FF00&#x27;</span>,<span class="string">&#x27;#0000FF&#x27;</span>,<span class="string">&#x27;#9C009C&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line"><span class="comment">#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_ChJp = df[df.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br><span class="line"></span><br><span class="line">df_Ch = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df_Jp = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indiQ_value_counts</span>(<span class="params">dataframe, indi_Qnum</span>):</span></span><br><span class="line">    df = dataframe[indi_Qnum][<span class="number">1</span>:].value_counts()</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Jp_age = indiQ_value_counts(df_Jp, <span class="string">&#x27;Q1&#x27;</span>)</span><br><span class="line">df_Ch_age = indiQ_value_counts(df_Ch, <span class="string">&#x27;Q1&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Age-plotly-Bar"><a href="#Age-plotly-Bar" class="headerlink" title="Age [plotly: Bar]"></a>Age [plotly: Bar]</h1><p>01에 이어 이번에도 두 나라의 값을 비교할 예정이니 아예 처음부터 데이터를 합쳐서 표현한 그래프를 뽑아내겠다.</p><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Bar.html">plotly.graph_objects.Bar</a></li><li><a href="https://plotly.com/python/bar-charts/">Bar Charts in Python</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Bar_C = go.Bar(name=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">               x=df_Ch_age.index,</span><br><span class="line">               y=df_Ch_age.values</span><br><span class="line">              )</span><br><span class="line">Bar_J = go.Bar(name=<span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">               x=df_Jp_age.index,</span><br><span class="line">               y=df_Jp_age.values</span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = go.Figure(data=[Bar_C,</span><br><span class="line">                      Bar_J])</span><br><span class="line"></span><br><span class="line">fig.update_layout(title=<span class="string">&#x27;Age: Japan &amp; China&#x27;</span>,</span><br><span class="line">                  xaxis_title=<span class="string">&quot;Age&quot;</span>, yaxis_title=<span class="string">&#x27;Counts&#x27;</span></span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey02\bar1.png" alt="Bar1"></p><p>bar chart에서 stack 형식을 사용하거나 group과 stack을 동시에 사용하지 않는 이상 하나의 plot에 여러 bar data를 넣으면 default는 group 형식으로 뽑힌다.</p><h2 id="index-정렬"><a href="#index-정렬" class="headerlink" title="index 정렬"></a>index 정렬</h2><p>나이 순으로 출력하고 싶었지만, <code>value_counts</code> 할 때 원본 dataframe의 요소 순서로 index가 들어가버렸다.</p><p>그래서 <code>value_counts</code>된 dataframe을 <code>sort_index</code>를 사용해 오름차순 정렬한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Ch_sortAge = df_Ch_age.sort_index()</span><br><span class="line">df_Jp_sortAge = df_Jp_age.sort_index()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey02\bar2.png" alt="Bar2"></p><h2 id="60-69-구간에-더미값-추가"><a href="#60-69-구간에-더미값-추가" class="headerlink" title="60-69 구간에 더미값 추가"></a>60-69 구간에 더미값 추가</h2><p>정렬은 문제없어 보였지만 70+와 60-69 순서가 이상하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_Ch_sortAge</span><br></pre></td></tr></table></figure><pre><code>18-21    20622-24    27425-29    15930-34    10935-39     3940-44     1445-49      850-54      155-59      270+        1Name: Q1, dtype: int64</code></pre><p>아무래도 China에 60-69 구간에 해당하는 value가 없어서 index 추가가 안된거같다.</p><p>index가 전부 있는 Japan을 앞 순서로 바꿔도 되겠지만, 그냥 China <code>60-69</code> index를 추가하고 임의로 값 <code>0</code>를 넣겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Ch_sortAge.loc[<span class="string">&#x27;60-69&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df_Ch_sortAge = df_Ch_sortAge.sort_index()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey02\bar3.png" alt="Bar3"></p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Bar.html">plotly.graph_objects.Bar</a></li><li><a href="https://plotly.com/python/bar-charts/">Bar Charts in Python</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey01: Pie 시각화 [plotly]</title>
      <link>https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/</link>
      <guid>https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/</guid>
      <pubDate>Thu, 02 Dec 2021 02:17:39 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;dataset-구조-확인하기&quot;&gt;&lt;a href=&quot;#dataset-구조-확인하기&quot; class=&quot;headerlink&quot; title=&quot;dataset 구조 확인하기&quot;&gt;&lt;/a&gt;dataset 구조 확인하기&lt;/h1&gt;&lt;figure class=&quot;highli</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="dataset-구조-확인하기"><a href="#dataset-구조-확인하기" class="headerlink" title="dataset 구조 확인하기"></a>dataset 구조 확인하기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go </span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;#FF0000&#x27;</span>,<span class="string">&#x27;#FFBB00&#x27;</span>,<span class="string">&#x27;#ffff00&#x27;</span>,<span class="string">&#x27;#00FF00&#x27;</span>,<span class="string">&#x27;#0000FF&#x27;</span>,<span class="string">&#x27;#9C009C&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line"><span class="comment">#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;)</span></span><br></pre></td></tr></table></figure><p>Columns 구조는 <a href="https://hangack.github.io/2021/11/11/Codding/Python/kaggle_survey/Data-Transformation-input-num/">문자열에서 특정 값을 뽑아내고 input을 받는 함수</a> 포스트에서 확인했으므로 넘어간다.</p><h1 id="비교-대상-선정하기"><a href="#비교-대상-선정하기" class="headerlink" title="비교 대상 선정하기"></a>비교 대상 선정하기</h1><p>2021 kaggle_survey 분석을 계속 진행한다.</p><p>베이스는 2021년 기준 survey 응답 count 수가 비슷한 일본과 중국을 선정했다.<br>한국 넣으려다 응답수가 낮아 방향을 바꿨다</p><p><code>kaggle_survey_2021_responses</code>의 모든 row를 사용할 필요 없으므로 Q3(country) 응답에 Jp(Japan), Ch(China)인 요소만 추출한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_ChJp = df[df.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br><span class="line"></span><br><span class="line">df_Ch = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df_Jp = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br></pre></td></tr></table></figure><h1 id="Gender-plotly-Pie"><a href="#Gender-plotly-Pie" class="headerlink" title="Gender [plotly: Pie]"></a>Gender [plotly: Pie]</h1><p>일단 간단히 비교할 수 있는 Gender(Q2)와 Age(Q1) 중 Q2를 Pie 그래프로 시각화할 예정이다.</p><p>간단한 Pie 그래프를 사용할 예정이고, 간단한 그래프인 만큼 pie 요소 option을 만질 여지가 많다.<br>따라서 <code>express</code>가 아닌 <code>graph_objects</code> 모듈로 작업했다.</p><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Pie.html">plotly.graph_objects.Pie</a></li><li><a href="https://plotly.com/python/pie-charts/">Pie Charts in Python</a></li></ul><p>plotly.graph_objects.Pie를 사용해서 만든 그래프를 Figure 형식으로 지정하고 fig_j 객체에 저장한다.</p><p>아래 코드는 필수 요소인 <code>lables</code>와 <code>values</code>만 넣은 결과다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig_j = go.Figure(data=[go.Pie(labels=df_Jp[<span class="string">&#x27;Q2&#x27;</span>][<span class="number">1</span>:].value_counts().index, </span><br><span class="line">                               values=df_Jp[<span class="string">&#x27;Q2&#x27;</span>][<span class="number">1</span>:].value_counts().values</span><br><span class="line">                              )</span><br><span class="line">                       ]</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line">fig_j.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey01\pie1.png" alt="Pie1"></p><h2 id="대응하는-value-counts-함수-만들기"><a href="#대응하는-value-counts-함수-만들기" class="headerlink" title="대응하는 value_counts 함수 만들기"></a>대응하는 value_counts 함수 만들기</h2><p>앞으로 많은 그래프를 그려낼거고 <code>df_Jp[&#39;Q2&#39;][1:].value_counts()</code> 형식이 반복된다.</p><p><code>df_Jp[&#39;Q2&#39;][1:].value_counts()</code>을 객체로 만들어서 넣어도 되겠지만, 이번 작업에서 사용할 df은 <code>df_Jp</code>&amp;<code>df_Ch</code> 2개로 dataframe 객체의 변동이 있고, 칼럼명도 Q1,Q2로 변동이 있다.<br>위 조건에 부합하는 간단한 함수 하나 만들겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indiQ_value_counts</span>(<span class="params">dataframe, indi_Qnum</span>):</span></span><br><span class="line">    df = dataframe[indi_Qnum][<span class="number">1</span>:].value_counts()</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Jp_gen = indiQ_value_counts(df_Jp, <span class="string">&#x27;Q2&#x27;</span>)</span><br><span class="line">df_Ch_gen = indiQ_value_counts(df_Ch, <span class="string">&#x27;Q2&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="subplots-그래프-figure-합치기"><a href="#subplots-그래프-figure-합치기" class="headerlink" title="subplots: 그래프 figure 합치기"></a>subplots: 그래프 figure 합치기</h2><p>japan과 china 함수를 각각의 figure로 보기엔 불편하다.<br>subplost를 이용해 하나의 fig로 합칠 예정이다.</p><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.subplots.make_subplots.html">plotly.subplots.make_subplots</a></li><li><a href="https://plotly.com/python/subplots/">Subplots Types</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly.subplots <span class="keyword">import</span> make_subplots</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pie_J = go.Pie(labels=df_Jp_gen.index, </span><br><span class="line">               values=df_Jp_gen.values</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">Pie_C = go.Pie(labels=df_Ch_gen.index, </span><br><span class="line">               values=df_Ch_gen.values</span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig = make_subplots(rows=<span class="number">1</span>, cols=<span class="number">2</span>,specs=[[&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;,&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;]])</span><br><span class="line"></span><br><span class="line">fig.add_trace(Pie_J,row=<span class="number">1</span>,col=<span class="number">1</span>)</span><br><span class="line">fig.add_trace(Pie_C,row=<span class="number">1</span>,col=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey01\pie2.png" alt="Pie1"></p><h2 id="text-color-커스텀"><a href="#text-color-커스텀" class="headerlink" title="text, color 커스텀"></a>text, color 커스텀</h2><p>커스텀 색상이나 타이틀 등 텍스트를 넣어 간단한 시각적 커스텀을 입혀보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Pie_J = go.Pie(labels=df_Jp_gen.index, </span><br><span class="line">               values=df_Jp_gen.values,</span><br><span class="line">               title=<span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span></span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">Pie_C = go.Pie(labels=df_Ch_gen.index, </span><br><span class="line">               values=df_Ch_gen.values,</span><br><span class="line">               title=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = make_subplots(rows=<span class="number">1</span>, cols=<span class="number">2</span>,specs=[[&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;,&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;]])</span><br><span class="line"></span><br><span class="line">fig.add_trace(Pie_J,row=<span class="number">1</span>,col=<span class="number">1</span>)</span><br><span class="line">fig.add_trace(Pie_C,row=<span class="number">1</span>,col=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig.update_layout(title_text=<span class="string">&#x27;Gender&#x27;</span>)</span><br><span class="line">fig.update_traces(marker=<span class="built_in">dict</span>(colors=colors[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey01\pie3.png" alt="Pie1"></p><h2 id="시각-요소-커스텀"><a href="#시각-요소-커스텀" class="headerlink" title="시각 요소 커스텀"></a>시각 요소 커스텀</h2><p>Trace의 title이 Pie 외부에 위치하는게 맘에들지 않는 부분을 수정하기 위해 시각 효과에서 legend를 제거하는 등 각종 요소 값을 변경한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Pie_J = go.Pie(labels=df_Jp_gen.index, </span><br><span class="line">               values=df_Jp_gen.values,</span><br><span class="line"><span class="comment">#               pull=[0,0,0.2,0.2,0.2],    ## 중앙에서 n% 떨어진 위치 할당</span></span><br><span class="line">               title=<span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span>,</span><br><span class="line">               hole=<span class="number">0.3</span></span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">Pie_C = go.Pie(labels=df_Ch_gen.index, </span><br><span class="line">               values=df_Ch_gen.values,</span><br><span class="line"><span class="comment">#               pull=[0,0,0.2,0.2,0.2],</span></span><br><span class="line">               title=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span>,</span><br><span class="line">               hole=<span class="number">0.3</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig = make_subplots(rows=<span class="number">1</span>, cols=<span class="number">2</span>,specs=[[&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;,&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;]])</span><br><span class="line"></span><br><span class="line">fig.add_trace(Pie_J,row=<span class="number">1</span>,col=<span class="number">1</span>)</span><br><span class="line">fig.add_trace(Pie_C,row=<span class="number">1</span>,col=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig.update_layout(title_text=<span class="string">&#x27;Gender&#x27;</span>,</span><br><span class="line"><span class="comment">#                  showlegend=False,    ## ledend(lable 목록) 시각적으로 제거</span></span><br><span class="line">                  margin=<span class="built_in">dict</span>(t=<span class="number">0</span>, b=<span class="number">0</span>, l=<span class="number">0</span>, r=<span class="number">0</span>)</span><br><span class="line">                 )</span><br><span class="line">fig.update_traces(marker=<span class="built_in">dict</span>(colors=colors[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/1.embed" height="525" width="100%"></iframe><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Pie.html">plotly.graph_objects.Pie</a></li><li><a href="https://plotly.com/python/pie-charts/">Pie Charts in Python</a></li><li><a href="https://plotly.com/python-api-reference/generated/plotly.subplots.make_subplots.html">plotly.subplots.make_subplots</a></li><li><a href="https://plotly.com/python/subplots/">Subplots Types</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rstudio 처음 세팅하기</title>
      <link>https://hangack.github.io/2021/12/01/Codding/R/r-setting/</link>
      <guid>https://hangack.github.io/2021/12/01/Codding/R/r-setting/</guid>
      <pubDate>Tue, 30 Nov 2021 21:35:30 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Rstudio-기본-설치-프로그램&quot;&gt;&lt;a href=&quot;#Rstudio-기본-설치-프로그램&quot; class=&quot;headerlink&quot; title=&quot;Rstudio 기본 설치 프로그램&quot;&gt;&lt;/a&gt;Rstudio 기본 설치 프로그램&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Rstudio-기본-설치-프로그램"><a href="#Rstudio-기본-설치-프로그램" class="headerlink" title="Rstudio 기본 설치 프로그램"></a>Rstudio 기본 설치 프로그램</h1><ul><li><p>Rstudio는 <a href="https://cran.r-project.org/bin/windows/base/">R 언어</a>를 사용하는 프로그램이니 R 언어팩을 설치한다.</p></li><li><p>사용할 작업 환경인 <a href="https://www.rstudio.com/products/rstudio/download/#download">Rstudio</a>도 받아주고,</p></li><li><p><a href="https://cran.r-project.org/bin/windows/Rtools/">Rtools</a>를 설치하면 R의 기본적인 Package 세트와 C/C++과 같은 의존성 세팅을 불러올 수 있다.</p></li></ul><h2 id="Rstudio-기본-세팅"><a href="#Rstudio-기본-세팅" class="headerlink" title="Rstudio 기본 세팅"></a>Rstudio 기본 세팅</h2><p>나는 memo 앱을 사용할 때도 자동 줄바꿈을 사용하는 편이기에 <code>Soft-wrap</code>를 체크했다.</p><p><img src="\images\2112\R-download\soft-warp.png" alt="Soft-wrap R source files"></p><p>윈도우 환경이라면 언어 인코딩 방식을 <code>UTF-8</code>로 변경하는걸 추천한다.</p><p><img src="\images\2112\R-download\encoding.png" alt="default text encoding"></p><h2 id="R-Script"><a href="#R-Script" class="headerlink" title="R Script"></a>R Script</h2><p>R studio 상단의 files 탭에서 project 경로를 생성하거나 py 혹은 ipynb 처럼 R Script, Rmd 파일창을 열 수 있다.</p><p><img src="\images\2112\R-download\files.png" alt="new"></p><h1 id="Rtools-path-설정"><a href="#Rtools-path-설정" class="headerlink" title="Rtools path 설정"></a>Rtools path 설정</h1><p>R Script 등을 열었다면 Rtools의 경로를 지정해준다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(<span class="string">&#x27;PATH=&quot;$&#123;RTOOLS40_HOME&#125;\\usr\\bin;$&#123;PATH&#125;&quot;&#x27;</span>, file = <span class="string">&quot;~/.Renviron&quot;</span>, append = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p>R은 PL/SQL처럼 동작한다. 원하는 명령어를 작성하고 해당 열에서 <code>Ctrl+Enter</code> 해주면 된다.</p><p>이후 Path값을 다시 불러오기 위해 R을 재시작한다. 나의 경우 R restart로 해결안되서 Rstudio 자체를 재실행했다.<br>그냥 깔끔하게 Rstudio를 껏다키는걸 추천한다.</p><h1 id="패키지-불러오기"><a href="#패키지-불러오기" class="headerlink" title="패키지 불러오기"></a>패키지 불러오기</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;Package_Name&quot;</span>)</span><br><span class="line"><span class="comment">#혹은</span></span><br><span class="line">install.packages(<span class="string">&quot;Package_Name&quot;</span>, dependencies = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p>패키지 함수를 사용하려면 다른 프로그램 언어들처럼 file에서 package를 import 해줘야한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library(Package_Name)</span><br></pre></td></tr></table></figure><p>만약 콘솔에 사용하려는 패키지가 없다고 나온다면 <code>install.packages(&quot;패키지명&quot;)</code>를 해주자.</p><p>특수한 경우에 대한 오류는 <a href="https://cran.r-project.org/web/packages/available_packages_by_date.html">R 패키지 리스트</a>에서 <a href="https://cran.r-project.org/web/packages/stringi/index.html">stringi</a>처럼 시스템 기본 요구사항이 들어있는 경우다.</p><p><img src="\images\2112\R-download\stringi.png" alt="stringi"></p><p>일반적인 경우는 Rtools 설치에서 해결됐을테니 크게 신경쓸 필욘 없다.</p><h1 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h1><ul><li><a href="https://cran.r-project.org/bin/windows/base/">R language</a></li><li><a href="https://cran.r-project.org/web/packages/available_packages_by_date.html">R 패키지 리스트</a></li><li><a href="https://www.rstudio.com/products/rstudio/download/#download">Rstudio</a></li><li><a href="https://cran.r-project.org/bin/windows/Rtools/">Rtools</a></li></ul><h2 id="튜토리얼"><a href="#튜토리얼" class="headerlink" title="튜토리얼"></a>튜토리얼</h2><ul><li><a href="https://r4ds.had.co.nz/">R for data science</a>에서 기본적인 시각화(ch.03) 및 기초 문법(ch.05)을 확인할 수 있다.</li><li><a href="https://exts.ggplot2.tidyverse.org/gallery/">ggplot2 extensions - gallery</a>에서는 고-급 그래프 예제를 가져올 수 있다.</li><li><a href="https://www.rstudio.com/resources/cheatsheets/">R cheatsheets</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/R/">R</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/R/">R</category>
      
      <category domain="https://hangack.github.io/tags/Rstudio/">Rstudio</category>
      
      <category domain="https://hangack.github.io/tags/Rtools/">Rtools</category>
      
      
      <comments>https://hangack.github.io/2021/12/01/Codding/R/r-setting/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

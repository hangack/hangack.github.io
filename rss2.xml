<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hanga(c)k</title>
    <link>https://hangack.github.io/</link>
    
    <atom:link href="https://hangack.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 10 Dec 2021 01:30:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>파이참 가상환경 생성</title>
      <link>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/</link>
      <guid>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/</guid>
      <pubDate>Thu, 09 Dec 2021 05:13:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;가상환경&quot;&gt;&lt;a href=&quot;#가상환경&quot; class=&quot;headerlink&quot; title=&quot;가상환경&quot;&gt;&lt;/a&gt;가상환경&lt;/h2&gt;&lt;p&gt;라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.&lt;br&gt;모든 패키지에 대응할 수는 없으니</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="가상환경"><a href="#가상환경" class="headerlink" title="가상환경"></a>가상환경</h2><p>라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.<br>모든 패키지에 대응할 수는 없으니 파이썬이나 해당 패키지를 재설치 혹은 Downgrade를 진행해야 할 것이다.<br>위 문제를 해결할 수 있는 방법이 여러 파이썬을 생성해 각각 환경에 맞는 패키지를 설치해 따로 불러오는 방법으로 <strong>가상환경</strong>이라 한다.</p><h3 id="가상환경-생성"><a href="#가상환경-생성" class="headerlink" title="가상환경 생성"></a>가상환경 생성</h3><h4 id="설정에서-생성하기"><a href="#설정에서-생성하기" class="headerlink" title="설정에서 생성하기"></a>설정에서 생성하기</h4><p>프로젝트를 생성하고 코드 작업을 진행하다 버전 에러가 났을 때,</p><p>Files - Settings - Project: <dir> - Python Interpreter 에서 <code>Add...</code> 를 눌러 추가할 수 있다.</p><p><img src="\images\2112\pycharm-venv\env-setting1.png" alt=""></p><p>가장 기본적인 Venv를 설치할 수 있다. anaconda 설치가 됐다면 conda 환경도 추가할 수 있지만, 기본적인 파이썬 Venv 설치를 진행할 예정.<br>파이썬 exe 경로와 가상환경 dir 경로를 잘 확인해주자</p><p><img src="\images\2112\pycharm-venv\env-setting2.png" alt=""></p><h4 id="프로젝트와-같이-생성하기"><a href="#프로젝트와-같이-생성하기" class="headerlink" title="프로젝트와 같이 생성하기"></a>프로젝트와 같이 생성하기</h4><p>보통의 경우는 파이참에서 프로젝트를 생성하며 가상환경 설치를 진행할 것이다.</p><p><img src="\images\2112\pycharm-venv\env-setting2-2.png" alt=""></p><h4 id="터미널에서-생성하기"><a href="#터미널에서-생성하기" class="headerlink" title="터미널에서 생성하기"></a>터미널에서 생성하기</h4><p>파이참같은 개발환경을 사용하지 못하고 리눅스 등 환경의 터미널에서 생성해야할 경우는 <a href="https://docs.python.org/ko/3.8/library/venv.html">venv — 가상 환경 생성</a>를 참조한다.</p><h2 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h2><p>파이썬 가상환경을 생성했다면 사용할 패키지를 설치하면 된다.</p><p>정상적으로 설치했다면 문제 없겠지만 어느 파이썬을 참조하고 있는지 터미널에서 확인해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> window</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">where</span> python</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> mac, linux .ect</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> python</span></span><br></pre></td></tr></table></figure><p><img src="\images\2112\pycharm-venv\where-python.png" alt=""></p><p>가상환경을 참조하지 못하고 있다면 아래 명령어로 (venv) 강제 진입해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> window</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/Scripts/activate</span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> mac, linux .ect</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/bin/activate</span></span><br></pre></td></tr></table></figure><h3 id="설정-interpreter에서"><a href="#설정-interpreter에서" class="headerlink" title="설정 interpreter에서"></a>설정 interpreter에서</h3><p>파이참 같은 경우엔 Python Interpreter - install 버튼을 선택해 설치할 패키지와 버전을 선택할 수 있다.</p><p><img src="\images\2112\pycharm-venv\env-setting4.png" alt=""></p><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><p>버전을 일일히 기억하고 있기도 뭐하고 설치할 패키지가 많다면 하나하나 설치하는 것도 일이다.</p><p><a href="https://github.com/pycaret/pycaret/blob/master/requirements.txt">pycaret</a>같은 패키지를 보면 <code>requirements.txt</code>로 관리한다.</p><p>텍스트 파일에 원하는 패키지와 버전을 입력했다면 pip 명령어로 한번에 설치를 진행할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure><h2 id="Jupyter-ipynb에서-가상환경-사용"><a href="#Jupyter-ipynb에서-가상환경-사용" class="headerlink" title="Jupyter ipynb에서 가상환경 사용"></a>Jupyter <code>ipynb</code>에서 가상환경 사용</h2><p>가상환경 이름과 표시될 이름을 설정해준다.</p><p>난 각각 <dir 이름>과 &lt;파이썬버전(dir 이름)&gt;으로 설정했다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipython kernel install --user --name python_ml --display-name &quot;Python3(python_ml)&quot;</span><br></pre></td></tr></table></figure><p>정상적으로 등록됐다면 jupyter 환경으로 접속하면 된다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jupyter lab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> jupyter notebook</span></span><br></pre></td></tr></table></figure><p>주피터 랩을 추천한다.</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://docs.python.org/ko/3.8/library/venv.html">venv — 가상 환경 생성</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/">파이참</category>
      
      
      <comments>https://hangack.github.io/2021/12/09/Codding/Python/Setting/pycharm-venv/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey Graphs</title>
      <link>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/</link>
      <guid>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/</guid>
      <pubDate>Tue, 07 Dec 2021 03:09:27 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;&lt;h2 id=&quot;Dynamic-plot&quot;&gt;&lt;a href=&quot;#Dynamic-plot&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h2><h2 id="Dynamic-plot"><a href="#Dynamic-plot" class="headerlink" title="Dynamic plot"></a>Dynamic plot</h2><p><a href="https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/">Kaggle_Survey01 - Pie</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/1.embed" height="525" width="100%"></iframe><p><a href="https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/">Kaggle_Survey02 - Bar</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/10.embed" height="525" width="100%"></iframe><p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Kaggle_Survey03 - Treemap</a></p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/12.embed" height="525" width="100%"></iframe><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/14.embed" height="525" width="100%"></iframe><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><ul><li><a href="https://www.kaggle.com/kaggle/kaggle-survey-2017">Kaggle_Survey: 2017</a></li><li><a href="https://www.kaggle.com/kaggle/kaggle-survey-2018">Kaggle_Survey: 2018</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2019">Kaggle_Survey: 2019</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2020">Kaggle_Survey: 2020</a></li><li><a href="https://www.kaggle.com/c/kaggle-survey-2021">Kaggle_Survey: 2021</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      
      <comments>https://hangack.github.io/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle-Survey03-B: replace가 작동 안함 [pandas]</title>
      <link>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/</link>
      <guid>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/</guid>
      <pubDate>Mon, 06 Dec 2021 02:17:40 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Japan-amp-China-IDE’s&quot;&gt;&lt;a href=&quot;#Japan-amp-China-IDE’s&quot; class=&quot;headerlink&quot; title=&quot;Japan &amp;amp; China: IDE’s&quot;&gt;&lt;/a&gt;Japan &amp;amp; China: I</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Japan-amp-China-IDE’s"><a href="#Japan-amp-China-IDE’s" class="headerlink" title="Japan &amp; China: IDE’s"></a>Japan &amp; China: IDE’s</h2><p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Program_Language 과정</a>과 동일</p><p>Treemap을 뽑으려니 “Jupyter (JupyterLab, Jupyter Notebooks, etc)”와 “Visual Studio / Visual Studio Code”가 너무 길어 플롯에서 식별하기 난감하다.</p><p>각각 “Jupyter”와 “VS / VSCode”로 간략화 하려한다.</p><h3 id="1차-시도"><a href="#1차-시도" class="headerlink" title="1차 시도"></a>1차 시도</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc)&#x27;</span>, value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Visual Studio / Visual Studio Code&#x27;</span>, value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>둘 다 변경되지 않았다.</p><h3 id="2차-시도"><a href="#2차-시도" class="headerlink" title="2차 시도"></a>2차 시도</h3><p>실제 string을 확인해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df_IDEs_JnC_21n19.loc[<span class="number">0</span>].tolist())</span><br><span class="line"><span class="built_in">print</span>(df_IDEs_JnC_21n19.iloc[<span class="number">29</span>].tolist())</span><br></pre></td></tr></table></figure><pre><code>[&#39;2021&#39;, &#39;Japan&#39;, &#39;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#39;, 200][&#39;2019&#39;, &#39;China&#39;, &#39; Visual Studio / Visual Studio Code &#39;, 200]</code></pre><p>뒤(혹은 앞뒤)로 공백이 들어간 상황임을 알 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#x27;</span>, value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27; Visual Studio / Visual Studio Code &#x27;</span>, value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>성공적으로 변경됐다.</p><h4 id="더-간편하게"><a href="#더-간편하게" class="headerlink" title="더 간편하게"></a>더 간편하게</h4><p>근대 이럴거면 그냥 요소를 뽑아내서 직접 삽입하는게 편할 듯하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[<span class="number">0</span>,<span class="string">&quot;IDE\&#x27;s&quot;</span>], value =  <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[<span class="number">29</span>,<span class="string">&quot;IDE\&#x27;s&quot;</span>], value =  <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>인덱스와 칼럼명을 직접 지정해 뽑아낸 string과 동일한 요소를 모두 변경한다.</p><h3 id="정규식"><a href="#정규식" class="headerlink" title="정규식?"></a>정규식?</h3><p>‘ Visual Studio / Visual Studio Code ‘ 요소는 실제로는 아니지만 정규 표현식으로 해석할 여지가 있다.<br>정 방법을 못찾겠다면 <code>regex</code> 요소를 <code>True</code>로 지정해보는것도 방법이 될 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Jupyter (JupyterLab, Jupyter Notebooks, etc) &#x27;</span>, value = <span class="string">&#x27;Jupyter&#x27;</span>, inplace = <span class="literal">True</span>)</span><br><span class="line">df_IDEs_JnC_21n19.replace(to_replace = <span class="string">&#x27;Visual Studio / Visual Studio Code&#x27;</span>, value = <span class="string">&#x27;VS / VSCode&#x27;</span>, inplace = <span class="literal">True</span>, regex = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="IDE’s-Treemap"><a href="#IDE’s-Treemap" class="headerlink" title="IDE’s Treemap"></a>IDE’s Treemap</h2><p><img src="\images\2112\kaggle-survey03\IDEs.png" alt="IDE&#39;s"></p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html">pandas.DataFrame.replace</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey03-A: value_counts error size 0 [pandas]</title>
      <link>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/</link>
      <guid>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/</guid>
      <pubDate>Sun, 05 Dec 2021 16:11:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/&quot;&gt;Kaggle_Survey03 - Treemap 시각화 [plotly]&lt;/a&gt;에서</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/">Kaggle_Survey03 - Treemap 시각화 [plotly]</a>에서 넘어왔다.</p><h2 id="오류-식별"><a href="#오류-식별" class="headerlink" title="오류 식별"></a>오류 식별</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Jp_PL = pd.DataFrame()</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Ch_PL = pd.DataFrame()</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Ch[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Ch[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch.columns[<span class="number">7</span>:<span class="number">20</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 제거된 나라 칼럼과 value를 각각 삽입 및 통합</span></span><br><span class="line">df21_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df21_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------IndexError                                Traceback (most recent call last)&lt;ipython-input-5-89d86f0a4d0b&gt; in &lt;module&gt;     11 ## Q7(Program_Language): 칼럼번호 8~20 - others     12 df21_Ch_PL = pd.DataFrame()---&gt; 13 df21_Ch_PL[&#39;Program_Language&#39;] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]]     14 df21_Ch_PL[&#39;counts&#39;] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]]     15 &lt;ipython-input-5-89d86f0a4d0b&gt; in &lt;listcomp&gt;(.0)     11 ## Q7(Program_Language): 칼럼번호 8~20 - others     12 df21_Ch_PL = pd.DataFrame()---&gt; 13 df21_Ch_PL[&#39;Program_Language&#39;] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]]     14 df21_Ch_PL[&#39;counts&#39;] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]]     15 E:\Sadness\anaconda3\lib\site-packages\pandas\core\indexes\base.py in __getitem__(self, key)   4295         if is_scalar(key):   4296             key = com.cast_scalar_indexer(key, warn_float=True)-&gt; 4297             return getitem(key)   4298    4299         if isinstance(key, slice):IndexError: index 0 is out of bounds for axis 0 with size 0</code></pre><h3 id="결측-column-식별-및-제거"><a href="#결측-column-식별-및-제거" class="headerlink" title="결측 column 식별 및 제거"></a>결측 column 식별 및 제거</h3><p><strong>*IndexError</strong>: index 0 is out of bounds for axis 0 with size 0<br>오류가 식별됐다.<br>아마 China, Program_Language의 특정 응답이 없어서 발생한거같다.</p><p>N/A 개수를 식별해보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;df21_Ch\&#x27;s rows_num:&quot;</span>,<span class="built_in">len</span>(df21_Ch))</span><br><span class="line"><span class="built_in">print</span>(df21_Ch.isnull().<span class="built_in">sum</span>().iloc[<span class="number">7</span>:<span class="number">20</span>])</span><br></pre></td></tr></table></figure><pre><code>df21_Ch&#39;s rows_num: 814Q7_Part_1      76Q7_Part_2     729Q7_Part_3     599Q7_Part_4     588Q7_Part_5     546Q7_Part_6     602Q7_Part_7     728Q7_Part_8     810Q7_Part_9     809Q7_Part_10    783Q7_Part_11    645Q7_Part_12    814Q7_OTHER      787dtype: int64</code></pre><p>Q7_Part_12 이 녀석이 문제였다.</p><ul><li>행 개수는 814개고 Part_12의 N/A 개수도 814개이다.</li></ul><p>위 식별 과정의 시행 횟수가 많아진다면 if 문을 사용한 define을 사용해도 되겠지만 일단은 수동으로 제거하자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Jp_PL = pd.DataFrame()</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2021 China: Q7_Part12(None) value == 0이므로 결측값 제거</span></span><br><span class="line">df21_Ch_rmQ07P12 = df21_Ch.drop([<span class="string">&#x27;Q7_Part_12&#x27;</span>], axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others - Q7_Part12(None)</span></span><br><span class="line">df21_Ch_PL = pd.DataFrame()</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 제거된 나라 칼럼과 value를 각각 삽입 및 통합</span></span><br><span class="line">df21_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df21_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey03: Treemap 시각화 [plotly]</title>
      <link>https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/</link>
      <guid>https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/</guid>
      <pubDate>Sun, 05 Dec 2021 13:55:24 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;기본-설정&quot;&gt;&lt;a href=&quot;#기본-설정&quot; class=&quot;headerlink&quot; title=&quot;기본 설정&quot;&gt;&lt;/a&gt;기본 설정&lt;/h2&gt;&lt;h3 id=&quot;module&quot;&gt;&lt;a href=&quot;#module&quot; class=&quot;headerlink&quot; title=&quot;m</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="기본-설정"><a href="#기본-설정" class="headerlink" title="기본 설정"></a>기본 설정</h2><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>treemap으로 많은 요소를 건드리진 않을 예정이니 express 라이브러리를 사용</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.express <span class="keyword">as</span> px</span><br></pre></td></tr></table></figure><h3 id="Import-data"><a href="#Import-data" class="headerlink" title="Import data"></a>Import data</h3><p>2021년 자료 외에도 19년 자료를 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df21 = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line">df19 = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2019/multiple_choice_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line"><span class="comment">#df21 = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;, dtype=&#x27;unicode&#x27;)</span></span><br><span class="line"><span class="comment">#df19 = pd.read_csv(&quot;../input/kaggle-survey-2019/multiple_choice_responses.csv&quot;, dtype=&#x27;unicode&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="Japan-amp-China-Programming-Languages"><a href="#Japan-amp-China-Programming-Languages" class="headerlink" title="Japan &amp; China: Programming_Languages"></a>Japan &amp; China: Programming_Languages</h2><h3 id="2021-Japan-amp-China-total"><a href="#2021-Japan-amp-China-total" class="headerlink" title="2021 Japan &amp; China total"></a>2021 Japan &amp; China total</h3><p>2021년 Q3(Country) 일본 중국 추출 dataframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df21_ChJp = df21[df21.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br></pre></td></tr></table></figure><h3 id="Split-Country"><a href="#Split-Country" class="headerlink" title="Split Country"></a>Split Country</h3><p>나라별 value_counts를 위해 각 나라로 dataframe 분리</p><h4 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h4><p><a href="https://hangack.github.io/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/">value_counts 오류 식별</a> 결측값 제거</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others</span></span><br><span class="line">df21_Jp_PL = pd.DataFrame()</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line">df21_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Jp.columns[<span class="number">7</span>:<span class="number">19</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2021 China: Q7_Part12(None) value == 0이므로 결측값 제거</span></span><br><span class="line">df21_Ch_rmQ07P12 = df21_Ch.drop([<span class="string">&#x27;Q7_Part_12&#x27;</span>], axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Q7(Program_Language): 칼럼번호 8~20 - others - Q7_Part12(None)</span></span><br><span class="line">df21_Ch_PL = pd.DataFrame()</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line">df21_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df21_Ch_rmQ07P12[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df21_Ch_rmQ07P12.columns[<span class="number">7</span>:<span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 제거된 나라 칼럼과 value를 각각 삽입 및 통합</span></span><br><span class="line">df21_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df21_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2019-Japan-amp-China-total"><a href="#2019-Japan-amp-China-total" class="headerlink" title="2019 Japan &amp; China total"></a>2019 Japan &amp; China total</h3><p>2019년 Q3(Country) 일본 중국 추출 dataframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df19_ChJp = df19[df19.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br></pre></td></tr></table></figure><h4 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h4><p>2021년과 동일 과정</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">df19_Ch = df19_ChJp[df19_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df19_Jp = df19_ChJp[df19_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Q18(Program_Language): 칼럼번호 83~95 - others &amp; other(text)</span></span><br><span class="line">df19_Jp_PL = pd.DataFrame()</span><br><span class="line">df19_Jp_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df19_Jp[col][<span class="number">1</span>:].value_counts().index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Jp.columns[<span class="number">82</span>:<span class="number">93</span>]]</span><br><span class="line">df19_Jp_PL[<span class="string">&#x27;counts&#x27;</span>] = [df19_Jp[col][<span class="number">1</span>:].value_counts().values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Jp.columns[<span class="number">82</span>:<span class="number">93</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 2019 China Q18_Part11(None) 결측값 제거</span></span><br><span class="line">df19_Ch_rmQ18P11 = df19_Ch.drop([<span class="string">&#x27;Q18_Part_11&#x27;</span>], axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Q18(Program_Language): 칼럼번호 83~95 - others &amp; other(text) - Q18_Part11(None)</span></span><br><span class="line">df19_Ch_PL = pd.DataFrame()</span><br><span class="line">df19_Ch_PL[<span class="string">&#x27;Program_Language&#x27;</span>] = [df19_Ch_rmQ18P11[col][<span class="number">1</span>:].value_counts() .index[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Ch_rmQ18P11.columns[<span class="number">82</span>:<span class="number">92</span>]]</span><br><span class="line">df19_Ch_PL[<span class="string">&#x27;counts&#x27;</span>] = [df19_Ch_rmQ18P11[col][<span class="number">1</span>:].value_counts() .values[<span class="number">0</span>] <span class="keyword">for</span> col <span class="keyword">in</span> df19_Ch_rmQ18P11.columns[<span class="number">82</span>:<span class="number">92</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df19_Jp_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;Japan&#x27;</span>)</span><br><span class="line">df19_Ch_PL.insert(<span class="number">0</span>, <span class="string">&#x27;Country&#x27;</span>,  <span class="string">&#x27;China&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df19_PL_JnC = pd.concat([df19_Jp_PL,df19_Ch_PL], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Split-year-Country"><a href="#Split-year-Country" class="headerlink" title="Split year{Country}"></a>Split year{Country}</h3><p>다른 csv인 2019자료와 2021자료 통합</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df21_PL_JnC.insert(<span class="number">0</span>, <span class="string">&#x27;year&#x27;</span>,  <span class="string">&#x27;2021&#x27;</span>)</span><br><span class="line">df19_PL_JnC.insert(<span class="number">0</span>, <span class="string">&#x27;year&#x27;</span>,  <span class="string">&#x27;2019&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df_PL_JnC_21n19 = pd.concat([df21_PL_JnC,df19_PL_JnC], ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Program_Language의 19년도 21년도 통합 value_counts의 정렬(연도 - 언어 - 나라)</p><p>values는 Program_Language의 value_counts</p><h3 id="Programming-Languages-treemap"><a href="#Programming-Languages-treemap" class="headerlink" title="Programming_Languages [treemap]"></a>Programming_Languages [treemap]</h3><p>이전 언급처럼 treemap으로 많은 요소를 건드리진 않을 예정이니 express 라이브러리를 사용했다.</p><p>path 요소의 순서는 부모자식 순서로 dataframe 칼럼 순서에 제한되지 않는다. -&gt; path 요소 조정으로 순서를 맘대로 바꿀 수 있다.</p><p>color 기준: country</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(<span class="string">&quot;2019n2021&quot;</span>),<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;Program_Language&#x27;</span>,<span class="string">&#x27;Country&#x27;</span>],</span><br><span class="line">                values=<span class="string">&#x27;counts&#x27;</span>, color=<span class="string">&#x27;Country&#x27;</span>,</span><br><span class="line">                  color_discrete_map=&#123;<span class="string">&#x27;(?)&#x27;</span>:<span class="string">&#x27;lightgrey&#x27;</span>, <span class="string">&#x27;China&#x27;</span>:<span class="string">&#x27;gold&#x27;</span>, <span class="string">&#x27;Japan&#x27;</span>:<span class="string">&#x27;darkblue&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fig.data[<span class="number">0</span>].textinfo = <span class="string">&#x27;label+percent parent+value&#x27;</span></span><br><span class="line"></span><br><span class="line">fig.update_layout(margin = <span class="built_in">dict</span>(t=<span class="number">0</span>, l=<span class="number">0</span>, r=<span class="number">0</span>, b=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/12.embed" height="525" width="100%"></iframe><p>color 참조 값을 counts로 넣었을 때는 plotly.express 설정대로 colorbar가 나온다.</p><p>color 기준: counts</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">&#x27;#D2691E&#x27;</span>,<span class="string">&#x27;#E19B50&#x27;</span>,<span class="string">&#x27;#E6C17B&#x27;</span>,<span class="string">&#x27;#F0CB85&#x27;</span>,<span class="string">&#x27;#F5D08A&#x27;</span>,<span class="string">&#x27;#FFEFD5&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(<span class="string">&quot;2019n2021&quot;</span>),<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;Program_Language&#x27;</span>,<span class="string">&#x27;Country&#x27;</span>],</span><br><span class="line">                values=<span class="string">&#x27;counts&#x27;</span>, color=<span class="string">&#x27;counts&#x27;</span>, color_continuous_scale=colors)</span><br><span class="line"></span><br><span class="line">fig.data[<span class="number">0</span>].textinfo = <span class="string">&#x27;label+percent parent+value&#x27;</span></span><br><span class="line"></span><br><span class="line">fig.update_layout(margin = <span class="built_in">dict</span>(t=<span class="number">0</span>, l=<span class="number">0</span>, r=<span class="number">0</span>, b=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/14.embed" height="525" width="100%"></iframe>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>슈라이크(라니우스 타입B) [FTL]</title>
      <link>https://hangack.github.io/2021/12/04/hobby/games/ftl-the-shrike/</link>
      <guid>https://hangack.github.io/2021/12/04/hobby/games/ftl-the-shrike/</guid>
      <pubDate>Sat, 04 Dec 2021 10:33:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://steamuserimages-a.akamaihd.net/ugc/1823391714093260826/7AB85E684CF6A3C8200885426B94E724AC747F4D/?imw=5000&amp;amp;imh=5000&amp;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://steamuserimages-a.akamaihd.net/ugc/1823391714093260826/7AB85E684CF6A3C8200885426B94E724AC747F4D/?imw=5000&amp;imh=5000&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=false" alt=""></p><p>우리는 우연으로 승리할 수 있는 난이도를 “어려움”이라 부르기로 약속했어요</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/%EC%9D%B8%EB%94%94%EA%B2%8C%EC%9E%84/">인디게임</category>
      
      
      <comments>https://hangack.github.io/2021/12/04/hobby/games/ftl-the-shrike/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Alone [DJMAX Respect V]</title>
      <link>https://hangack.github.io/2021/12/04/hobby/games/djmax-alone/</link>
      <guid>https://hangack.github.io/2021/12/04/hobby/games/djmax-alone/</guid>
      <pubDate>Sat, 04 Dec 2021 04:21:50 GMT</pubDate>
      
        
        
      <description>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fo4-UDwaPBM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;acceler</description>
        
      
      
      
      <content:encoded><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/fo4-UDwaPBM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>쉰곡 서윗하네</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/DJMAX-Respect-V/">DJMAX Respect V</category>
      
      
      <comments>https://hangack.github.io/2021/12/04/hobby/games/djmax-alone/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ㅇㄱㅇㅅㅎㄷㅂㅎㅇ [ALTF4]</title>
      <link>https://hangack.github.io/2021/12/04/hobby/games/altf4/</link>
      <guid>https://hangack.github.io/2021/12/04/hobby/games/altf4/</guid>
      <pubDate>Fri, 03 Dec 2021 17:33:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://steamuserimages-a.akamaihd.net/ugc/1823391714098113676/B619D57ACE99AC554731A7522FF4BA3AA9C6DAF8/?imw=5000&amp;amp;imh=5000&amp;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://steamuserimages-a.akamaihd.net/ugc/1823391714098113676/B619D57ACE99AC554731A7522FF4BA3AA9C6DAF8/?imw=5000&amp;imh=5000&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=false" alt=""></p><p>메모리 누수 등으로 프레임 드랍 일어나면 유저, 닭 투척, 트레일러 등 엔티티 속도도 같이 느려져서 자체 하드모드 쌉가능.</p><p>리부트하면 설치물도 전부 사라짐. 메모리에 할당됐던걸까?</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/%EC%9D%B8%EB%94%94%EA%B2%8C%EC%9E%84/">인디게임</category>
      
      
      <comments>https://hangack.github.io/2021/12/04/hobby/games/altf4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey02: Bar 시각화 [plotly]</title>
      <link>https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/</link>
      <guid>https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/</guid>
      <pubDate>Thu, 02 Dec 2021 15:19:33 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;이전-포스팅들과-동일-과정&quot;&gt;&lt;a href=&quot;#이전-포스팅들과-동일-과정&quot; class=&quot;headerlink&quot; title=&quot;이전 포스팅들과 동일 과정&quot;&gt;&lt;/a&gt;이전 포스팅들과 동일 과정&lt;/h2&gt;&lt;figure class=&quot;highlight </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="이전-포스팅들과-동일-과정"><a href="#이전-포스팅들과-동일-과정" class="headerlink" title="이전 포스팅들과 동일 과정"></a>이전 포스팅들과 동일 과정</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go </span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;#FF0000&#x27;</span>,<span class="string">&#x27;#FFBB00&#x27;</span>,<span class="string">&#x27;#ffff00&#x27;</span>,<span class="string">&#x27;#00FF00&#x27;</span>,<span class="string">&#x27;#0000FF&#x27;</span>,<span class="string">&#x27;#9C009C&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line"><span class="comment">#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_ChJp = df[df.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br><span class="line"></span><br><span class="line">df_Ch = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df_Jp = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indiQ_value_counts</span>(<span class="params">dataframe, indi_Qnum</span>):</span></span><br><span class="line">    df = dataframe[indi_Qnum][<span class="number">1</span>:].value_counts()</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Jp_age = indiQ_value_counts(df_Jp, <span class="string">&#x27;Q1&#x27;</span>)</span><br><span class="line">df_Ch_age = indiQ_value_counts(df_Ch, <span class="string">&#x27;Q1&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Age-plotly-Bar"><a href="#Age-plotly-Bar" class="headerlink" title="Age [plotly: Bar]"></a>Age [plotly: Bar]</h2><p>01에 이어 이번에도 두 나라의 값을 비교할 예정이니 아예 처음부터 데이터를 합쳐서 표현한 그래프를 뽑아내겠다.</p><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Bar.html">plotly.graph_objects.Bar</a></li><li><a href="https://plotly.com/python/bar-charts/">Bar Charts in Python</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Bar_C = go.Bar(name=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">               x=df_Ch_age.index,</span><br><span class="line">               y=df_Ch_age.values</span><br><span class="line">              )</span><br><span class="line">Bar_J = go.Bar(name=<span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">               x=df_Jp_age.index,</span><br><span class="line">               y=df_Jp_age.values</span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = go.Figure(data=[Bar_C,</span><br><span class="line">                      Bar_J])</span><br><span class="line"></span><br><span class="line">fig.update_layout(title=<span class="string">&#x27;Age: Japan &amp; China&#x27;</span>,</span><br><span class="line">                  xaxis_title=<span class="string">&quot;Age&quot;</span>, yaxis_title=<span class="string">&#x27;Counts&#x27;</span></span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey02\bar1.png" alt="Bar1"></p><p>bar chart에서 stack 형식을 사용하거나 group과 stack을 동시에 사용하지 않는 이상 하나의 plot에 여러 bar data를 넣으면 default는 group 형식으로 뽑힌다.</p><h3 id="index-정렬"><a href="#index-정렬" class="headerlink" title="index 정렬"></a>index 정렬</h3><p>나이 순으로 출력하고 싶었지만, <code>value_counts</code> 할 때 원본 dataframe의 요소 순서로 index가 들어가버렸다.</p><p>그래서 <code>value_counts</code>된 dataframe을 <code>sort_index</code>를 사용해 오름차순 정렬한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Ch_sortAge = df_Ch_age.sort_index()</span><br><span class="line">df_Jp_sortAge = df_Jp_age.sort_index()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey02\bar2.png" alt="Bar2"></p><h3 id="60-69-구간에-더미값-추가"><a href="#60-69-구간에-더미값-추가" class="headerlink" title="60-69 구간에 더미값 추가"></a>60-69 구간에 더미값 추가</h3><p>정렬은 문제없어 보였지만 70+와 60-69 순서가 이상하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df_Ch_sortAge</span><br></pre></td></tr></table></figure><pre><code>18-21    20622-24    27425-29    15930-34    10935-39     3940-44     1445-49      850-54      155-59      270+        1Name: Q1, dtype: int64</code></pre><p>아무래도 China에 60-69 구간에 해당하는 value가 없어서 index 추가가 안된거같다.</p><p>index가 전부 있는 Japan을 앞 순서로 바꿔도 되겠지만, 그냥 China <code>60-69</code> index를 추가하고 임의로 값 <code>0</code>를 넣겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Ch_sortAge.loc[<span class="string">&#x27;60-69&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df_Ch_sortAge = df_Ch_sortAge.sort_index()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey02\bar3.png" alt="Bar3"></p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Bar.html">plotly.graph_objects.Bar</a></li><li><a href="https://plotly.com/python/bar-charts/">Bar Charts in Python</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kaggle_Survey01: Pie 시각화 [plotly]</title>
      <link>https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/</link>
      <guid>https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/</guid>
      <pubDate>Thu, 02 Dec 2021 02:17:39 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;dataset-구조-확인하기&quot;&gt;&lt;a href=&quot;#dataset-구조-확인하기&quot; class=&quot;headerlink&quot; title=&quot;dataset 구조 확인하기&quot;&gt;&lt;/a&gt;dataset 구조 확인하기&lt;/h2&gt;&lt;figure class=&quot;highli</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="dataset-구조-확인하기"><a href="#dataset-구조-확인하기" class="headerlink" title="dataset 구조 확인하기"></a>dataset 구조 확인하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objects <span class="keyword">as</span> go </span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;#FF0000&#x27;</span>,<span class="string">&#x27;#FFBB00&#x27;</span>,<span class="string">&#x27;#ffff00&#x27;</span>,<span class="string">&#x27;#00FF00&#x27;</span>,<span class="string">&#x27;#0000FF&#x27;</span>,<span class="string">&#x27;#9C009C&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;</span>, dtype=<span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line"><span class="comment">#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;)</span></span><br></pre></td></tr></table></figure><p>Columns 구조는 <a href="https://hangack.github.io/2021/11/11/Codding/Python/kaggle_survey/Data-Transformation-input-num/">문자열에서 특정 값을 뽑아내고 input을 받는 함수</a> 포스트에서 확인했으므로 넘어간다.</p><h2 id="비교-대상-선정하기"><a href="#비교-대상-선정하기" class="headerlink" title="비교 대상 선정하기"></a>비교 대상 선정하기</h2><p>2021 kaggle_survey 분석을 계속 진행한다.</p><p>베이스는 2021년 기준 survey 응답 count 수가 비슷한 일본과 중국을 선정했다.<br>한국 넣으려다 응답수가 낮아 방향을 바꿨다</p><p><code>kaggle_survey_2021_responses</code>의 모든 row를 사용할 필요 없으므로 Q3(country) 응답에 Jp(Japan), Ch(China)인 요소만 추출한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_ChJp = df[df.Q3.isin([<span class="string">&quot;Japan&quot;</span>,<span class="string">&quot;China&quot;</span>])]</span><br><span class="line"></span><br><span class="line">df_Ch = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;China&quot;</span>])]</span><br><span class="line">df_Jp = df_ChJp[df_ChJp.Q3.isin([<span class="string">&quot;Japan&quot;</span>])]</span><br></pre></td></tr></table></figure><h2 id="Gender-plotly-Pie"><a href="#Gender-plotly-Pie" class="headerlink" title="Gender [plotly: Pie]"></a>Gender [plotly: Pie]</h2><p>일단 간단히 비교할 수 있는 Gender(Q2)와 Age(Q1) 중 Q2를 Pie 그래프로 시각화할 예정이다.</p><p>간단한 Pie 그래프를 사용할 예정이고, 간단한 그래프인 만큼 pie 요소 option을 만질 여지가 많다.<br>따라서 <code>express</code>가 아닌 <code>graph_objects</code> 모듈로 작업했다.</p><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Pie.html">plotly.graph_objects.Pie</a></li><li><a href="https://plotly.com/python/pie-charts/">Pie Charts in Python</a></li></ul><p>plotly.graph_objects.Pie를 사용해서 만든 그래프를 Figure 형식으로 지정하고 fig_j 객체에 저장한다.</p><p>아래 코드는 필수 요소인 <code>lables</code>와 <code>values</code>만 넣은 결과다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fig_j = go.Figure(data=[go.Pie(labels=df_Jp[<span class="string">&#x27;Q2&#x27;</span>][<span class="number">1</span>:].value_counts().index, </span><br><span class="line">                               values=df_Jp[<span class="string">&#x27;Q2&#x27;</span>][<span class="number">1</span>:].value_counts().values</span><br><span class="line">                              )</span><br><span class="line">                       ]</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line">fig_j.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey01\pie1.png" alt="Pie1"></p><h3 id="대응하는-value-counts-함수-만들기"><a href="#대응하는-value-counts-함수-만들기" class="headerlink" title="대응하는 value_counts 함수 만들기"></a>대응하는 value_counts 함수 만들기</h3><p>앞으로 많은 그래프를 그려낼거고 <code>df_Jp[&#39;Q2&#39;][1:].value_counts()</code> 형식이 반복된다.</p><p><code>df_Jp[&#39;Q2&#39;][1:].value_counts()</code>을 객체로 만들어서 넣어도 되겠지만, 이번 작업에서 사용할 df은 <code>df_Jp</code>&amp;<code>df_Ch</code> 2개로 dataframe 객체의 변동이 있고, 칼럼명도 Q1,Q2로 변동이 있다.<br>위 조건에 부합하는 간단한 함수 하나 만들겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indiQ_value_counts</span>(<span class="params">dataframe, indi_Qnum</span>):</span></span><br><span class="line">    df = dataframe[indi_Qnum][<span class="number">1</span>:].value_counts()</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_Jp_gen = indiQ_value_counts(df_Jp, <span class="string">&#x27;Q2&#x27;</span>)</span><br><span class="line">df_Ch_gen = indiQ_value_counts(df_Ch, <span class="string">&#x27;Q2&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="subplots-그래프-figure-합치기"><a href="#subplots-그래프-figure-합치기" class="headerlink" title="subplots: 그래프 figure 합치기"></a>subplots: 그래프 figure 합치기</h3><p>japan과 china 함수를 각각의 figure로 보기엔 불편하다.<br>subplost를 이용해 하나의 fig로 합칠 예정이다.</p><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.subplots.make_subplots.html">plotly.subplots.make_subplots</a></li><li><a href="https://plotly.com/python/subplots/">Subplots Types</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plotly.subplots <span class="keyword">import</span> make_subplots</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pie_J = go.Pie(labels=df_Jp_gen.index, </span><br><span class="line">               values=df_Jp_gen.values</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">Pie_C = go.Pie(labels=df_Ch_gen.index, </span><br><span class="line">               values=df_Ch_gen.values</span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fig = make_subplots(rows=<span class="number">1</span>, cols=<span class="number">2</span>,specs=[[&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;,&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;]])</span><br><span class="line"></span><br><span class="line">fig.add_trace(Pie_J,row=<span class="number">1</span>,col=<span class="number">1</span>)</span><br><span class="line">fig.add_trace(Pie_C,row=<span class="number">1</span>,col=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey01\pie2.png" alt="Pie1"></p><h3 id="text-color-커스텀"><a href="#text-color-커스텀" class="headerlink" title="text, color 커스텀"></a>text, color 커스텀</h3><p>커스텀 색상이나 타이틀 등 텍스트를 넣어 간단한 시각적 커스텀을 입혀보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Pie_J = go.Pie(labels=df_Jp_gen.index, </span><br><span class="line">               values=df_Jp_gen.values,</span><br><span class="line">               title=<span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span></span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">Pie_C = go.Pie(labels=df_Ch_gen.index, </span><br><span class="line">               values=df_Ch_gen.values,</span><br><span class="line">               title=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = make_subplots(rows=<span class="number">1</span>, cols=<span class="number">2</span>,specs=[[&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;,&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;]])</span><br><span class="line"></span><br><span class="line">fig.add_trace(Pie_J,row=<span class="number">1</span>,col=<span class="number">1</span>)</span><br><span class="line">fig.add_trace(Pie_C,row=<span class="number">1</span>,col=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig.update_layout(title_text=<span class="string">&#x27;Gender&#x27;</span>)</span><br><span class="line">fig.update_traces(marker=<span class="built_in">dict</span>(colors=colors[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><p><img src="\images\2112\kaggle-survey01\pie3.png" alt="Pie1"></p><h3 id="시각-요소-커스텀"><a href="#시각-요소-커스텀" class="headerlink" title="시각 요소 커스텀"></a>시각 요소 커스텀</h3><p>Trace의 title이 Pie 외부에 위치하는게 맘에들지 않는 부분을 수정하기 위해 시각 효과에서 legend를 제거하는 등 각종 요소 값을 변경한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Pie_J = go.Pie(labels=df_Jp_gen.index, </span><br><span class="line">               values=df_Jp_gen.values,</span><br><span class="line"><span class="comment">#               pull=[0,0,0.2,0.2,0.2],    ## 중앙에서 n% 떨어진 위치 할당</span></span><br><span class="line">               title=<span class="string">&#x27;Japan&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span>,</span><br><span class="line">               hole=<span class="number">0.3</span></span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">Pie_C = go.Pie(labels=df_Ch_gen.index, </span><br><span class="line">               values=df_Ch_gen.values,</span><br><span class="line"><span class="comment">#               pull=[0,0,0.2,0.2,0.2],</span></span><br><span class="line">               title=<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">               textinfo =<span class="string">&#x27;label,percent&#x27;</span>,</span><br><span class="line">               hole=<span class="number">0.3</span></span><br><span class="line">              )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fig = make_subplots(rows=<span class="number">1</span>, cols=<span class="number">2</span>,specs=[[&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;,&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;domain&quot;</span>&#125;]])</span><br><span class="line"></span><br><span class="line">fig.add_trace(Pie_J,row=<span class="number">1</span>,col=<span class="number">1</span>)</span><br><span class="line">fig.add_trace(Pie_C,row=<span class="number">1</span>,col=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig.update_layout(title_text=<span class="string">&#x27;Gender&#x27;</span>,</span><br><span class="line"><span class="comment">#                  showlegend=False,    ## ledend(lable 목록) 시각적으로 제거</span></span><br><span class="line">                  margin=<span class="built_in">dict</span>(t=<span class="number">0</span>, b=<span class="number">0</span>, l=<span class="number">0</span>, r=<span class="number">0</span>)</span><br><span class="line">                 )</span><br><span class="line">fig.update_traces(marker=<span class="built_in">dict</span>(colors=colors[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig.show()</span><br></pre></td></tr></table></figure><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/1.embed" height="525" width="100%"></iframe><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://plotly.com/python-api-reference/generated/plotly.graph_objects.Pie.html">plotly.graph_objects.Pie</a></li><li><a href="https://plotly.com/python/pie-charts/">Pie Charts in Python</a></li><li><a href="https://plotly.com/python-api-reference/generated/plotly.subplots.make_subplots.html">plotly.subplots.make_subplots</a></li><li><a href="https://plotly.com/python/subplots/">Subplots Types</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/">Kaggle_Survey 2021</category>
      
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/">파이썬</category>
      
      <category domain="https://hangack.github.io/tags/code/">code</category>
      
      <category domain="https://hangack.github.io/tags/pandas/">pandas</category>
      
      
      <comments>https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rstudio 처음 세팅하기</title>
      <link>https://hangack.github.io/2021/12/01/Codding/R/r-setting/</link>
      <guid>https://hangack.github.io/2021/12/01/Codding/R/r-setting/</guid>
      <pubDate>Tue, 30 Nov 2021 21:35:30 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Rstudio-기본-설치-프로그램&quot;&gt;&lt;a href=&quot;#Rstudio-기본-설치-프로그램&quot; class=&quot;headerlink&quot; title=&quot;Rstudio 기본 설치 프로그램&quot;&gt;&lt;/a&gt;Rstudio 기본 설치 프로그램&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Rstudio-기본-설치-프로그램"><a href="#Rstudio-기본-설치-프로그램" class="headerlink" title="Rstudio 기본 설치 프로그램"></a>Rstudio 기본 설치 프로그램</h2><ul><li><p>Rstudio는 <a href="https://cran.r-project.org/bin/windows/base/">R 언어</a>를 사용하는 프로그램이니 R 언어팩을 설치한다.</p></li><li><p>사용할 작업 환경인 <a href="https://www.rstudio.com/products/rstudio/download/#download">Rstudio</a>도 받아주고,</p></li><li><p><a href="https://cran.r-project.org/bin/windows/Rtools/">Rtools</a>를 설치하면 R의 기본적인 Package 세트와 C/C++과 같은 의존성 세팅을 불러올 수 있다.</p></li></ul><h3 id="Rstudio-기본-세팅"><a href="#Rstudio-기본-세팅" class="headerlink" title="Rstudio 기본 세팅"></a>Rstudio 기본 세팅</h3><p>나는 memo 앱을 사용할 때도 자동 줄바꿈을 사용하는 편이기에 <code>Soft-wrap</code>를 체크했다.</p><p><img src="\images\2112\R-download\soft-warp.png" alt="Soft-wrap R source files"></p><p>윈도우 환경이라면 언어 인코딩 방식을 <code>UTF-8</code>로 변경하는걸 추천한다.</p><p><img src="\images\2112\R-download\encoding.png" alt="default text encoding"></p><h3 id="R-Script"><a href="#R-Script" class="headerlink" title="R Script"></a>R Script</h3><p>R studio 상단의 files 탭에서 project 경로를 생성하거나 py 혹은 ipynb 처럼 R Script, Rmd 파일창을 열 수 있다.</p><p><img src="\images\2112\R-download\files.png" alt="new"></p><h2 id="Rtools-path-설정"><a href="#Rtools-path-설정" class="headerlink" title="Rtools path 설정"></a>Rtools path 설정</h2><p>R Script 등을 열었다면 Rtools의 경로를 지정해준다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(<span class="string">&#x27;PATH=&quot;$&#123;RTOOLS40_HOME&#125;\\usr\\bin;$&#123;PATH&#125;&quot;&#x27;</span>, file = <span class="string">&quot;~/.Renviron&quot;</span>, append = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p>R은 PL/SQL처럼 동작한다. 원하는 명령어를 작성하고 해당 열에서 <code>Ctrl+Enter</code> 해주면 된다.</p><p>이후 Path값을 다시 불러오기 위해 R을 재시작한다. 나의 경우 R restart로 해결안되서 Rstudio 자체를 재실행했다.<br>그냥 깔끔하게 Rstudio를 껏다키는걸 추천한다.</p><h2 id="패키지-불러오기"><a href="#패키지-불러오기" class="headerlink" title="패키지 불러오기"></a>패키지 불러오기</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;Package_Name&quot;</span>)</span><br><span class="line"><span class="comment">#혹은</span></span><br><span class="line">install.packages(<span class="string">&quot;Package_Name&quot;</span>, dependencies = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p>패키지 함수를 사용하려면 다른 프로그램 언어들처럼 file에서 package를 import 해줘야한다.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library(Package_Name)</span><br></pre></td></tr></table></figure><p>만약 콘솔에 사용하려는 패키지가 없다고 나온다면 <code>install.packages(&quot;패키지명&quot;)</code>를 해주자.</p><p>특수한 경우에 대한 오류는 <a href="https://cran.r-project.org/web/packages/available_packages_by_date.html">R 패키지 리스트</a>에서 <a href="https://cran.r-project.org/web/packages/stringi/index.html">stringi</a>처럼 시스템 기본 요구사항이 들어있는 경우다.</p><p><img src="\images\2112\R-download\stringi.png" alt="stringi"></p><p>일반적인 경우는 Rtools 설치에서 해결됐을테니 크게 신경쓸 필욘 없다.</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://cran.r-project.org/bin/windows/base/">R language</a></li><li><a href="https://cran.r-project.org/web/packages/available_packages_by_date.html">R 패키지 리스트</a></li><li><a href="https://www.rstudio.com/products/rstudio/download/#download">Rstudio</a></li><li><a href="https://cran.r-project.org/bin/windows/Rtools/">Rtools</a></li></ul><h3 id="튜토리얼"><a href="#튜토리얼" class="headerlink" title="튜토리얼"></a>튜토리얼</h3><ul><li><a href="https://r4ds.had.co.nz/">R for data science</a>에서 기본적인 시각화(ch.03) 및 기초 문법(ch.05)을 확인할 수 있다.</li><li><a href="https://exts.ggplot2.tidyverse.org/gallery/">ggplot2 extensions - gallery</a>에서는 고-급 그래프 예제를 가져올 수 있다.</li><li><a href="https://www.rstudio.com/resources/cheatsheets/">R cheatsheets</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/">연습</category>
      
      <category domain="https://hangack.github.io/categories/%EC%97%B0%EC%8A%B5/R/">R</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/R/">R</category>
      
      <category domain="https://hangack.github.io/tags/Rstudio/">Rstudio</category>
      
      <category domain="https://hangack.github.io/tags/Rtools/">Rtools</category>
      
      
      <comments>https://hangack.github.io/2021/12/01/Codding/R/r-setting/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>plotly 동적 그래프 웹페이지에 삽입하기</title>
      <link>https://hangack.github.io/2021/11/30/Blog/iframe-plotly/</link>
      <guid>https://hangack.github.io/2021/11/30/Blog/iframe-plotly/</guid>
      <pubDate>Mon, 29 Nov 2021 21:20:51 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;plotly에-그래프-업로드&quot;&gt;&lt;a href=&quot;#plotly에-그래프-업로드&quot; class=&quot;headerlink&quot; title=&quot;plotly에 그래프 업로드&quot;&gt;&lt;/a&gt;plotly에 그래프 업로드&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="plotly에-그래프-업로드"><a href="#plotly에-그래프-업로드" class="headerlink" title="plotly에 그래프 업로드"></a>plotly에 그래프 업로드</h2><p><a href="https://hangack.github.io/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/">Kaggle_Survey01: Pie [Plotly]</a>에서 작성한 plotly chart는 동적 그래프라 이미지로 사용하긴 아쉽고 github page의 ipynb에서도 동작하지 않는다.</p><p>그래프를 끌어오기 위해 plotly 홈페이지 저장환경을 이용할 예정이다.</p><h3 id="chart-studio-설치"><a href="#chart-studio-설치" class="headerlink" title="chart_studio 설치"></a>chart_studio 설치</h3><p>우선 사용할 작업환경에 <a href="https://plotly.com/python/getting-started-with-chart-studio/">chart_studio</a> 라이브러리를 설치해주자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip i chart_studio</span></span><br></pre></td></tr></table></figure><p>※ jupyter 로컬 작업환경을 사용한다면 anaconda prompt로 설치</p><p><code>chart_studio</code>는 plotly 그래프를 plotly 홈페이지에 업로드하고 원한다면 html iframe 태그로 변환까지 해주는 녀석이다.</p><h3 id="plotly-Access-Key"><a href="#plotly-Access-Key" class="headerlink" title="plotly Access Key"></a>plotly Access Key</h3><p><a href="https://chart-studio.plotly.com/feed/#/">plotly</a> 개인 공간에 업로드 할 예정이니 plotly 회원가입을 진행하자.</p><p>[profile] - [API keys] 에서 Access key를 얻어온다.</p><p><img src="\images\2111\plotly-iframe\access key.png" alt="API key"></p><p>위에서 설치한 라이브러리를 import하고 API key를 사용해 계정에 접근하자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chart_studio</span><br><span class="line">chart_studio.tools.set_credentials_file(username=<span class="string">&#x27;유저명&#x27;</span>, api_key=<span class="string">&#x27;접근키&#x27;</span>)</span><br></pre></td></tr></table></figure><p>성공적으로 연동했다면 저장할 figure 객체와 저장될 파일명을 넣어준다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chart_studio.plotly.plot(fig, filename = <span class="string">&#x27;파일명&#x27;</span>, auto_open=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;https://plotly.com/~hangack/1/&#39;</code></pre><p>out된 url에 들어가보면 그래프가 업로드 되었을거다.</p><h2 id="웹페이지에-그래프-끌어오기"><a href="#웹페이지에-그래프-끌어오기" class="headerlink" title="웹페이지에 그래프 끌어오기"></a>웹페이지에 그래프 끌어오기</h2><p>원래 목적이었던 웹페이지에서 그래프를 사용해보자.</p><h3 id="html-iframe"><a href="#html-iframe" class="headerlink" title="html iframe"></a>html iframe</h3><p>iframe(inline frame) html 형식을 수작업으로 작성해도 되겠지만 <code>chart_studio</code> 모듈 내 라이브러리에서도 변환할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chart_studio.tools.get_embed(<span class="string">&#x27;https://plotly.com/~hangack/1/#/&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>&#39;&lt;iframe id=&quot;igraph&quot; scrolling=&quot;no&quot; style=&quot;border:none;&quot; seamless=&quot;seamless&quot; src=&quot;https://plotly.com/~hangack/1.embed&quot; height=&quot;525&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;&#39;</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;igraph&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;&quot;</span> <span class="attr">seamless</span>=<span class="string">&quot;seamless&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://plotly.com/~hangack/1.embed&quot;</span> <span class="attr">height</span>=<span class="string">&quot;525&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iframe(inline frame): </p><iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plotly.com/~hangack/1.embed" height="525" width="100%"></iframe><h3 id="hexo-tag-plugin-iframe"><a href="#hexo-tag-plugin-iframe" class="headerlink" title="hexo tag plugin iframe"></a>hexo tag plugin iframe</h3><p>hexo 환경에서 작성중이라면 기본 plugin인 <a href="https://hexo.io/ko/docs/tag-plugins.html">tag</a> 문법으로도 iframe을 삽입할 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe https://plotly.com/~hangack/1.embed %&#125;</span><br></pre></td></tr></table></figure><iframe src="https://plotly.com/~hangack/1.embed" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://dschloe.github.io/python/python_edu/03_datavisualisation/ch_plotly_html/">Plotly 그래프 깃헙 블로그에 올리기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/python/">python</category>
      
      <category domain="https://hangack.github.io/tags/plotly/">plotly</category>
      
      <category domain="https://hangack.github.io/tags/html/">html</category>
      
      
      <comments>https://hangack.github.io/2021/11/30/Blog/iframe-plotly/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo blog CSS 스타일 변경하기 (Feat. icarus theme)</title>
      <link>https://hangack.github.io/2021/11/28/Blog/Setting/hexo-blog-style/</link>
      <guid>https://hangack.github.io/2021/11/28/Blog/Setting/hexo-blog-style/</guid>
      <pubDate>Sun, 28 Nov 2021 03:54:52 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;블로그-스타일-세부설정을-위한-icarus-theme-폴더&quot;&gt;&lt;a href=&quot;#블로그-스타일-세부설정을-위한-icarus-theme-폴더&quot; class=&quot;headerlink&quot; title=&quot;블로그 스타일 세부설정을 위한 icarus them</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="블로그-스타일-세부설정을-위한-icarus-theme-폴더"><a href="#블로그-스타일-세부설정을-위한-icarus-theme-폴더" class="headerlink" title="블로그 스타일 세부설정을 위한 icarus theme 폴더"></a>블로그 스타일 세부설정을 위한 icarus theme 폴더</h2><p>이전 포스팅인 <a href="https://hangack.github.io/2021/11/25/Blog/Setting/hexo-blog-clone-theme/">블로그 테마 세부설정을 위한 clone theme</a>를 보고오자.</p><h2 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h2><p>HTML? 몰?루 하던 시절엔 왜째서 기본 탑재된지 이해가 안가던 툴, 브라우저에서 <code>F12</code>를 누르면 어김없이 등장하는 코드뭉치 박스를 기억할 것이다.</p><p>오늘 만큼은 이놈을 유용하게 사용할 수 있겠다.</p><p><img src="\images\2111\hexo_blog_CSS\devtools.png" alt="문제의 그 BOX"></p><p>DevTools 위에 나오는 코드 뭉탱이(<code>Elements</code>)가 해당 페이지의 구성 요소들의 배치 형식, 아래 나오는 <code>Styles</code> 박스가 <code>Elements</code>에서 클릭한 요소의 CSS stlye로 보면된다.</p><p>사실 위 2개만 알면 건물을 새로 짖는게 아닌 이상 인테리어 수정 방법은 다 배운 셈이다.</p><h3 id="수정하고픈-요소-찾기"><a href="#수정하고픈-요소-찾기" class="headerlink" title="수정하고픈 요소 찾기"></a>수정하고픈 요소 찾기</h3><p>DevTools에서는 친절하게도 임의 요소에 마우스를 올려두기만 해도 어느 영역에 대한 <code>Class</code>인지 화면에 표시해준다.</p><p><img src="\images\2111\hexo_blog_CSS\find class.png" alt="요소 식별"></p><p>팁이 있다면 DevTools 좌측 상단의 “Select an element in the page to inspect it - Ctrl+Shift+C” 버튼을 눌러보자</p><center><img src="\images\2111\hexo_blog_CSS\mouse.png"></center><p>식별된 요소가 포함된 class들을 기억하자.</p><p>내가 수정할 요소는 <code>nav: pagination</code> / <code>ul: pagination-list is-hidden-mobile</code> / <code>a: pagination-link is-current</code>인거같다.</p><p><code>pagination.stly</code> 파일 안에서 <code>pagination</code> 요소와 <code>pagination-link.is-current</code> 하위 요소를 찾을 수 있었다.<br>중간의 ul은 moblie 모드에서는 숨기는 옵션? js로 설정하는 예외인거같다.</p><p><img src="\images\2111\hexo_blog_CSS\change option.png" alt="style"></p><p>article의 img 요소처럼 style 커스텀 값이 없다면 부모 객체 아래에 직접 넣어주면 된다.</p><h3 id="스크롤바-스타일-변경"><a href="#스크롤바-스타일-변경" class="headerlink" title="스크롤바 스타일 변경"></a>스크롤바 스타일 변경</h3><p>집에서 쓸 때는 마우스 사이드 버튼에 <code>page up/down</code>을 할당하고 써서 몰랐는데, 외부에서 블로그에 접속하니 사이드바가 쥐꼬리만한게 너무 불편했다.</p><p>궁금하면 <a href="https://ppoffice.github.io/hexo-theme-icarus/">icarus</a>에서 desktop mode로 직접 확인 ㄱㄱ</p><p><code>Elements</code>에서 스크롤바를 정상적으로 식별할 수 없었지만, html 전체 요소 <code>style</code>에서 <code>-wibkit-scrollbar</code>라는 놈을 찾을 수 있었다.</p><p>쓸일이 있을진 모르겠지만 주석처리 해놓자.</p><figure class="highlight javascript"><figcaption><span>.\include\style\base.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ---------------------------------</span></span><br><span class="line"><span class="comment"> *+desktop()</span></span><br><span class="line"><span class="comment"> *    ::-webkit-scrollbar</span></span><br><span class="line"><span class="comment"> *        width: 8px</span></span><br><span class="line"><span class="comment"> *        height: 8px</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    ::-webkit-scrollbar-track</span></span><br><span class="line"><span class="comment"> *        border-radius: 3px</span></span><br><span class="line"><span class="comment"> *        background: rgba(0,0,0,0.06)</span></span><br><span class="line"><span class="comment"> *        box-shadow: inset 0 0 5px rgba(0,0,0,0.1)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    ::-webkit-scrollbar-thumb</span></span><br><span class="line"><span class="comment"> *        border-radius: 3px</span></span><br><span class="line"><span class="comment"> *        background: rgba(0,0,0,0.12)</span></span><br><span class="line"><span class="comment"> *        box-shadow: inset 0 0 10px rgba(0,0,0,0.2)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    ::-webkit-scrollbar-thumb:hover</span></span><br><span class="line"><span class="comment"> *        background: rgba(0,0,0,0.24)</span></span><br><span class="line"><span class="comment"> * --------------------------------- */</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      <category domain="https://hangack.github.io/tags/css/">css</category>
      
      <category domain="https://hangack.github.io/tags/js/">js</category>
      
      
      <comments>https://hangack.github.io/2021/11/28/Blog/Setting/hexo-blog-style/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>와! 15성 첫 풀콤 [DJMAX Respect V]</title>
      <link>https://hangack.github.io/2021/11/27/hobby/games/djmax-1st15max/</link>
      <guid>https://hangack.github.io/2021/11/27/hobby/games/djmax-1st15max/</guid>
      <pubDate>Sat, 27 Nov 2021 03:55:19 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://steamuserimages-a.akamaihd.net/ugc/1823390989350695326/BE09B915971364F33B690F21142BC60C856B2CCF/?imw=5000&amp;amp;imh=5000&amp;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://steamuserimages-a.akamaihd.net/ugc/1823390989350695326/BE09B915971364F33B690F21142BC60C856B2CCF/?imw=5000&amp;imh=5000&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=false" alt=""><br>맥콤 생각하고 준내 비볐엌ㅋ</p><p><img src="https://steamuserimages-a.akamaihd.net/ugc/1823390989350695521/7FC5B846F6A6A389121B657A6FC76756675545BB/?imw=5000&amp;imh=5000&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=false" alt=""></p><p>나도 이제 초고수?</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/">취미(뻘짓중)</category>
      
      <category domain="https://hangack.github.io/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/">게임</category>
      
      
      <category domain="https://hangack.github.io/tags/%EC%B7%A8%EB%AF%B8/">취미</category>
      
      <category domain="https://hangack.github.io/tags/%EA%B2%8C%EC%9E%84/">게임</category>
      
      <category domain="https://hangack.github.io/tags/DJMAX-Respect-V/">DJMAX Respect V</category>
      
      
      <comments>https://hangack.github.io/2021/11/27/hobby/games/djmax-1st15max/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>블로그 테마 세부설정을 위한 clone theme</title>
      <link>https://hangack.github.io/2021/11/25/Blog/Setting/hexo-blog-clone-theme/</link>
      <guid>https://hangack.github.io/2021/11/25/Blog/Setting/hexo-blog-clone-theme/</guid>
      <pubDate>Wed, 24 Nov 2021 20:35:36 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;문제-발생&quot;&gt;&lt;a href=&quot;#문제-발생&quot; class=&quot;headerlink&quot; title=&quot;문제 발생&quot;&gt;&lt;/a&gt;문제 발생&lt;/h2&gt;&lt;p&gt;테마 스타일 커스텀을 하려 봤더니 Hexo v5 이후 방식인 npm으로 _config.icarus만 불러</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-발생"><a href="#문제-발생" class="headerlink" title="문제 발생"></a>문제 발생</h2><p>테마 스타일 커스텀을 하려 봤더니 Hexo v5 이후 방식인 npm으로 _config.icarus만 불러왔던 <a href="https://hangack.github.io/2021/11/02/Blog/Setting/Hexo-blog-theme/">방식</a>이 내 발목을 잡았다.</p><p>theme를 처음부터 다시 받아야할까?</p><p><em>태초마을인가 그릉가?</em></p><h2 id="테마-폴더-끌어오기"><a href="#테마-폴더-끌어오기" class="headerlink" title="테마 폴더 끌어오기"></a>테마 폴더 끌어오기</h2><p>그럴필욘 없고 themes 디렉토리에 테마 세부 설정을 위한 패키지만 받아오면 된다.</p><p>과거에 설정했던 <a href="https://github.com/ppoffice/hexo-theme-icarus">테마 깃허브</a>에 들어가서 Clone url을 받는다.</p><p>다음으로 <code>\themes\</code> 경로에 <code>$ git clone</code>하면되지만, <a href="https://chinsun9.github.io/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/">themes 폴더에 icarus 테마깔기</a>에서 좋은 제안을 발견했다.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git</span></span><br></pre></td></tr></table></figure></p><p>마지막으로 테마명을 일치시키기 위해 불러온 hexo-theme-icarus 디렉토리를 icarus로 변경해줬다.</p><p>가장 답답했던 페이지 가로축 범위 조정도 <a href="https://chinsun9.github.io/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/">hexo icarus 테마에 커스텀 레이아웃, 스타일(css) 적용하기</a>에서 적용법을 확인할 수 있었다.</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://chinsun9.github.io/2020/11/12/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/">hexo icarus 테마에 커스텀 레이아웃, 스타일(css) 적용하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://hangack.github.io/2021/11/25/Blog/Setting/hexo-blog-clone-theme/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>블로그 댓글 utterances 사용하기</title>
      <link>https://hangack.github.io/2021/11/24/Blog/Setting/hexo-blog-utterances/</link>
      <guid>https://hangack.github.io/2021/11/24/Blog/Setting/hexo-blog-utterances/</guid>
      <pubDate>Tue, 23 Nov 2021 21:17:54 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;utterances-세팅&quot;&gt;&lt;a href=&quot;#utterances-세팅&quot; class=&quot;headerlink&quot; title=&quot;utterances 세팅&quot;&gt;&lt;/a&gt;utterances 세팅&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://utteranc.</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="utterances-세팅"><a href="#utterances-세팅" class="headerlink" title="utterances 세팅"></a>utterances 세팅</h2><p><a href="https://utteranc.es/">utterances</a>에 들어가서 설명을 읽어보는게 좋다.</p><h3 id="github-repo-생성"><a href="#github-repo-생성" class="headerlink" title="github repo 생성"></a>github repo 생성</h3><p>사용하기 위해 개인 github에 comment용 <strong>public</strong> repository를 생성한다.</p><center><img src="\images\2111\hexo_blog_utterances\new repo.png"></center><p>굳이 repo를 생성하고 싶지 않다면 userID.github.io repo를 사용해도 된다.</p><h3 id="app-설치"><a href="#app-설치" class="headerlink" title="app 설치"></a>app 설치</h3><p><a href="https://github.com/apps/utterances">utterances app</a>에 들어가서 github에 app을 설치하자.<br>나는 comment가 들어갈 repo인 <code>hangack_blog_comment</code>만 지정했다.</p><h3 id="요소-설정하기"><a href="#요소-설정하기" class="headerlink" title="요소 설정하기"></a>요소 설정하기</h3><p><code>repo:</code>박스에 위에서 생성한 개인 <code>userID/repoName</code>을 입력한다.</p><center><img src="\images\2111\hexo_blog_utterances\issue mapping.png"></center><p><strong>Blog Post ↔️ Issue Mapping</strong> 방식은 현재 상황엔 별로 중요하지 않지만 개인 세팅에 따라 반드시 특정 세팅을 지정할 필요도 있을 것이다.</p><ol><li>pathname<ul><li>포스트의 URI로 issue가 생성된다. URI가 바꼈을 때 문제가 될지도?</li></ul></li><li>URL<ul><li>URL 기준으로 생성</li></ul></li><li>title<ul><li>포스트 제목</li></ul></li><li>og:title<ul><li>open_graphic 제목</li></ul></li><li>Specific issue number<ul><li>이슈 번호를 생성해서 작성된다.</li></ul></li><li>specific term<ul><li>포스트 제목에 기입된 특정 단어를 기준으로 작성된다.</li></ul></li></ol><h2 id="댓글-위젯-넣기"><a href="#댓글-위젯-넣기" class="headerlink" title="댓글 위젯 넣기"></a>댓글 위젯 넣기</h2><h3 id="utterances에서-제안된-방식"><a href="#utterances에서-제안된-방식" class="headerlink" title="utterances에서 제안된 방식"></a>utterances에서 제안된 방식</h3><p>테마 등 설정을 전부 끝냈다면 <strong>Enable Utterances</strong> 분류에 script 코드가 생겼을 것이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://utteranc.es/client.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">repo</span>=<span class="string">&quot;userID/repoName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">issue-term</span>=<span class="string">&quot;pathname&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">theme</span>=<span class="string">&quot;github-light&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">async</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 코드를 post마다 넣어주면된다.</p><p>hexo의 경우엔 post.md 혹은 draft.md로 불러올 수 있겠지</p><h3 id="hexo-icarus에서"><a href="#hexo-icarus에서" class="headerlink" title="hexo icarus에서"></a>hexo icarus에서</h3><p>icarus에서는 utterances 타입을 지원하기에 <code>_config.theme.yml</code>에 comment 항목을 찾아서 아래 형식대로 기입하자.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">utterances</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">userID/repoName</span></span><br><span class="line">    <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">    <span class="attr">theme:</span> <span class="string">github-light</span></span><br><span class="line">    <span class="attr">crossorigin:</span> <span class="string">anonymous</span></span><br></pre></td></tr></table></figure><h3 id="어-안되잖아"><a href="#어-안되잖아" class="headerlink" title="어? 안되잖아?"></a>어? 안되잖아?</h3><p><code>utterances.json</code> 파일을 뜯어봤더니 crossorigin 요소에 대한 처리 방식이 없었다.</p><p>반면, <code>utterances.js</code> 파일에선 <code>&quot;crossorigin&quot;: &quot;anonymous&quot;</code>로 기본값을 지정했기에 문제없다 판단하고 요소를 제거</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">utterances</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">userID/repoName</span></span><br><span class="line">    <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">    <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure><p>댓글댓글단다</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://chinsun9.github.io/2021/06/08/blog-comment-migration-from-disqus-to-utterances/">disqus에서 utterances로 바꾸기</a></li><li><a href="http://astrod.github.io/etc/2018/05/28/utterances-%EC%A0%81%EC%9A%A9/">utterances 적용</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://hangack.github.io/2021/11/24/Blog/Setting/hexo-blog-utterances/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo blog img(avatar, favicon, logo) 변경하기</title>
      <link>https://hangack.github.io/2021/11/23/Blog/Setting/hexo-blog-img/</link>
      <guid>https://hangack.github.io/2021/11/23/Blog/Setting/hexo-blog-img/</guid>
      <pubDate>Tue, 23 Nov 2021 02:59:56 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Hexo-이미지-변경&quot;&gt;&lt;a href=&quot;#Hexo-이미지-변경&quot; class=&quot;headerlink&quot; title=&quot;Hexo 이미지 변경&quot;&gt;&lt;/a&gt;Hexo 이미지 변경&lt;/h2&gt;&lt;p&gt;hexo blog에서 사용하는 avatar, favicon, </description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Hexo-이미지-변경"><a href="#Hexo-이미지-변경" class="headerlink" title="Hexo 이미지 변경"></a>Hexo 이미지 변경</h2><p>hexo blog에서 사용하는 avatar, favicon, logo 등을 변경하는 방법은 간단하게 <code>public\img</code> 경로의 파일명을 그대로 이미지만 교체해주면 된다.</p><p><img src="/images\2111\Hexo_blog_img/public.png" alt="public"></p><h3 id="Hexo-clean의-경우-문제점"><a href="#Hexo-clean의-경우-문제점" class="headerlink" title="Hexo clean의 경우 문제점"></a><code>Hexo clean</code>의 경우 문제점</h3><p>하지만 블로그 관리 초기라 설정을 변경하거나 이미지를 교체하는 등 파일 첨삭이 있을 때마다 <code>$ hexo clean</code> 명령어를 남발하는데,<br>clean은 캐쉬 파일인 public 폴더를 통으로 삭제하는 명령어다.</p><p>그럼 캐쉬를 지울 때마다 img 내의 이미지들을 수정해줘야 한다.</p><p>난 이런 번거로운 일은 못한다.</p><p>그렇기에 <code>$ hexo g</code>의 작동방식을 알아야한다.<br>generate는 불러올 theme와 user의 config를 유지한 채, user의 source 디렉토리에서 UnderBar( <code>_</code> ) 표시된 경우나 <code>_posts</code>같은 특수한 경우를 제외하고 public 폴더에  그대로 붙여넣는 특징이 있다.</p><p>그럼 해결법은 간단하다. <code>source\img</code>경로를 만들어서 원하는 파일을 <code>_config.theme.yml</code>에서 설정한 파일명 그대로 넣어두면 끝이다.</p><p><img src="/images\2111\Hexo_blog_img/source.png" alt="source"></p><h3 id="config-theme-yml-설정-변경"><a href="#config-theme-yml-설정-변경" class="headerlink" title="_config.theme.yml 설정 변경"></a>_config.theme.yml 설정 변경</h3><p>경로를 수정하기 전에 각각의 이미지가 어떤 요소를 뜻하는지 알아야한다.</p><p>_config.theme.yml을 직접 뜯어보는걸 권장하지만 간단히 내가 설정한 4놈을 icarus 기준으로 설명하자면,</p><ul><li>avatar: 블로그 좌측에 표시된 블로거의 아바타</li><li>favicon: 브라우저 열린 page 바에 표시되는 블로그 아이콘</li><li>logo: 블로그 상단의 대각선으로 Han-Gack</li><li>og_image: open_graph에 걸리는 이미지<ul><li>open_graph: 외부 사이트에서 링크됐을 때 정보를 알려주기 위해 설정하는 옵션, 이미지 파일명이 기본값이랑 다르다면 <code>head - open_graph</code> 탭의 <code>image</code>를 설정하면 된다.</li></ul></li></ul><p>명칭에 대한 정보를 알았으니 yml 파일에서 파일명과 확장자명에 주의하며 사용할 옵션 위주로 수정하면된다.</p>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://hangack.github.io/2021/11/23/Blog/Setting/hexo-blog-img/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo blog sidebar 트래킹과 post 개별 설정</title>
      <link>https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-sidebar-sticky/</link>
      <guid>https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-sidebar-sticky/</guid>
      <pubDate>Mon, 22 Nov 2021 11:42:59 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;toc&quot;&gt;&lt;a href=&quot;#toc&quot; class=&quot;headerlink&quot; title=&quot;toc&quot;&gt;&lt;/a&gt;toc&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hangack.github.io/2021/11/22/Blog/Setting/hexo-bl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h2><p><a href="https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-toc/">Hexo toc(Katalog) 사용하기</a>에서 toc(Katalog)를 적용해 봤다.</p><h2 id="sidebar-sticky"><a href="#sidebar-sticky" class="headerlink" title="sidebar sticky"></a>sidebar sticky</h2><p>하지만 sidebar가 트래킹되지 않아 불편하다.<br>현재 사용하는 icarus테마는 <code>_config.theme.yml</code>에서 다양한 옵션을 제공한다. 그 중 <code>sidebar - left(or right) - sticky</code>옵션이 트래킹 옵션이다.</p><p>위젯 박스를 왼쪽만 사용하고 있으니<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">    <span class="comment"># Left sidebar configurations</span></span><br><span class="line">    <span class="attr">left:</span></span><br><span class="line">        <span class="comment"># Whether the sidebar sticks to the top when page scrolls</span></span><br><span class="line">        <span class="attr">sticky:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><br>로 설정하면 언제 어디서나 sidebar가 트래킹된다.</p><p>그렇다 어디서든 언제언제까지나 트래킹되는게 문제다.</p><p>원하는 방식은 특정 post를 읽을 때만 트래킹되는 방식이었으니 _config.theme.yml의 sticky 값은 다시 <code>false</code>로 돌려놓자.</p><h2 id="post-개별-설정"><a href="#post-개별-설정" class="headerlink" title="post 개별 설정"></a>post 개별 설정</h2><p>우리에겐 scaffolds 디렉토리 내 post 기본 양식 설정과 <code>_config.theme.yml</code>에서 가져올 위젯 및 sidebar의 yml 양식이 있다.</p><p>그리고 이전 포스트에서 링크한 <a href="https://hexo.io/ko/docs/front-matter.html">Hexo Front-matter</a>에선<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><br>내부 양식이 <code>yaml</code>이라 한다.</p><p>넣을 코드와 코드를 넣을 공간이 준비되었고 작성한 양식을 불러올 방법도 있으니 우리는 <code>draft.md</code>와 <code>post.md</code>를 수정하기만 하면 된다.<br><del>설정 전에 작성한 포스트가 많다면..야 너두?</del></p><p>toc 트래킹만 사용한다면 아래 코드를 넣어주면 된다.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">left:</span></span><br><span class="line">    <span class="attr">sticky:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">toc</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">index:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><p>개별 설정의 단점은 _config의 모든 설정을 불러오지는 않기 때문에 각종 옵션을 넣는다면<br><figure class="highlight yaml"><figcaption><span>draft.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"> <span class="bullet">-</span> </span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> </span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">left:</span></span><br><span class="line">    <span class="attr">sticky:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">profile</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">social_links:</span></span><br><span class="line">        <span class="attr">Github:</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">&#x27;https://github.com/hangack&#x27;</span></span><br><span class="line">        <span class="attr">Youtube:</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-youtube</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">&#x27;https://www.youtube.com/channel/UCQuHrr7-mBtutw9V94XGH-g&#x27;</span></span><br><span class="line">        <span class="attr">Twitch:</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-twitch</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">&#x27;https://www.twitch.tv/hangack&#x27;</span></span><br><span class="line">        <span class="attr">Steam:</span></span><br><span class="line">            <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-steam</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">&#x27;https://steamcommunity.com/id/HanGack/&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">toc</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">index:</span> <span class="literal">false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><br>Wa!</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://hexo.io/ko/docs/front-matter.html">Hexo Front-matter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-sidebar-sticky/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo toc(Katalog) 사용하기</title>
      <link>https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-toc/</link>
      <guid>https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-toc/</guid>
      <pubDate>Mon, 22 Nov 2021 00:39:47 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Katalog-toc&quot;&gt;&lt;a href=&quot;#Katalog-toc&quot; class=&quot;headerlink&quot; title=&quot;Katalog? toc?&quot;&gt;&lt;/a&gt;Katalog? toc?&lt;/h2&gt;&lt;p&gt;TOC: Table of contents, 목차&lt;/p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Katalog-toc"><a href="#Katalog-toc" class="headerlink" title="Katalog? toc?"></a>Katalog? toc?</h2><p>TOC: Table of contents, 목차</p><p>위키 등에서 주로 사용되는 index식 목차이며 클릭 시 해당하는 열로 이동하는 메커니즘이라 인식하면 된다.</p><h3 id="Markdown에서-목차"><a href="#Markdown에서-목차" class="headerlink" title="Markdown에서 목차"></a>Markdown에서 목차</h3><p>html에서는 <code>&lt;h#&gt;</code>을 사용해서 목차를 표현하지만 md에서 목차 구분은 <code>#</code>의 개수로 한다.</p><p>기본값으로 # 1개는 post 제목 크기와 동일해, 나는 h2: <code>##</code>부터 사용한다.</p><p>h4: <code>####</code>부터는 기본 text 크기와 구분하기 어려우며 h5는 기본 텍스트와 크기가 같을 것이다.</p><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><p>h4</p><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><p>h5</p><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><p>h6</p><h6 id="h7"><a href="#h7" class="headerlink" title="# h7"></a># h7</h6><p>h7</p><h6 id="h8"><a href="#h8" class="headerlink" title="## h8"></a>## h8</h6><p>h8</p><p>테스트로 h8까지 작성해봤는데, hexo에선 h6까지만 인식한다.</p><h2 id="toc-사용하기"><a href="#toc-사용하기" class="headerlink" title="toc 사용하기"></a>toc 사용하기</h2><p>Toc을 지원하는 테마를 사용한다면,<br>Front-matter에 <code>toc: true</code>를 넣어줌으로 사용할 수 있다.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="section">toc: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>위 Front-matter는 나의 page.md 설정값</p><h3 id="toc-적용-확인"><a href="#toc-적용-확인" class="headerlink" title="toc 적용 확인"></a>toc 적용 확인</h3><p><code>hexo s</code>로 local 확인을 하거나 <code>hexo g -d</code>로 배포해서 toc 정상 적용되었는지 확인해본다.</p><center><img src="\images\2111\blogToc\Katalog1.png" alt="TOC"></center><h3 id="icarus에서-세부-설정"><a href="#icarus에서-세부-설정" class="headerlink" title="icarus에서 세부 설정"></a>icarus에서 세부 설정</h3><p>icarus theme는 config에 toc type을 설정할 수 있도록 기본값이 작성되어있다.</p><p>Hexo icarus TOC default값<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Table of contents widget configurations</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">    <span class="comment"># Where should the widget be placed, left sidebar or right sidebar</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">toc</span></span><br><span class="line">    <span class="comment"># Whether to show the index of each heading</span></span><br><span class="line">    <span class="attr">index:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Whether to collapse sub-headings when they are out-of-view</span></span><br><span class="line">    <span class="attr">collapsed:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Maximum level of headings to show (1-6)</span></span><br><span class="line">    <span class="attr">depth:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>position: Katalog box 위치<br>index: Katalog box 목차 앞에 숫자를 표현할 지 (ex: <code>1.2 icarus에서 세부 설정</code>)<br>collapsed: 하위목차 간략화<br>depth: #번째 하위 목차까지 표시</p><p>＊2021/11/20 기준 내 설정<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Table of contents widget configurations</span></span><br><span class="line"><span class="bullet">-</span></span><br><span class="line">    <span class="comment"># Where should the widget be placed, left sidebar or right sidebar</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">toc</span></span><br><span class="line">    <span class="comment"># Whether to show the index of each heading</span></span><br><span class="line">    <span class="attr">index:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Whether to collapse sub-headings when they are out-of-view</span></span><br><span class="line">    <span class="attr">collapsed:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Maximum level of headings to show (1-6)</span></span><br><span class="line">    <span class="attr">depth:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>depth를 6으로 설정해주면 위에서 test한 h6까지 katalog에 표시될 것</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://hexo.io/ko/docs/front-matter.html">Hexo Front-matter</a></li><li><a href="https://hexo.io/ko/docs/helpers.html">Hexo Helpers</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://hangack.github.io/2021/11/22/Blog/Setting/hexo-blog-toc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hexo Blog Category 사용하기</title>
      <link>https://hangack.github.io/2021/11/21/Blog/Setting/hexo-blog-category/</link>
      <guid>https://hangack.github.io/2021/11/21/Blog/Setting/hexo-blog-category/</guid>
      <pubDate>Sat, 20 Nov 2021 23:45:32 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Category&quot;&gt;&lt;a href=&quot;#Category&quot; class=&quot;headerlink&quot; title=&quot;Category&quot;&gt;&lt;/a&gt;Category&lt;/h2&gt;&lt;center&gt;&lt;img src=&quot;\images\2111\Heox_blog_Category</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><center><img src="\images\2111\Heox_blog_Category\category.png" alt="ㅏㅏ 이것이 Category란 것이다"></center><h2 id="Hexo-Category-설정하기"><a href="#Hexo-Category-설정하기" class="headerlink" title="Hexo Category 설정하기"></a>Hexo Category 설정하기</h2><p>Hexo를 처음 사용한다면 Front-matter 영역에는 기본적으로 title, date, tags만 나와있을 것이다.</p><p>순서는 상관 없으니 <code>categories:</code>를 추가하자.<br>참고로 <code>categories</code>와 <code>tags</code>는 <code>-</code> 로 관리할 수 있다.<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"> <span class="bullet">-</span> </span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> </span><br></pre></td></tr></table></figure></p><p>※ 태그와 카테고리의 가장 큰 차이점: 카테고리는 하위 <code>-</code>로 하위 카테고리가 생성되지만, 태그는 하위 태그의 개념이 없다.</p><h3 id="scaffolds로-post-기본설정하기"><a href="#scaffolds로-post-기본설정하기" class="headerlink" title="scaffolds로 post 기본설정하기"></a>scaffolds로 post 기본설정하기</h3><p>포스팅이 한두개도 아니고 포스팅을 할 때마다 <code>categories:</code>를 넣어주는건 너무나도 귀찮은 방식이다.</p><p><code>\scaffolds\post.md</code>를 원하는 형식으로 수정하면 <code>hexo new</code>명령어로 post를 생성할 때 불러오는 기본 양식을 바꿀 수 있다.</p><p>만약 <a href="https://hangack.github.io/2021/11/16/Blog/hexo-post-private/">Hexo draft</a>로 신규 post를 관리한다면 <code>draft.md</code>를 수정해주면 된다.</p><h2 id="외부링크"><a href="#외부링크" class="headerlink" title="외부링크"></a>외부링크</h2><ul><li><a href="https://hexo.io/ko/docs/front-matter.html">Hexo Front-matter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/">설정</category>
      
      
      <category domain="https://hangack.github.io/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/">블로그</category>
      
      <category domain="https://hangack.github.io/tags/%EC%84%A4%EC%A0%95/">설정</category>
      
      <category domain="https://hangack.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://hangack.github.io/2021/11/21/Blog/Setting/hexo-blog-category/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

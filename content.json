{"pages":[{"title":"유한각(hangack)","text":"대학? 기초통계부터 선형대수에 푸리에 급수, 기초물리부터 공기 역학, 화학은..분명 했지만, 전산처리를 위한 간단한 CS(포트란, 약간의 python)도 조금 다뤘다.참 다양하게 배웠지만 CS 늦게 접한게 아쉽 간단한 편집용 프리미어와 다비치 리졸브 fact) 다비치 리졸브가 메인 eu) 공짜 개인 유튜브? 주로 마이너한 게임 중에서도 진심이었던 게임 공략 위주 현직: Professional White-Hand 작업환경사용한 언어 FORTRAN C Python math numpy pandas pandas_gbq Matplotlib plotly time datetime re beautifulsoup4 request selenium psycogpg2 google-api-core oauth2 pyinstaller pyspark npm nodejs PL/SQL PostgreSQL BigQuery java js: JavaScript jsp: JavaServer Pages html: Hypertext Markup Language CSS: Cascading Style Sheets md: Markdown mathjax R 사용한 개발환경Local Oracle Oracle VM VirtualBox Linux ubuntu Oracle SQL Developer Visual Studio Anaconda JupyterLab Jupyter Notebook cmd powershell Eclipse Apache Tomcat JDBC: Oracle - Java Database Connectivity PyCharm git VS Code Rstudio Rtools nncron GCP: Google Cloud Platform 온라인 Google Colab Kaggle Notebook 사용한 생산성 툴 MS Office OBS: Open Broadcaster Software Adobe Premiere Pro DaVinci Resolve SPSS: Statistical Package for the Social Sciences MATLAB GrADS: Grid Analysis and Display System 하드웨어desktop1 windows 10 시스템 Ryzen 1700 ASUS ROG STRIX GTX1080 DDR4 16GB$\\times$2 저장공간 500GB SSD1 1TB SSD2 2TB HD1 5TB 외장HD1 주변기기 모니터 Dell S2417DG Dell U2417H 키보드: 레오폴드 FC750 흑축 (어디갔지?) 리얼포스 R2 (손가락 아파서 안씀) 커스텀 60% (납땜 실력 부족으로 사망) MS 디자이너 블루투스 Deck북선 은축 가공목 팜레스트: 없으면 손목 아픔 마우스 R.A.T 7 (분해하다 사망) 로지텍 G pro HERO (단선) MS 디자이너 블루투스 CM MM710 MAXTILL 강화유리 마우스패드: 교체하기 싫어서 강화유리 씀 음향 Yamaha AG06 헤드폰 AKG Q701 (우측 유닛 사망) ATH-M50x (분양) Sennheiser MOMENTUM AKG K612 Pro (3일차 한줄평: 난 굉장히 별로) 헤드셋 ATH-ADG1X (좌측 유닛 시한부) 마이크 SHURE SM58 laptop몰?루 Surface Pro 3 (리퍼받고 분양) 취미게임 좋아하는 게임 <American McGee’s Alice>. 게임ost &amp; Newage cd 수집 제일 아끼는 컬렉션 <TALES WEAVER ORIGINAL SOUNDTRACK +PLUS(4CD)> 서브컬처<Baccano!> <루팡 The 3rd> 같은거 좋아함 해외여행자유여행 미국 1개월 아시아권 유저들과 게임 브리핑 가능한 간단 영어 회화 일본 3박4일 여고생짱 말투의 간단 일본 회화 패키지 캄보디아 6박7일 외부링크 github utube contect email hangack7@gmail.com","link":"/about/index.html"}],"posts":[{"title":"Hexo 블로그 about 페이지 생성하기","text":"icarus 테마를 사용하다가 상단의 About이 있지만 경로를 찾지 못해 about 페이지를 만들어봤다. hexo에서는 특정 경로를 어느 페이지에서든 진입할 수 있게 테마 옵션에서 navbar를 지원한다. icarus 테마는 기본적으로 about 페이지 경로가 설정되어있지만 _config.theme.yml에서 표시할 장소에 About(text): /about(경로)을 추가한다.123456789# Page top navigation bar configurationsnavbar: # Navigation menu items menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /about 이런식으로 menu바 설정을 했으면 해당 URI에 대응할 수 있는 경로를 만들어줘야한다. source경로 아래에 원하는 경로를 만들어주는 page layout을 이용해서 about 경로를 생성하자.1$ hexo new page about 위 명령어가 정상 작동되었으면 /about 경로가 생성되고 그 아래 index.md 파일도 따라 왔을것이다.index.md가 about에 대한 page로 포스트 작성하듯 원하는 내용을 작성하면된다. 외부링크 How to add route for Hexo?","link":"/2021/11/17/Blog/Hexo-blog-page-about/"},{"title":"Hexo 블로그 Local 경로 이미지 삽입하기","text":"markdown 문법으로 이미지를 삽입한다면 아래 링크를 참조Markdown 하이퍼링크 이미지 넣기 ※ hexo URIhexo blog에서 post를 작성할 때 기본 path URI를 알아두면 편리하게 주소를 입력할 수 있다.hexo URI는 기본적으로 source 폴더이므로 source 이후의(/경로/파일.확장자)만 입력해서 Local 주소를 넣을 수 있다. Hexo에서 지정한 default 이미지 폴더는 /source/images이다. Hexo 기본 경로를 따른다면1![alt](/images/dir/file_name.extension)으로 삽입하면된다. 외부링크 Hexo Asset Folders","link":"/2021/11/19/Blog/Hexo-image/"},{"title":"Hexo 포스트 비공개로 설정하기","text":"UnderBar( _ ) 사용하기UnderBar( _ )를 title 앞에 붙여주면 hexo에서 private post로 인식하고 배포하지 않는다. _drafts 폴더로 관리scaffolds 폴더에 new post로 생성되는 포스트의 기본 [layout]을 저장할 수 있다._config의 default값은 post로 아래 명령어에 [layout]을 지정하지 않는다면 new post는 post layout으로 생성된다1$ hexo new [layout] &lt;title&gt; draft layout으로 new post를 생성하면 _drafts 폴더에 post가 생성되는데, post title 앞에 UnderBar가 없더라도 private post로 인식된다.layout을 draft로 지정하면 _drafts 폴더 하위에 new post가 생성된다.1$ hexo new draft &lt;title&gt; 외부링크 Hexo 명령어","link":"/2021/11/16/Blog/hexo-post-private/"},{"title":"plotly 동적 그래프 웹페이지에 삽입하기","text":"plotly에 그래프 업로드Kaggle_Survey01: Pie [Plotly]에서 작성한 plotly chart는 동적 그래프라 이미지로 사용하긴 아쉽고 github page의 ipynb에서도 동작하지 않는다. 그래프를 끌어오기 위해 plotly 홈페이지 저장환경을 이용할 예정이다. chart_studio 설치우선 사용할 작업환경에 chart_studio 라이브러리를 설치해주자. 1$ pip i chart_studio ※ jupyter 로컬 작업환경을 사용한다면 anaconda prompt로 설치 chart_studio는 plotly 그래프를 plotly 홈페이지에 업로드하고 원한다면 html iframe 태그로 변환까지 해주는 녀석이다. plotly Access Keyplotly 개인 공간에 업로드 할 예정이니 plotly 회원가입을 진행하자. [profile] - [API keys] 에서 Access key를 얻어온다. 위에서 설치한 라이브러리를 import하고 API key를 사용해 계정에 접근하자 12import chart_studiochart_studio.tools.set_credentials_file(username='유저명', api_key='접근키') 성공적으로 연동했다면 저장할 figure 객체와 저장될 파일명을 넣어준다. 1chart_studio.plotly.plot(fig, filename = '파일명', auto_open=True) 'https://plotly.com/~hangack/1/' out된 url에 들어가보면 그래프가 업로드 되었을거다. 웹페이지에 그래프 끌어오기원래 목적이었던 웹페이지에서 그래프를 사용해보자. html iframeiframe(inline frame) html 형식을 수작업으로 작성해도 되겠지만 chart_studio 모듈 내 라이브러리에서도 변환할 수 있다. 1chart_studio.tools.get_embed('https://plotly.com/~hangack/1/#/') '&lt;iframe id=&quot;igraph&quot; scrolling=&quot;no&quot; style=&quot;border:none;&quot; seamless=&quot;seamless&quot; src=&quot;https://plotly.com/~hangack/1.embed&quot; height=&quot;525&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt;' 1&lt;iframe id=&quot;igraph&quot; scrolling=&quot;no&quot; style=&quot;border:none;&quot; seamless=&quot;seamless&quot; src=&quot;https://plotly.com/~hangack/1.embed&quot; height=&quot;525&quot; width=&quot;100%&quot;&gt;&lt;/iframe&gt; iframe(inline frame): hexo tag plugin iframehexo 환경에서 작성중이라면 기본 plugin인 tag 문법으로도 iframe을 삽입할 수 있다. 1{% iframe https://plotly.com/~hangack/1.embed %} 외부링크 Plotly 그래프 깃헙 블로그에 올리기","link":"/2021/11/30/Blog/iframe-plotly/"},{"title":"Hexo blog markdown 수식 표현 mathjax","text":"분명 MarkDown math tutorial대로 수식을 작성하고 Ipython notebook에서도 정상적으로 출력되는걸 확인했지만,Hexo post는 아래처럼 읽어내지를 못한다. Hexo plugin 설치다른 블로그 모듈을 사용하는 방법도 있지만, Hexo를 설치했으니 그대로 사용하기 위해 우선 구글링으로 해결해본다.검색 결과 hexo에서 사용하는 랜더링 모듈에 수식표현 문법이 포함되어 있지 않아서 발생하는 문제였다. 기본 renderer 교체Hexo의 기본 renderer인 marked를 제거하고 mathjax를 지원하는 kramed로 교체한다. 12$ npm uninstall hexo-renderer-marked --save$ npm install hexo-renderer-kramed --save 설치가 완료되면 ..\\node_modules\\hexo-renderer-kramed\\lib\\renderer.js에서 formatText 함수의 반환값을 변경해준다.123456// Change inline math rulefunction formatText(text) { // Fit kramed's rule: $$ + \\1 + $$ return text;// return text.replace(/`\\$(.*?)\\$`/g, '$$$$$1$$$$'); // (: default)} mathjax 설치kramed 랜더러에 설정값을 넣어줄 mathjax 랜더러를 설치한다. 1$ npm install hexo-renderer-mathjax --save 마찬가지로 ..\\node_modules\\hexo-renderer-mathjax\\mathjax.html에서 스크립트 source url을 교체한다.123&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;&lt;!-- &lt;script src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt; --&gt; &lt;!--: default --&gt; Mathjax 활성이제 사용하고 있는 _config.theme.yml에서 mathjax를 활성화 시켜주면된다. 123mathjax: enable: true# mathjax: false # : default markdown 문법을 사용할 예정이라 문법 추가 설정은 하지 않는다. 예제오… 외부링크 hexo-math Hexo 블로그-mathjax","link":"/2021/11/13/Blog/Setting/Hexo-blog-mathjax/"},{"title":"Hexo 테마변경(Feat. icarus)","text":"Hexo 블로그 만들기 테마 선택hexo themes에서 다양한 오픈소스 테마를 얻을 수 있다. icarus 시작하기icarus에서 지원하는 여러 테마중에 바닐라 Icarus로 설정할 예정이다. 테마를 설치하면서 Error 메세지를 보고 해당하는 hexo 랜더러 플러그인을 npm으로 설치해줘도 문제없지만,에러 메세지에 알러지가 있다면1$ npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3위 명령어로 우선 CSS 프레임워크 bulma-stylus와 inferno 랜더러 플러그인을 받아오자. icarus 테마 페이지에서 install via NPM 탭 명령어로 icarus 테마 기본설정을 설치한다1$ npm install -S hexo-theme-icarus 이카루스 테마를 설치했으면 _config.yml의 Extensions 영역의 theme 값을 변경해준다.1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus hexo s로 local에서 적용을 확인하고 hexo g -d로 적용, 배포를 진행하면된다. 추가링크 Git clone으로 theme 받기","link":"/2021/11/02/Blog/Setting/Hexo-blog-theme/"},{"title":"github 블로그 만들기(Hexo)","text":"Hexo 설치Node.js 설치터미널로 hexo 언어를 설치하기 위해 툴을 받아올 nodejs를 설치한다.이 때, 버그 활발히 픽스가 진행중인 신버전보다 구버전 넘버를 권장한다. Node.js: https://nodejs.org/en/ node를 설치할 때 path 설정(시스템 환경 변수)은 필수로 체크하며, 프로그램의 각종 오류를 c/c++로 해결하는 패치를 배포하기 때문에 chocolatey; c/c++ 환경 변수 설정도 체크하는걸 권장한다.(chocolatey 설정이 좀 오래 걸리더라) node가 정상적으로 동작하는걸 확인하기 위해 다음 명령를 터미널에 입력해 설치된 node.js의 버전을 확인할 수 있다.1$ node -v #각종 노드 명령어 확인은 다음 명령어로 확인할 수 있다.1$ npm #노드의 동작을 확인했으면 node.js 명령어를 이용해 원래 목적이었던 Hexo 언어를 설치한다1$ npm install -g hexo-clihexo 툴을 이용해 블로그 관리 툴을 불러와서 임의의 디렉토리명으로 저장한다.1$ hexo init 디렉토리명(myblog)(hexo툴로 불러온 디렉토리명은 myblog로 통일해서 부르겠다) myblog 디렉토리로 진입하거나 Pycharm 등의 편집 프로그램을 통해 진입한 뒤 git bash에 다음 명령어를 입력한다.123$ npm install$ npm install hexo-server --save$ npm install hexo-deployer-git --save서버 생성과 배포를 위한 툴이 설치되었으니 서버 작동의 확인을 위해1$ hexo server를 입력한 뒤 나오는 http 로컬 주소로 진입한다.myblog를 github에 백업하려면 myblog repository를 생성하여 백업을 진행한다. Hexo 블로그 배포하기로컬 주소가 정상 작동되는게 확인됐으면 블로그를 온라인으로 배포해야하는데, 이 역할을 github에 특정 repository를 생성하여 진행한다.repository 명은 [유저아이디.github.io]으로 생성한다. github.io repository를 만들었으면 해당 repository에 블로그 형식을 저장하고 배포 주소를 설정해야한다._config.yml 파일에 진입해서 URL 정보와 깃허브 연동 주소를 설정한다.12#URLurl: https://유저아이디.github.io12345# Deploymentdeploy: type: git repo: https://github.com/유저아이디/유저아이디.github.io.git branch: main변경된 항목대로 서버를 생성하기 위해1$ hexo generate를 입력하고1$ hexo server로 정상 적용되었는지 로컬에서 확인한다.정상적으로 적용되었다면 사이트 배포를 위해1$ hexo deploy명령어를 사용해 사이트를 배포한다.사이트 주소는 위 #URL에서 입력한 [https://유저아이디.github.io]와 동일하다. 외부링크 hexo docs(sub kor)","link":"/2021/11/01/Blog/Setting/Hexo-blog/"},{"title":"Pycharm 터미널 git bash로 변경하기","text":"Github 업로드와 blog 작업을 위해 pycharm을 사용하고 있기 때문에 pycharm 터미널을 Windwos cmd에서 git bash로 변경할 필요가 생겼다. git 설치경로 파악하기우선 git bash(혹은 sh)를 불러오기 위해 git 설치경로를 파악해야한다.내 경우는 E 드라이브에 설치했기에 E:\\Sadness\\Git가 Git 경로다. Terminal 변경하기pycharm 설정에서[settings] - [Tools] - [Terminal] 경로에서[Application Settings] - [Shell path: ]를 아래의 두줄 중 하나로 변경해준다.12&quot;(git경로)\\bin\\bash.exe&quot; --login&quot;(git경로)\\bin\\sh.exe&quot; --login Shell integration과 Activate virtualenv가 체크 해제되어있다면 체크해주자. 설정이 끝나면 Pycharm 하단 Terminal에서 git bash를 기본 값으로 사용하게된다. 외부링크 PyCharm 터미널 설정","link":"/2021/10/31/Blog/Setting/Pycharm-Terminal-git/"},{"title":"git bash 연동 및 연동해제","text":"Git Bash: GitHub 연동github와 컴퓨터를 연동해주는 터미널인 git bash를 이용하기 위해 우선 git bash에 연동시킬 user명과 계정을 확인시켜줄 필요가 있다.12$ git config --global user.name &quot;user name&quot;$ git config --global user.email email@mail.com 위 명령어를 입력하고서 계정 연동이 필요한 작업을 하게되면 웹 브라우저 혹은 code를 통한 인증을 요구한다. Git Bash: 연동해제일반적으로 GitHub 관리는 개인 컴퓨터에서 진행하겠지만, 예외적으로 외부 컴퓨터에서 작업하게될 경우가 있을 수 있다.이런 경우 로그아웃을 해야하지만, 웹 페이지도 아닌 로컬에 입력된 정보에 연동을 끊는 방법이 필요하다. 자격증명제거[제어판] - [사용자 계정] - [자격 증명 관리] - [Windows 자격 증명] 순으로 진입하면 Git~ 으로 연동된 자격 증명을 확인 할 수 있다. 자격 증명 [제거]를 클릭하면 Git Bash에서 연동은 우선 해제된다. 하지만 문제가 하나 남게되는데, 첫 연동 이후엔 연동 정보가 캐쉬되어 이메일 추가 인증을 요구하지 않는다. cookie 제거자격 증명을 제거한 다음 hithub 엑세스에 사용한 웹 브라우저의 캐쉬를 삭제하면 다음 연동 때 cookie로 남긴 데이터가 없기 때문에 추가 인증을 요구한다. 외부에서 로그인 했을 경우엔 시크릿 모드를 쓰거나 발자취를 지우는게 보안상 중요.","link":"/2021/11/12/Blog/Setting/git-bash-%EC%97%B0%EB%8F%99/"},{"title":"Hexo Blog Category 사용하기","text":"Category Hexo Category 설정하기Hexo를 처음 사용한다면 Front-matter 영역에는 기본적으로 title, date, tags만 나와있을 것이다. 순서는 상관 없으니 categories:를 추가하자.참고로 categories와 tags는 - 로 관리할 수 있다.123456title: {{ title }}date: {{ date }}categories: - tags: - ※ 태그와 카테고리의 가장 큰 차이점: 카테고리는 하위 -로 하위 카테고리가 생성되지만, 태그는 하위 태그의 개념이 없다. scaffolds로 post 기본설정하기포스팅이 한두개도 아니고 포스팅을 할 때마다 categories:를 넣어주는건 너무나도 귀찮은 방식이다. \\scaffolds\\post.md를 원하는 형식으로 수정하면 hexo new명령어로 post를 생성할 때 불러오는 기본 양식을 바꿀 수 있다. 만약 Hexo draft로 신규 post를 관리한다면 draft.md를 수정해주면 된다. 외부링크 Hexo Front-matter","link":"/2021/11/21/Blog/Setting/hexo-blog-category/"},{"title":"블로그 테마 세부설정을 위한 clone theme","text":"문제 발생테마 스타일 커스텀을 하려 봤더니 Hexo v5 이후 방식인 npm으로 _config.icarus만 불러왔던 방식이 내 발목을 잡았다. theme를 처음부터 다시 받아야할까? 태초마을인가 그릉가? 테마 폴더 끌어오기그럴필욘 없고 themes 디렉토리에 테마 세부 설정을 위한 패키지만 받아오면 된다. 과거에 설정했던 테마 깃허브에 들어가서 Clone url을 받는다. 다음으로 \\themes\\ 경로에 $ git clone하면되지만, themes 폴더에 icarus 테마깔기에서 좋은 제안을 발견했다.1$ git clone --depth 1 https://github.com/ppoffice/hexo-theme-icarus.git 마지막으로 테마명을 일치시키기 위해 불러온 hexo-theme-icarus 디렉토리를 icarus로 변경해줬다. 가장 답답했던 페이지 가로축 범위 조정도 hexo icarus 테마에 커스텀 레이아웃, 스타일(css) 적용하기에서 적용법을 확인할 수 있었다. 외부링크 hexo icarus 테마에 커스텀 레이아웃, 스타일(css) 적용하기","link":"/2021/11/25/Blog/Setting/hexo-blog-clone-theme/"},{"title":"hexo blog img(avatar, favicon, logo) 변경하기","text":"Hexo 이미지 변경hexo blog에서 사용하는 avatar, favicon, logo 등을 변경하는 방법은 간단하게 public\\img 경로의 파일명을 그대로 이미지만 교체해주면 된다. Hexo clean의 경우 문제점하지만 블로그 관리 초기라 설정을 변경하거나 이미지를 교체하는 등 파일 첨삭이 있을 때마다 $ hexo clean 명령어를 남발하는데,clean은 캐쉬 파일인 public 폴더를 통으로 삭제하는 명령어다. 그럼 캐쉬를 지울 때마다 img 내의 이미지들을 수정해줘야 한다. 난 이런 번거로운 일은 못한다. 그렇기에 $ hexo g의 작동방식을 알아야한다.generate는 불러올 theme와 user의 config를 유지한 채, user의 source 디렉토리에서 UnderBar( _ ) 표시된 경우나 _posts같은 특수한 경우를 제외하고 public 폴더에 그대로 붙여넣는 특징이 있다. 그럼 해결법은 간단하다. source\\img경로를 만들어서 원하는 파일을 _config.theme.yml에서 설정한 파일명 그대로 넣어두면 끝이다. _config.theme.yml 설정 변경경로를 수정하기 전에 각각의 이미지가 어떤 요소를 뜻하는지 알아야한다. _config.theme.yml을 직접 뜯어보는걸 권장하지만 간단히 내가 설정한 4놈을 icarus 기준으로 설명하자면, avatar: 블로그 좌측에 표시된 블로거의 아바타 favicon: 브라우저 열린 page 바에 표시되는 블로그 아이콘 logo: 블로그 상단의 대각선으로 Han-Gack og_image: open_graph에 걸리는 이미지 open_graph: 외부 사이트에서 링크됐을 때 정보를 알려주기 위해 설정하는 옵션, 이미지 파일명이 기본값이랑 다르다면 head - open_graph 탭의 image를 설정하면 된다. 명칭에 대한 정보를 알았으니 yml 파일에서 파일명과 확장자명에 주의하며 사용할 옵션 위주로 수정하면된다.","link":"/2021/11/23/Blog/Setting/hexo-blog-img/"},{"title":"hexo blog sidebar 트래킹과 post 개별 설정","text":"tocHexo toc(Katalog) 사용하기에서 toc(Katalog)를 적용해 봤다. sidebar sticky하지만 sidebar가 트래킹되지 않아 불편하다.현재 사용하는 icarus테마는 _config.theme.yml에서 다양한 옵션을 제공한다. 그 중 sidebar - left(or right) - sticky옵션이 트래킹 옵션이다. 위젯 박스를 왼쪽만 사용하고 있으니12345sidebar: # Left sidebar configurations left: # Whether the sidebar sticks to the top when page scrolls sticky: true로 설정하면 언제 어디서나 sidebar가 트래킹된다. 그렇다 어디서든 언제언제까지나 트래킹되는게 문제다. 원하는 방식은 특정 post를 읽을 때만 트래킹되는 방식이었으니 _config.theme.yml의 sticky 값은 다시 false로 돌려놓자. post 개별 설정우리에겐 scaffolds 디렉토리 내 post 기본 양식 설정과 _config.theme.yml에서 가져올 위젯 및 sidebar의 yml 양식이 있다. 그리고 이전 포스트에서 링크한 Hexo Front-matter에선123------내부 양식이 yaml이라 한다. 넣을 코드와 코드를 넣을 공간이 준비되었고 작성한 양식을 불러올 방법도 있으니 우리는 draft.md와 post.md를 수정하기만 하면 된다.설정 전에 작성한 포스트가 많다면..야 너두? toc 트래킹만 사용한다면 아래 코드를 넣어주면 된다.12345678910---sidebar: left: sticky: truewidgets: - type: toc position: left index: falsetoc: true--- 개별 설정의 단점은 _config의 모든 설정을 불러오지는 않기 때문에 각종 옵션을 넣는다면draft.md123456789101112131415161718192021222324252627282930313233---title: {{ title }}date: {{ date }}categories: - tags: - sidebar: left: sticky: truewidgets: - type: profile position: left social_links: Github: icon: fab fa-github url: 'https://github.com/hangack' Youtube: icon: fab fa-youtube url: 'https://www.youtube.com/channel/UCQuHrr7-mBtutw9V94XGH-g' Twitch: icon: fab fa-twitch url: 'https://www.twitch.tv/hangack' Steam: icon: fab fa-steam url: 'https://steamcommunity.com/id/HanGack/' - type: toc position: left index: false - type: categories position: lefttoc: true---Wa! 외부링크 Hexo Front-matter","link":"/2021/11/22/Blog/Setting/hexo-blog-sidebar-sticky/"},{"title":"블로그 댓글 utterances 사용하기","text":"utterances 세팅utterances에 들어가서 설명을 읽어보는게 좋다. github repo 생성사용하기 위해 개인 github에 comment용 public repository를 생성한다. 굳이 repo를 생성하고 싶지 않다면 userID.github.io repo를 사용해도 된다. app 설치utterances app에 들어가서 github에 app을 설치하자.나는 comment가 들어갈 repo인 hangack_blog_comment만 지정했다. 요소 설정하기repo:박스에 위에서 생성한 개인 userID/repoName을 입력한다. Blog Post ↔️ Issue Mapping 방식은 현재 상황엔 별로 중요하지 않지만 개인 세팅에 따라 반드시 특정 세팅을 지정할 필요도 있을 것이다. pathname 포스트의 URI로 issue가 생성된다. URI가 바꼈을 때 문제가 될지도? URL URL 기준으로 생성 title 포스트 제목 og:title open_graphic 제목 Specific issue number 이슈 번호를 생성해서 작성된다. specific term 포스트 제목에 기입된 특정 단어를 기준으로 작성된다. 댓글 위젯 넣기utterances에서 제안된 방식테마 등 설정을 전부 끝냈다면 Enable Utterances 분류에 script 코드가 생겼을 것이다. 1234567&lt;script src=&quot;https://utteranc.es/client.js&quot; repo=&quot;userID/repoName&quot; issue-term=&quot;pathname&quot; theme=&quot;github-light&quot; crossorigin=&quot;anonymous&quot; async&gt;&lt;/script&gt; 이 코드를 post마다 넣어주면된다. hexo의 경우엔 post.md 혹은 draft.md로 불러올 수 있겠지 hexo icarus에서icarus에서는 utterances 타입을 지원하기에 _config.theme.yml에 comment 항목을 찾아서 아래 형식대로 기입하자. 123456comment: type: utterances repo: userID/repoName issue_term: pathname theme: github-light crossorigin: anonymous 어? 안되잖아?utterances.json 파일을 뜯어봤더니 crossorigin 요소에 대한 처리 방식이 없었다. 반면, utterances.js 파일에선 &quot;crossorigin&quot;: &quot;anonymous&quot;로 기본값을 지정했기에 문제없다 판단하고 요소를 제거 12345comment: type: utterances repo: userID/repoName issue_term: pathname theme: github-light 댓글댓글단다 외부링크 disqus에서 utterances로 바꾸기 utterances 적용","link":"/2021/11/24/Blog/Setting/hexo-blog-utterances/"},{"title":"Hexo toc(Katalog) 사용하기","text":"Katalog? toc?TOC: Table of contents, 목차 위키 등에서 주로 사용되는 index식 목차이며 클릭 시 해당하는 열로 이동하는 메커니즘이라 인식하면 된다. Markdown에서 목차html에서는 &lt;h#&gt;을 사용해서 목차를 표현하지만 md에서 목차 구분은 #의 개수로 한다. 기본값으로 # 1개는 post 제목 크기와 동일해, 나는 h2: ##부터 사용한다. h4: ####부터는 기본 text 크기와 구분하기 어려우며 h5는 기본 텍스트와 크기가 같을 것이다. h4h4 h5h5 h6h6 # h7h7 ## h8h8 테스트로 h8까지 작성해봤는데, hexo에선 h6까지만 인식한다. toc 사용하기Toc을 지원하는 테마를 사용한다면,Front-matter에 toc: true를 넣어줌으로 사용할 수 있다. 12345---title: {{ title }}date: {{ date }}toc: true--- 위 Front-matter는 나의 page.md 설정값 toc 적용 확인hexo s로 local 확인을 하거나 hexo g -d로 배포해서 toc 정상 적용되었는지 확인해본다. icarus에서 세부 설정icarus theme는 config에 toc type을 설정할 수 있도록 기본값이 작성되어있다. Hexo icarus TOC default값1234567891011# Table of contents widget configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: toc # Whether to show the index of each heading index: true # Whether to collapse sub-headings when they are out-of-view collapsed: true # Maximum level of headings to show (1-6) depth: 3 position: Katalog box 위치index: Katalog box 목차 앞에 숫자를 표현할 지 (ex: 1.2 icarus에서 세부 설정)collapsed: 하위목차 간략화depth: #번째 하위 목차까지 표시 ＊2021/11/20 기준 내 설정1234567891011# Table of contents widget configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: toc # Whether to show the index of each heading index: false # Whether to collapse sub-headings when they are out-of-view collapsed: false # Maximum level of headings to show (1-6) depth: 2 depth를 6으로 설정해주면 위에서 test한 h6까지 katalog에 표시될 것 외부링크 Hexo Front-matter Hexo Helpers","link":"/2021/11/22/Blog/Setting/hexo-blog-toc/"},{"title":"hexo blog CSS 스타일 변경하기 (Feat. icarus theme)","text":"블로그 스타일 세부설정을 위한 icarus theme 폴더이전 포스팅인 블로그 테마 세부설정을 위한 clone theme를 보고오자. Chrome DevToolsHTML? 몰?루 하던 시절엔 왜째서 기본 탑재된지 이해가 안가던 툴, 브라우저에서 F12를 누르면 어김없이 등장하는 코드뭉치 박스를 기억할 것이다. 오늘 만큼은 이놈을 유용하게 사용할 수 있겠다. DevTools 위에 나오는 코드 뭉탱이(Elements)가 해당 페이지의 구성 요소들의 배치 형식, 아래 나오는 Styles 박스가 Elements에서 클릭한 요소의 CSS stlye로 보면된다. 사실 위 2개만 알면 건물을 새로 짖는게 아닌 이상 인테리어 수정 방법은 다 배운 셈이다. 수정하고픈 요소 찾기DevTools에서는 친절하게도 임의 요소에 마우스를 올려두기만 해도 어느 영역에 대한 Class인지 화면에 표시해준다. 팁이 있다면 DevTools 좌측 상단의 “Select an element in the page to inspect it - Ctrl+Shift+C” 버튼을 눌러보자 식별된 요소가 포함된 class들을 기억하자. 내가 수정할 요소는 nav: pagination / ul: pagination-list is-hidden-mobile / a: pagination-link is-current인거같다. pagination.stly 파일 안에서 pagination 요소와 pagination-link.is-current 하위 요소를 찾을 수 있었다.중간의 ul은 moblie 모드에서는 숨기는 옵션? js로 설정하는 예외인거같다. article의 img 요소처럼 style 커스텀 값이 없다면 부모 객체 아래에 직접 넣어주면 된다. 스크롤바 스타일 변경집에서 쓸 때는 마우스 사이드 버튼에 page up/down을 할당하고 써서 몰랐는데, 외부에서 블로그에 접속하니 사이드바가 쥐꼬리만한게 너무 불편했다. 궁금하면 icarus에서 desktop mode로 직접 확인 ㄱㄱ Elements에서 스크롤바를 정상적으로 식별할 수 없었지만, html 전체 요소 style에서 -wibkit-scrollbar라는 놈을 찾을 수 있었다. 쓸일이 있을진 모르겠지만 주석처리 해놓자. .\\include\\style\\base.styl12345678910111213141516171819/* --------------------------------- *+desktop() * ::-webkit-scrollbar * width: 8px * height: 8px * * ::-webkit-scrollbar-track * border-radius: 3px * background: rgba(0,0,0,0.06) * box-shadow: inset 0 0 5px rgba(0,0,0,0.1) * * ::-webkit-scrollbar-thumb * border-radius: 3px * background: rgba(0,0,0,0.12) * box-shadow: inset 0 0 10px rgba(0,0,0,0.2) * * ::-webkit-scrollbar-thumb:hover * background: rgba(0,0,0,0.24) * --------------------------------- */","link":"/2021/11/28/Blog/Setting/hexo-blog-style/"},{"title":"Markdown 하이퍼링크 이미지 넣기","text":"URL 넣기URL 단순 입력단순히 표현하고 싶은 url을 붙여넣으면 아래처럼 해당 text가 url로 링크된다.엘든링? https://en.bandainamcoent.eu/elden-ring/elden-ring1엘든링? https://en.bandainamcoent.eu/elden-ring/elden-ring URL 삽입하지만 아래처럼 url 뒤로 띄어쓰기가 없을 경우 &lt; , &gt;로 묶어줘야 정확한 URL 표시가 가능하다.엘든링 https://en.bandainamcoent.eu/elden-ring/elden-ring엘?든링1엘든링 &lt;https://en.bandainamcoent.eu/elden-ring/elden-ring&gt;엘?든링 텍스트 하이퍼링크특정 텍스트에 URL을 링크하는 text href를 사용하고 싶을 경우엔 [text](URL) 형식으로 작성하면 된다. 엘?든?링?1[엘?든?링?](https://en.bandainamcoent.eu/elden-ring/elden-ring) URL 참조하나의 URL을 여러번 사용해야할 때 참조 URL을 익혀두면 편하다. 엘든링엘든링?엘?든?링엘?든?링?엘든링!22년 2월 25일 대발매 1234567[엘든링][ER][엘든링?][ER][엘?든?링][ER][엘?든?링?][ER][엘든링!][ER][22년 2월 25일 대발매][ER][ER]: https://en.bandainamcoent.eu/elden-ring/elden-ring 이미지 삽입이미지 삽입은 Href 형식 앞에 !를 붙여 ![alt](URL)로 작성한다. 1![Elden Ring](https://p325k7wa.twic.pics/high/elden-ring/elden-ring/00-page-setup/eldenring_new.png?twic=v1/cover=800x267/step=10/quality=80) 이미지 하이퍼링크그럼 이미지에 링크를 넣는 방법은 어떻게 해야할까? 이미지 표현문을 [ , ]로 묶어 text 처럼 표현하고 그 뒤에 href를 작성하면 된다.ex) [![alt](URL)](Href) 1[![엘든링 보러가기](https://p325k7wa.twic.pics/high/elden-ring/elden-ring/00-page-setup/eldenring_new.png?twic=v1/cover=800x267/step=10/quality=80)](https://en.bandainamcoent.eu/elden-ring/elden-ring) Hexo local image 삽입하기 참조 [LYNMP 도움말] 마크다운(Markdown) 문법 - 링크 삽입","link":"/2021/11/09/Codding/MarkDown/Markdown-href-img/"},{"title":"Markdown 이미지파일 URL 경로에 띄어쓰기가 있는 경우","text":"Markdown 이미지 삽입 포스팅처럼 md 어법으로 이미지를 삽입하다가 한가지 난관에 부딛혔다. image url에 공백이 들어간 것. ※ 현재 hexo 랜더러를 kramed로 변경한 상태라 아래처럼 공백도 인식한다. 마찬가지로 hexo 기본 내장 tag 플러그인 어법으로 블로그 포스트는 해결 가능 1![우린 답을](\\images\\2111\\md url blank\\interstellar poster.png) 하지만 ipynb 형식 등 개발환경에서 md 셀을 사용할 때는 여전히 발생하는 문제다. html처럼 &amp;nbsp;를 공백 대신 넣어보기도 하고 cmd 마냥 &quot;&quot;로 묶는 등 코랄을 했지만 markdown 어법으로는 해결하지 못했다. markdown이 html 어법도 지원하는걸 기억하고 html img 태그로 해결했다. 1&lt;img src=&quot;\\images\\2111\\md url blank\\interstellar poster.png&quot; alt=&quot;찾을 것&quot;&gt; html 어법을 사용하면 md로 구현 가능한 하이퍼링크 &lt;a href=&quot;&quot;&gt;&lt;/a&gt; tag는 당연하고가운데 정렬(&lt;center&gt;&lt;/center&gt;)부터 이미지 크기 변경이 가능한 img 태그 size 요소 등 풍부한 표현이 가능하다.","link":"/2021/11/16/Codding/MarkDown/Markdown-url-blank/"},{"title":"markdown 수식 넣기","text":"mathjaxMarkdown에서는 $x^2$처럼 수식을 사용할 수 있는 mathjax 플러그인이 내장되어있다. 블럭 지정수식을 사용하기 위해 아래와 같이 식 앞 뒤로 $문자를 넣어줘야한다.1$math$$math$ 아래 처럼 $ 문자를 2개 넣는 경우도 있는데,1$$math$$ math이 경우엔 text 사이에 수식을 삽입하는게 아닌 따로 표현하는 경우에 주로 사용된다. 첨자수학에서 행의 i번째 속성을 가리키거나 x의 n 제곱을 표현할 때 첨자를 주로 사용한다. 1$x_i^n$ $x_i^n$ 아래첨자: _ 위첨자: ^ 중괄호x의 12제곱을 표현하기 위해 단순히 $x^12$만 입력하게 된다면 $x^12$처럼 문자 1개만 위첨자로 처리된다.이를 해결해주는 문법이 중괄호( { } )다. 1$x^{12}$ $x^{12}$ 단, 중괄호를 mathjax에서 하나의 문자열로 처리하기 위해 사용되므로 중괄호를 사용하는 식에서는 escape(\\)로 문법 인식이 아닌 문자 인식으로 바꿔줘야한다. 1$x_5 = [[\\{(x_1)+x_2\\}+x_3]+x_4]$ ※ Hexo: 중괄호를 표현하기 위해선 \\를 중첩 사용한다.hexo 수식 사용하기1$x_5 = [[\\\\{(x_1)+x_2\\\\}+x_3]+x_4]$$x_5 = [[\\{(x_1)+x_2\\}+x_3]+x_4]$ 행렬 형식2속성만 넣을 경우1$$v{x \\choose 0}$$ v{x \\choose 0}기본 형식 array행렬 &amp; 괄호 크기 변경1234567$$X\\Bigg\\{\\begin{array}{c} x_{1}\\\\ x_{2}\\end{array}$$ X\\Bigg\\{ \\begin{array}{c} x_{1}\\\\ x_{2} \\end{array}P-matrix1234567891011$$L=\\begin{pmatrix} b_1 &amp; b_2 &amp; b_3 &amp; \\cdots &amp; b_{n-1}&amp; b_n\\\\ s_1 &amp; 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\ 0 &amp; s_2 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0\\\\ 0 &amp; 0 &amp; s_3 &amp; \\cdots &amp; 0 &amp; 0\\\\ \\vdots&amp;\\vdots&amp;\\vdots&amp; \\ddots &amp; \\vdots &amp;\\vdots\\\\ 0 &amp; 0 &amp; 0 &amp; \\cdots &amp; s_{n-1}&amp; 0\\\\\\end{pmatrix}$$ L= \\begin{pmatrix} b_1 & b_2 & b_3 & \\cdots & b_{n-1}& b_n\\\\ s_1 & 0 & 0 & \\cdots & 0 & 0\\\\ 0 & s_2 & 0 & \\cdots & 0 & 0\\\\ 0 & 0 & s_3 & \\cdots & 0 & 0\\\\ \\vdots&\\vdots&\\vdots& \\ddots & \\vdots &\\vdots\\\\ 0 & 0 & 0 & \\cdots & s_{n-1}& 0\\\\ \\end{pmatrix}B-matrix12345\\begin{bmatrix} 2 &amp; 1 &amp;-1\\\\ 1 &amp; 0 &amp; 5\\\\ -1 &amp; 3 &amp;-2\\end{bmatrix} \\begin{bmatrix} 2 & 1 &-1\\\\ 1 & 0 & 5\\\\ -1 & 3 &-2 \\end{bmatrix}행렬에 세로 줄 넣기123456789$$\\left[\\begin{array}{ccc|c} 2 &amp; 1 &amp;-1 &amp; 3\\\\ 1 &amp; 0 &amp; 5 &amp; 1\\\\ -1 &amp; 3 &amp;-2 &amp; 0\\end{array}\\right]$$ \\left[ \\begin{array}{ccc|c} 2 & 1 &-1 & 3\\\\ 1 & 0 & 5 & 1\\\\ -1 & 3 &-2 & 0 \\end{array} \\right]V-matrix1234567$$\\begin{vmatrix} a &amp; b\\\\ c &amp; d\\end{vmatrix}=ad-bc$$ \\begin{vmatrix} a & b\\\\ c & d \\end{vmatrix} =ad-bc연립 방정식1234567$$\\begin{cases} v_1 = 3i+2k\\\\ v_2 = 2j+k\\\\ v_3 = i+j+k\\end{cases}$$ \\begin{cases} v_1 = 3i+2k\\\\ v_2 = 2j+k\\\\ v_3 = i+j+k \\end{cases}특수문자수식에서 사용되는 곱셈 나눗셈부터 pi ohm과 같은 특수문자를 삽입하기 위해선 중괄호 경우처럼 \\를 사용해야한다. 12345$$(\\hat i\\cdot\\hat i)\\div n \\\\= \\frac{\\vert\\hat i\\vert\\times\\vert\\hat i\\vert cos\\theta}{n}\\\\= \\frac{\\vert\\hat i\\vert^2\\times 1}{n} = \\frac 1n$$ (\\hat i\\cdot\\hat i)\\div n \\\\ = \\frac{\\vert\\hat i\\vert\\times\\vert\\hat i\\vert cos\\theta}{n}\\\\ = \\frac{\\vert\\hat i\\vert^2\\times 1}{n} = \\frac 1n특수문자는 굉장히 다양하므로 삽입하고자 하는 문자를 LaTex(혹은 Mathjax) 검색어에 붙여 검색하자.","link":"/2021/11/15/Codding/MarkDown/markdown-mathjax/"},{"title":"Rstudio 처음 세팅하기","text":"Rstudio 기본 설치 프로그램 Rstudio는 R 언어를 사용하는 프로그램이니 R 언어팩을 설치한다. 사용할 작업 환경인 Rstudio도 받아주고, Rtools를 설치하면 R의 기본적인 Package 세트와 C/C++과 같은 의존성 세팅을 불러올 수 있다. Rstudio 기본 세팅나는 memo 앱을 사용할 때도 자동 줄바꿈을 사용하는 편이기에 Soft-wrap를 체크했다. 윈도우 환경이라면 언어 인코딩 방식을 UTF-8로 변경하는걸 추천한다. R ScriptR studio 상단의 files 탭에서 project 경로를 생성하거나 py 혹은 ipynb 처럼 R Script, Rmd 파일창을 열 수 있다. Rtools path 설정R Script 등을 열었다면 Rtools의 경로를 지정해준다. 1write('PATH=&quot;${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}&quot;', file = &quot;~/.Renviron&quot;, append = TRUE) R은 PL/SQL처럼 동작한다. 원하는 명령어를 작성하고 해당 열에서 Ctrl+Enter 해주면 된다. 이후 Path값을 다시 불러오기 위해 R을 재시작한다. 나의 경우 R restart로 해결안되서 Rstudio 자체를 재실행했다.그냥 깔끔하게 Rstudio를 껏다키는걸 추천한다. 패키지 불러오기123install.packages(&quot;Package_Name&quot;)#혹은install.packages(&quot;Package_Name&quot;, dependencies = TRUE) 패키지 함수를 사용하려면 다른 프로그램 언어들처럼 file에서 package를 import 해줘야한다. 1library(Package_Name) 만약 콘솔에 사용하려는 패키지가 없다고 나온다면 install.packages(&quot;패키지명&quot;)를 해주자. 특수한 경우에 대한 오류는 R 패키지 리스트에서 stringi처럼 시스템 기본 요구사항이 들어있는 경우다. 일반적인 경우는 Rtools 설치에서 해결됐을테니 크게 신경쓸 필욘 없다. 외부링크 R language R 패키지 리스트 Rstudio Rtools 튜토리얼 R for data science에서 기본적인 시각화(ch.03) 및 기초 문법(ch.05)을 확인할 수 있다. ggplot2 extensions - gallery에서는 고-급 그래프 예제를 가져올 수 있다. R cheatsheets","link":"/2021/12/01/Codding/R/r-setting/"},{"title":"ㅇㄱㅇㅅㅎㄷㅂㅎㅇ [ALTF4]","text":"메모리 누수 등으로 프레임 드랍 일어나면 유저, 닭 투척, 트레일 등 엔티티 속도도 같이 느려져서 자체 하드모드 쌉가능. 리부트하면 설치물도 전부 사라짐. 메모리에 할당됐던걸까?","link":"/2021/12/04/hobby/games/altf4/"},{"title":"와! 15성 첫 풀콤 [DJMAX Respect V]","text":"맥콤 생각하고 준내 비볐엌ㅋ 나도 이제 초고수?","link":"/2021/11/27/hobby/games/djmax-1st15max/"},{"title":"슈라이크(라니우스 타입B) [FTL]","text":"우리는 우연으로 승리할 수 있는 난이도를 “어려움”이라 부르기로 약속했어요","link":"/2021/12/04/hobby/games/ftl-the-shrike/"},{"title":"Alone [DJMAX Respect V]","text":"쉰곡 서윗하네","link":"/2021/12/04/hobby/games/djmax-alone/"},{"title":"ipynb 사용하기; Jupyter &amp; Google Colab","text":"IPython Notebook은 python 코딩과 html을 지원하고 수식까지 표현 가능한 markdown 텍스트 박스를 동시에 사용해 가독성을 올리기 위해 제안된 방식이다. Jupyter기본적으로 로컬환경에서 사용가능한 Jupyter 시리즈가 있다.주피터는 아나콘다를 설치하면 따라오는 소프트웨어로 아나콘다 설치 방법 포스트를 참조하자. ipynb 단축키는 커멘트 팔렛트에서 확인 및 수정할 수 있다.자주 사용되는 단축키는 ctrl+m &amp; m d &amp; d tab등 다양하게 있으니 기호에 맞춰 설정하자. Google Colab온라인 환경에선 다양한 플렛폼이 ipynb 환경을 지원하지만 접근성이 좋고 작업 리소스까지 지원해주며 저장공간 연동까지 가능한 Google Colab이 대표적이다.Google 플렛폼이므로 당연히 google drive 연동을 지원하고, Github 업로드도 가능하다. 유저 작업환경 사양이 좋지않다면 Colab에서 지원하는 하드웨어 가속기를 사용해서 저사양 GPU(혹은 TPU)를 대여할 수 있다. 추가로 ipynb는 ‘Kaggle Notebook’ 등 다양한 플랫폼에서 작업 가능하다.","link":"/2021/11/07/Codding/Python/Setting/ipynb-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"},{"title":"Jupyter ModuleNotFound 에러 (feat.plotly)","text":"0. 모듈 에러 확인Plotly를 외부 컴퓨터에서 잘 사용하다가 집에서 모듈을 설치하기 위해 plotly에서 안내된 install 명령어 대로 설치하고 jupyter로 사용하려니 아래와 같이1ModuleNotFoundError: No module named 'plotly' 오류를 뱉어내더라. cmd에서 plotly를 확인해도 깔려 있는데, 막상 로컬 소프트인 jupyter에서 사용하려니 경로를 못 찾아가는 느낌이라 주피터 path 경로 문제인가 했었다. 구글링해서 내린 결론은 일반 cmd로 모듈을 다운받으면 python에 대한 모듈로 다운받는게 문제였다. “jupyter는 파이썬 아니냐?”하겠지만 jupyter에서 import로 참조되는 모듈들은 Anaconda 설치 경로에서 참조되기 때문에 python에 모듈을 설치하는 경우는 아무 의미 없는 작업이된다. 1. Anaconda Prompt결국 로컬 jupyter에서 외부 모듈을 적용시키기 위해선 anaconda 경로로 설치할 필요가 있고, 많은 방법 중 하나가 Anaconda Prompt다. 아나콘다 경로 혹은 시작화면 앱 찾기에서 Anaconda Prompt를 실행하고 2. plotly 설치Plotly 설치를 Anaconda prompt에서 진행한다.1&gt; pip install plotly==5.3.1 3. Jupyter 모듈 오류 해결anaconda 로컬 소프트인 jupyter notebook에서 정상적으로 import되는 걸 확인할 수 있다. 그렇다면 구글, 당신이 신이란거야? anaconda plotly","link":"/2021/11/09/Codding/Python/Setting/Jupyter-ModuleNotFound/"},{"title":"Jupyter 경로 변경","text":"주피터 노트북 혹은 주피터 랩의 기본 경로가 Users에 적용되어있고 간단한 설정으로 경로를 바꿀 수 없기에 메모를 남긴다. 주피터 설정을 변경하기 위해서는 구성을 변경할 수 있는 파일인 config 파일이 필요하다.하지만 이 congif 파일은 기본적으로 설치되어있지 않기에 아래와 같이 cmd 창에서 jupyter 명령어로 세팅 방식이 적힌 config 파일을 생성해주는걸 권장한다.1&gt; jupyter notebook --generate-config 그러면 user 경로 .jupyter 디렉토리에 jupyter_notebook_config.py 파일이 생성된다. 버전마다 다르지만 에디터를 이용해 385번줄에 있는1# c.NotebookApp.notebook_dir = '' 의 주석 처리를 제거하고 원하는 경로를 입력한다. 이 때, 경로는 리눅스 방식으로 변경해야되니 역슬래쉬(\\)로 경로가 복사되었다면 슬래쉬(/)로 변경하거나 컴퓨터에게 특수문자임을 인식시키기 위해 역슬래쉬를 2번(\\\\) 입력한다.1c.NotebookApp.notebook_dir = 'E:/Fear/Univ/Big_data/Training/Github/Codding-base/Python/Python-jupyter'혹은1c.NotebookApp.notebook_dir = 'E:\\\\Fear\\\\Univ\\\\Big_data\\\\Training\\\\Github\\\\Codding-base\\\\Python\\\\Python-jupyter' 이걸로 주피터 path 경로는 변경되었으나 Jupyter Notebook의 바로가기 path도 설정해야 notebook을 열었을 때 config에서 설정한 path 경로를 참조할 수 있다. notebook 설정을 열어서 아래 두 경로를 지워 config 설정을 참조하도록 바꿔준다.12대상: ~ &quot;%USERPROFILE%/&quot;시작위치: %HOMEPATH% 지정한 경로에서 잘 열리지만 path 내부에서만 작업하므로 작업환경에서 가장 편한 path를 설정하는걸 권장한다. 외부링크 주피터 노트북 환경설정 : 시작폴더 변경방법","link":"/2021/11/07/Codding/Python/Setting/jupyter-change-path/"},{"title":"파이참, 파이썬 인코딩 설정","text":"어떤 작업환경을 사용하든 가능하다면 UTF-8 포멧으로 작업하는걸 추천한다. pycharm에서도 인코딩 방식 변경을 지원함. file - setting - editor - file encodings에서 Global Encoding이 UTF-8이 아니라면 변경해주자. 프로젝트 인코딩과 속성 파일 인코딩 방식은 OS가 윈도우라면 새 프로젝트를 열 때 마다 기본값으로 돌아갈 것이다.필요한 설정이 아니라면 크게 신경쓰진 말자. ※ 코드 파일 맨 윗단에 아래 주석을 추가하면 자동 UTF-8 인코딩 해준다. 1# -*- coding: utf-8 -*- pycharm에서 UTF-8로 변경했고 python 3++를 사용중이기에 추가할 필요는 없지만 작업 파일을 공유하거나 먼 미래에 열어볼 나를 위해 추가한다.","link":"/2021/12/08/Codding/Python/Setting/pycharm-encoding/"},{"title":"파이참 가상환경 생성","text":"가상환경라이브러리를 불러오다보면 의존성 패키지의 과거 버전이 필요할 때가 있다.모든 패키지에 대응할 수는 없으니 파이썬이나 해당 패키지를 재설치 혹은 Downgrade를 진행해야 할 것이다.위 문제를 해결할 수 있는 방법이 여러 파이썬을 생성해 각각 환경에 맞는 패키지를 설치해 따로 불러오는 방법으로 가상환경이라 한다. 가상환경 생성설정에서 생성하기프로젝트를 생성하고 코드 작업을 진행하다 버전 에러가 났을 때, Files - Settings - Project: - Python Interpreter 에서 Add... 를 눌러 추가할 수 있다. 가장 기본적인 Venv를 설치할 수 있다. anaconda 설치가 됐다면 conda 환경도 추가할 수 있지만, 기본적인 파이썬 Venv 설치를 진행할 예정.파이썬 exe 경로와 가상환경 dir 경로를 잘 확인해주자 프로젝트와 같이 생성하기보통의 경우는 파이참에서 프로젝트를 생성하며 가상환경 설치를 진행할 것이다. 터미널에서 생성하기파이참같은 개발환경을 사용하지 못하고 리눅스 등 환경의 터미널에서 생성해야할 경우는 venv — 가상 환경 생성를 참조한다. 패키지 설치파이썬 가상환경을 생성했다면 사용할 패키지를 설치하면 된다. 정상적으로 설치했다면 문제 없겠지만 어느 파이썬을 참조하고 있는지 터미널에서 확인해보자. 1234 # window$ where python # mac, linux .ect$ which python 가상환경을 참조하지 못하고 있다면 아래 명령어로 (venv) 강제 진입해보자. 1234 # window$ source ./venv/Scripts/activate # mac, linux .ect$ source ./venv/bin/activate 설정 interpreter에서파이참 같은 경우엔 Python Interpreter - install 버튼을 선택해 설치할 패키지와 버전을 선택할 수 있다. requirements.txt버전을 일일히 기억하고 있기도 뭐하고 설치할 패키지가 많다면 하나하나 설치하는 것도 일이다. pycaret같은 패키지를 보면 requirements.txt로 관리한다. 텍스트 파일에 원하는 패키지와 버전을 입력했다면 pip 명령어로 한번에 설치를 진행할 수 있다. 1$ pip install -r requirements.txt Jupyter ipynb에서 가상환경 사용가상환경 이름과 표시될 이름을 설정해준다. 난 각각 과 &lt;파이썬버전(dir 이름)&gt;으로 설정했다. 1ipython kernel install --user --name python_ml --display-name &quot;Python3(python_ml)&quot; 정상적으로 등록됐다면 jupyter 환경으로 접속하면 된다. 12$ jupyter lab$ jupyter notebook 주피터 랩을 추천한다. 외부링크 venv — 가상 환경 생성","link":"/2021/12/09/Codding/Python/Setting/pycharm-venv/"},{"title":"파이썬 및 파이썬 개발 환경 다운로드(Anaconda, Pycharm)","text":"아나콘다 설치파이썬과 파이썬을 브라우저에서 사용할 수 있는 개발환경인 Jupyter Nootbook을 다운로드 할 수 있는 아나콘다를 우선 설치한다 아나콘다를 설치할 때 주의할 점은 각종 설치 파일과 연동을 위해 Path 설정 체크박스를 반드시 눌러주자. 아나콘다 튜토리얼과 부팅 시 자동 실행은 반드시 필요한 요소는 아니므로 체크 해제를 권장한다. 파이참 설치파이참은 파이썬 확장자 외에도 html 등 다양한 확장자를 관리할 수 있는 개발환경이다. 우선 오픈 소스 버전인 Community 버전으로 다운받도록 하자. Pycharm 경로 등을 한 다음에 반드시 체크해야할 값이 파이참 패스 설정과 파이썬 확장자 연동 등을 진행해야 이상적인 개발환경이 될 것이다. 메모: https://github.com/hangack/Codding-base/blob/main/Python/20211027.md","link":"/2021/11/01/Codding/Python/basic/Python0_download/"},{"title":"python 자료형","text":"파이썬의 자료형1int_data = 3 #정수형 자료(integer data) float = 실수1float_data = 3.14 #실수형 자료(floating point data) 1float_data2 = 3 1float_data2 = 3. string = 문자형1complex_data = 1+5j 1str_data1 ='hello world' list [ ] 변경 가능 / tuple ( ) 변경 불가 / dict {}1list_data = [1,2,3,4,5,6,7,8,9,10] #list data type 1tuple_data = (1,2,3,4,5,6,7,8,9,10) #tuple data type 1dict_data = {0:'toy',1:'book'} #dictionary data 1whos Variable Type Data/Info ----------------------------------- complex_data complex (1+5j) dict_data dict n=2 float_data float 3.14 float_data2 float 3.0 int_data int 3 list_data list n=10 str_data1 str hello world tuple_data tuple n=10 123456789#정수형a=123a=-1123a=0#실수형a=1.2a=4.24E10 #4.12*10^10a=4.24e10 #4.12*10^10b=4.24e-10 #4.12*10^(-10) 1whos Variable Type Data/Info ----------------------------------- a float 42400000000.0 b float 4.24e-10 complex_data complex (1+5j) dict_data dict n=2 float_data float 3.14 float_data2 float 3.0 int_data int 3 list_data list n=10 str_data1 str hello world tuple_data tuple n=10 1reset Once deleted, variables cannot be recovered. Proceed (y/[n])? y 1whos Interactive namespace is empty. 1234a=3b=4print(a+b) #사칙연산 : +, -, *, / print(7%3) # 제곱(^) : ** # 나머지 : % 7 1 문자열12a= &quot;hello 'my' world&quot;b= 'hello &quot;my&quot; world' #동일한 따음표가 내부에 있으면 오류가 발생한다. 1whos Variable Type Data/Info ---------------------------- a str hello 'my' world b str hello &quot;my&quot; world 1234567a= &quot;&quot;&quot;P&quot;&quot;'O'&quot;&quot;&quot;&quot;&quot;print(a) P &quot;&quot; 'O' &quot;&quot; 1234a=&quot;my&quot;b=&quot;note&quot;c=a+&quot;_&quot;+bprint(c) my_note 1print((c+&quot;/&quot;)*5) my_note/my_note/my_note/my_note/my_note/ 1print(len(a)) # len = Lenth(길이) 2","link":"/2021/11/01/Codding/Python/basic/python1-%EC%9E%90%EB%A3%8C%ED%98%95/"},{"title":"python while문","text":"While 문 (조건과 반복의 콤비네이션)조건이 참인 동안에 while 문 아래의 문장이 반복 수행된다. 12345678910111213141516171819# while 문의 기본 구조&quot;&quot;&quot;while &lt;조건문&gt;: &lt;수행 문장1&gt; &lt;수행 문장2&gt; &lt;수행 문장3&gt; ...&quot;&quot;&quot;treehit = 0while treehit &lt;10: ## 조건이 ture 일 경우에 실행된다. -&gt; fulse일 경우 중단 treehit = treehit + 1 print(&quot;나무를 %d번 찍었습니다&quot; %treehit) if treehit == 10: print(&quot;나무가 넘어갑니다&quot;) 나무를 1번 찍었습니다 나무를 2번 찍었습니다 나무를 3번 찍었습니다 나무를 4번 찍었습니다 나무를 5번 찍었습니다 나무를 6번 찍었습니다 나무를 7번 찍었습니다 나무를 8번 찍었습니다 나무를 9번 찍었습니다 나무를 10번 찍었습니다 나무가 넘어갑니다 12345678prompt = &quot;&quot;&quot; 1. Add 2. Del 3. List 4. Quit Enter number:&quot;&quot;&quot; 12345num = 0while num != 4: print(prompt) num = int(input()) 1. Add 2. Del 3. List 4. Quit Enter number: 1 1. Add 2. Del 3. List 4. Quit Enter number: 1 1. Add 2. Del 3. List 4. Quit Enter number: 3 1. Add 2. Del 3. List 4. Quit Enter number: 2 1. Add 2. Del 3. List 4. Quit Enter number: 4 quit 의미의 4를 입력하지 않으면 계속 prompt를 출력하는 형식여기서 input()은 사용자의 입력을 받는 함수 1234567891011121314151617# while 문 :커피머신coffee = 3while True: ## while 문 무한반복 문구 money = int(input()) if money &gt;= 300 and coffee != 0: ##커피를 뽑기에 충분한 돈인지 판단 coffee = coffee - 1 if money &gt; 300: print(&quot;커피&quot;) print(&quot;거스름돈 %d원&quot; %(money - 300)) else : print(&quot;커피&quot;) elif money &lt; 300 : print(&quot;잔액부족&quot;) elif coffee == 0 : print(&quot;재고부족&quot;) break ##if 특정조건이면 while을 빠져나가자 (break) &lt;-&gt; continue 1000 커피 거스름돈 700원 10 잔액부족 300 커피 301 커피 거스름돈 1원 500 재고부족 1234567891011121314151617181920# 홀수만 출력하는 while 문a=0while a&lt;10: a=a+1 if a%2==0:continue print(a)print(&quot;&quot;)x= list(range(1,10,2))print(list(range(5)))for i in range(5): print(x[i])print(&quot;&quot;)a=1while True: print(a) a=a+2 if a&gt; 10: break 1 3 5 7 9 [0, 1, 2, 3, 4] 1 3 5 7 9 1 3 5 7 9","link":"/2021/11/01/Codding/Python/basic/python10-while%EB%AC%B8/"},{"title":"python 함수(define)","text":"함수반복적으로 사용되는 가치 있는 부분을 한 뭉치로 묶어 불필요한 반복을 줄일 수 있다.‘어떤 입력값을 주었을 때 어떤 결과값을 돌려준다.’ 라는 식의 함수를 작성하는 것이 유리하다. 12345678910# 파이썬 함수 구조&quot;&quot;&quot;def 함수 이름(매개변수들): 수행할 문장1 수행할 문장2 ... return 결과값&quot;&quot;&quot; '\\ndef 함수 이름(매개변수들):\\n 수행할 문장1\\n 수행할 문장2\\n ...\\n\\n return 결과값\\n\\n' 1234567891011121314151617181920212223# 함수def add(a,b): ## a 와 b는 add라는 함수를 작동시키기 위한 변수 return a+b ## 함수 이름은 ad고 입력으로 2개의 값을 받으며, 결과값은 2개의 입력값을 더한 값이다.# 메인 프로그램a=3b=4c=add(a,b)print(c)# Orresult=add(a=3,b=4)print(result)# Orresult=add(b=3,a=4) ## 변수 이름만 맞추면 변수 순서가 바뀌어도 작동된다.print(result) 7 7 7 1234# 입력값이 없는 함수def say(): return 'Hi' 12a=say()print(a) Hi 123# retrun(결과값)이 없는 함수def add(a,b): print(&quot;%d + %d = %d&quot;%(a,b,a+b)) 1add(3,4) 3 + 4 = 7 123456789# 입력값이 몇 개가 될지 모를 때는?# 여러 개의 입력값을 받는 함수def add_many(*arg): # '*' 는 임의의 여러 변수 지정 result=0 for i in arg: result=result+i # *arg에 입력받는 모든 값을 더한다. return result 12result = add_many(1,2,3,4,5)print(result) 15 123456789101112# 사칙 연산 선택 가능def add_mul(choice, *args) : if choice =='add': ## choice 매개변수가 add 일 경우 result = 0 for i in args: result = result+i elif choice =='mul': ## choice 매개변수가 mul 일 경우 result = 1 for i in args: result = result*i return result 12345result = add_mul('add',1,2,3,4)print(result)result2 = add_mul('mul',1,2,3,4)print(result2) 10 24 123456# 함수의 결과값은 항상 하나 # 함수 결과값은 언제나 하나이기에 오류가 나는 것이 아니라 (7,12)라는 하나의 튜플 값으로 돌려준다.def add_mul (a,b): return a+b,a*bresult = add_mul(3,4)print(result) (7, 12) 123456789# 매개변수에 초기값 미리 정하기def sayself(name,old,man=True): ## 초기값 &quot;Ture(or something)&quot; 의 경우 변수 가장 끝에 지정하지 않으면 에러가 발생한다. print(&quot;이름 %s&quot; %name) print(&quot;나이 %d&quot; %old) if man: print(&quot;남성&quot;) else: print(&quot;여성&quot;) 1sayself(&quot;박응&quot;,27,True) 이름 박응 나이 27 남성 1sayself(&quot;박선&quot;,27,False) 이름 박선 나이 27 여성 1sayself(&quot;박응&quot;,27) ## 초기값이 True로 설정되어있다. 이름 박응 나이 27 남성 함수에서 매우 중요한 부분12345678# 함수 안에서 선언한 변수의 효력 범위a = 1 # 함수 밖의 변수 adef vartest(a): # 여기서 a는 함수 안에서 a라서 함수 안에서만 작동한다. 함수 밖과는 다른 셀이다. a=a+1 vartest(a) # 여기서 입력값 a는 함수 바깥 a=1을 입력한다는 의미print(a) # 함수에서 a+1 = 2 가 되었지만 retrun도 없고 함수 안에서의 a만 a=2이 되었다. 메인 셀에서 a는 여전히 1이다. 1 123456789# 함수 안에서 함수 밖의 변수를 변경하는 법a = 1 def vartest(a): a=a+1 return a # 메인 프로그램 지정변수에 결과값을 돌려준다. a = vartest(a) # 결과값을 지정변수 a에 대입print(a) 2 123456# lambda (한줄 함수)'lambda 매개변수1,매개변수2, ...: 매개변수를 사용한 표현식'add = lambda a,b: a+bresult=add(3,4)print(result) 7 12345678#1 for문, while문, if문 등 제어문을 사용하여 1부터 100까지의 숫자를 출력a=0while a&lt;100: a=a+1 print(a,end=' ')print() for i in range(0,100):print(i+1,end=&quot; &quot;) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 123456789101112131415#2 A학급에 총 10명의 학생이 있다. 이 학생들의 중간고사 점수는 다음과 같다.# [ 70, 60, 55, 75, 95, 90, 80, 80, 85, 100 ]# 제어문(반복문)을 사용하여 A학급의 평균 점수를 구하라.score = [ 70, 60, 55, 75, 95, 90, 80, 80, 85, 100 ]score_sum = 0for i in range(0,len(score)): score_sum = score_sum + score[i] i=i+1 score_avg = score_sum/len(score)print(score_avg) 79.0 123# 메모리 : 내부 입출력 장치 (Internal I/O) -&gt; 전원과 동시에 소멸# 하드 : 외부 입력 장치 (External I/O) -&gt; 지속#file (파일)","link":"/2021/11/02/Codding/Python/basic/python11-define/"},{"title":"python 파일","text":"파일 생성파일 객체 = open(파일 이름, *파일 열기 모드)[파일 열기 모드]r : 읽기 모드w : 쓰기 모드a : 추가 모드 (파일의 마지막에 새로운 내용을 추가할 때 사용) , append 1234# open 명령어 : 파일에 작업을 한다.f = open(&quot;새파일.txt&quot;, 'w') # w 모드로 파일을 열면 기존 파일의 내용을 전부 지우고 처음부터 작업한다. 추가 입력은 af.close # 작업 이후 반드시 close로 파일과 연결을 끊어줘야 함 &lt;function TextIOWrapper.close()&gt; 1234567# 파일 쓰기 모드로 출력값 입력f = open(&quot;새파일.txt&quot;, 'w')for i in range(1,11): # 1부터 10까지 i에 대입 data = &quot;%d번째 줄입니다. \\n&quot; %i #formatted str # \\n은 줄바꿈 기호 f.write(data) # data를 파일 객체 f에 입력f.close() 프로그램 외부에 저장된 파일을 읽는 방법123456# readline 함수f = open(&quot;새파일.txt&quot;, 'r')line = f.readline() # 파일의 첫 줄을 읽는다.print(line)f.close() 1번째 줄입니다. 123456f = open(&quot;새파일.txt&quot;, 'r')while True: line = f.readline() if not line: break # line(str) 인 경우 공백이면 fulse , 글자인 경우 true print(line)f.close() 1번째 줄입니다. 2번째 줄입니다. 3번째 줄입니다. 4번째 줄입니다. 5번째 줄입니다. 6번째 줄입니다. 7번째 줄입니다. 8번째 줄입니다. 9번째 줄입니다. 10번째 줄입니다. 123456f = open(&quot;새파일.txt&quot;, 'r')lines = f.readlines()f.close()print(lines)for i in range(1,11): print(lines[i-1]) ['1번째 줄입니다. \\n', '2번째 줄입니다. \\n', '3번째 줄입니다. \\n', '4번째 줄입니다. \\n', '5번째 줄입니다. \\n', '6번째 줄입니다. \\n', '7번째 줄입니다. \\n', '8번째 줄입니다. \\n', '9번째 줄입니다. \\n', '10번째 줄입니다. \\n'] 1번째 줄입니다. 2번째 줄입니다. 3번째 줄입니다. 4번째 줄입니다. 5번째 줄입니다. 6번째 줄입니다. 7번째 줄입니다. 8번째 줄입니다. 9번째 줄입니다. 10번째 줄입니다. 123456# read 함수 사용하기f = open(&quot;새파일.txt&quot;, 'r')data = f.read()print(data)print(type(data))f.close() 1번째 줄입니다. 2번째 줄입니다. 3번째 줄입니다. 4번째 줄입니다. 5번째 줄입니다. 6번째 줄입니다. 7번째 줄입니다. 8번째 줄입니다. 9번째 줄입니다. 10번째 줄입니다. &lt;class 'str'&gt; 파일에 새로운 내용 추가하기12345f = open(&quot;새파일.txt&quot;, 'a')for i in range(11,20): data = &quot;%d번째 줄입니다. \\n&quot; %i f.write(data) f.close() write문과 함께 사용하기123f = open(&quot;foo.txt&quot;,'w')f.write(&quot;Life is too short&quot;)f.close() 123# with 문with open(&quot;foo.txt&quot;,'w') as f: f.write(&quot;Life is too short&quot;) # 자동으로 close 되는 문장","link":"/2021/11/02/Codding/Python/basic/python13-%ED%8C%8C%EC%9D%BC/"},{"title":"python 입출력","text":"입력input: input 에 입력되는 모든 것을 문자열로 취급한다 (내부입력 : 메모리로부터 자료를 읽어옴) 1234567891011a = input() # input 함수의 출력 타입 'str'print(a)print(type(a))a = int(a) # type : str -&gt; intprint(a)print(type(a)) # 일단 str 타입으로 받아들인 후 type 전환을 통해 변수 가공print(10+a) 3 3 &lt;class 'str'&gt; 3 &lt;class 'int'&gt; 13 123# 프롬프트 값을 띄워서 사용자 입력받기number = input(&quot;숫자를 입력하세요 : &quot;) 숫자를 입력하세요 : 3 1print(number) 3 123456# split: value 나누기a,b = input('숫자 두개를 입력하세요: ').split()a = int(a)b = int(b)print(a+b) 숫자 두개를 입력하세요: 5 7 12 12# sep(separator): 변수 사이값(구분) 지정print(1920,1000,sep=' * ') 1920 * 1000 12345# end: print 끝 값 임의로 지정(default: \\n)for i in range(2,5): for j in range(1,5): print(i*j,end='') ## end = '' 이 문장에 끝은 \\n이 아닌 '' 내부 문자로 대신한다. print() 2468 36912 481216 출력print : 입력 자료형을 출력 (내부출력) 123456789101112131415161718a = 123print(a)a = &quot;Python&quot;print(a)a = [1,2,3]print(a)a = &quot;이번달은 %d 월 입니다.&quot; %11print(a)a = &quot;오늘은 %d 월 %d 일 입니다.&quot; %(11,11)print(a)a = &quot;시험 성적은 %3.1f점 입니다.&quot; %85.2345 ## 기말test :print(a) 123 Python [1, 2, 3] 이번달은 11 월 입니다. 오늘은 11 월 11 일 입니다. 시험 성적은 85.2점 입니다. 1234print(&quot;Life&quot; + &quot;is&quot; + &quot;too stort&quot;)print(&quot;Life&quot; &quot;is&quot; &quot;too stort&quot;) # 큰 따옴표 문자열 연산은 + 와 동일print(&quot;Life &quot; &quot;is &quot; &quot;too stort&quot;)print(&quot;Life&quot;, &quot;is&quot;, &quot;too stort&quot;) # 문자열 띄어쓰기는 콤마(,)로 가능 Lifeistoo stort Lifeistoo stort Life is too stort Life is too stort 1234# 한 줄에 결과값 출력하기for i in range(10) : print(i, end=' ') 0 1 2 3 4 5 6 7 8 9","link":"/2021/11/02/Codding/Python/basic/python12-%EC%9E%85%EC%B6%9C%EB%A0%A5/"},{"title":"python 모듈","text":"모듈함수나 변수를 모아 놓은 파이썬 파일 (파일명(.py) = 모듈명다른 파이썬 프로그램에서 불러와 사용할 수 있게끔 나든 파이썬 파일여러 모듈을 묶어서 편리하게 관리하기 위해 패키지(디렉토리) 안에 넣어둘 수 있다.패키지 내부 모듈 안의 특정 함수를 사용하기 위해서는 ‘패키지.모듈명.특정함수명’ 형태로 사용한다.불러들이는 명령어 : import 아래의 matplotlib는 외부 모듈로 cmd 창을 통해 따로 다운받아야한다. 1234import matplotlib.pyplot as plt # matplotlib (패키지) pyplot (모듈) # A as B -&gt; 변수 A를 B로 설정#여기서 plt는 object 이다. / object(객체)는 .을 찍을 수 있다.plt.plot([1,2,3,4]) [&lt;matplotlib.lines.Line2D at 0x23bdd9b5880&gt;] 123456# import '모듈 이름' : 모듈 불러오는 명령어import math # math 는 객체 - . 을 찍을 수 있다.# 수학 작업을 할 때 : math library(파이썬 내장) 혹은 numpy library(외부 다운로드)n = math.factorial(5)print(n) 120 1234567%%writefile my_module.pymy_variable = 10def my_factorial(n) : x=1 for i in range(1,n+1): x=x*i return(x) Overwriting my_module.py 12import my_module as math_lib ## 원하는 이름으로 변경print(math_lib.my_variable) 10 12345# from '모듈 이름' import '함수 이름' : factorial 함수만 importfrom math import factorial ## math.factorial -&gt; factorialn = factorial(5)/factorial(3)print(n) 20.0 123456789101112# 여러 함수를 importfrom math import (factorial, acos, pi, sin)n = factorial(3) + acos(1)print(n)# 모든 함수를 import, * : 모든 것from math import *n = sqrt(5) + fabs(-12.5) ## sqrt : 루트 / fabs : 절대값print(n) 6.0 14.73606797749979 모듈 만들기1234567%%writefile mod1.pydef add(x,y): return x+ydef sub(x,y): return x-y Overwriting mod1.py 123import mod1i = mod1.add(3,4)print(i) 7 123from mod1 import *i = add(3,4)print(i) 7 12i = mod1.sub(4,2)print(i) 2 12345678%%writefile mod2.pyPI = 3.141592def add(x,y): return x+y# 모듈에 변수 포함 가능 Overwriting mod2.py 12import mod2print(mod2.PI) 3.141592","link":"/2021/11/02/Codding/Python/basic/python14-%EB%AA%A8%EB%93%88/"},{"title":"python 리스트","text":"리스트(list)여러개의 자료를 하나의 변수에 담기 위한 자료형. 순서가 존재한다.c 언어 배열과 동일하게 첫번째 자료의 할당 번호는 ‘0’번이다.반면 list의 자료형의 형태는 자유롭다. (실수 정수 문자형 동일한 리스트에서 사용 가능)1a = [1,3,5,7,9] 12print(a)print(a[0],a[3]) #변수_이름[요소_번호] [1, 3, 5, 7, 9] 1 7 1b= a[2] 1whos Variable Type Data/Info ---------------------------- a list n=5 b int 5 c str my_note 1a [1, 3, 5, 7, 9] 12#리스트에서 자료를 뽑아내는 방식 1: 인덱싱 / 2: 슬라이싱a[0:2] # #:#의 의미는 0 &lt;= x &lt; 2 [1, 3] 12b=a[0:2]print(b) [1, 3] 12a=[1, 3.5 , &quot;n o t e&quot;, [1,2,3]]a [1, 3.5, 'n o t e', [1, 2, 3]] 1whos Variable Type Data/Info ---------------------------- a list n=4 b list n=2 c str my_note 1234# 덧셈a = [1,2,3]b = [4,5,6]print(a+b) [1, 2, 3, 4, 5, 6] 12# 곱셈 (반복)print(a*3) [1, 2, 3, 1, 2, 3, 1, 2, 3] 12# 리스트 길이 구하기len(a) 3 1234# 리스트 요소 수정 &lt;-&gt; 튜플 (Tuple) : 수정될 수 없다.a = [1,2,3]a[2] = 4print(a) [1, 2, 4] 1 12## --&gt;&gt; ### str( ) 문자로 변경str(a[2])+&quot;hi&quot; '4hi' 1int(3.6) 3 1234567# 리스트 내의 리스트a = [['apple','banana','cherry']]print(a[0])print(a[0][0]) # 0번 리스트 안의 0번 속성print(a[0][1][3]) # 0번 리스트 안의 1번 속성의 3번 wordprint(a[0][1]) ['apple', 'banana', 'cherry'] apple a banana 123456789# 리스트 요소 삭제 1a = [1,2,3,4,5]del a[2:] ##슬라이싱에서 끝 값을 비웠을 경우 리스트의 끝 값까지 선택된다.print(a)# 리스트 요소 삭제 2a = [1,2,4,3,5]a.remove(3) ## '.' 이후 Tab 키를 누르면 해당 변수에 사용 할 수 있는 명령어 list를 알려준다.print(a) [1, 2] [1, 2, 4, 5] a=[1,2,3,4,5] 라고 쓰면, a 변수는 번지수(이름표) / 실제 a 번지에 들어가 있는 내용물 : 객체(Object)리스트 명령어URL: List method 123456789# 리스트 요소 추가 1 (append)a =[1,2,3]a.append(4)print(a)# 리스트 요소 추가 2 (insert)a =[1,2,3]a.insert(0,4) ## insert(A,B) A번 항목에 B 삽입print(a) [1, 2, 3, 4] [4, 1, 2, 3] 12345678# 리스트 오름차순 정렬 (sort)a=[1,4,3,2]a.sort()print(a)a=['a','c','b']a.sort()print(a) [1, 2, 3, 4] ['a', 'b', 'c'] 1234# 리스트 뒤집기 (reverse)a=['a','c','b']a.reverse()print(a) ['b', 'c', 'a'] 12345# 해당자료는 리스트에서 몇번째 자료인가? (index)a=[1,2,3]print(a.index(3))z=[1,2,3,'haha'](z.index('haha')) 2 3 123456# 리스트에서 끄집어내자: 팝: (pop) --- 구조적으로 변화시킨다a=[1,2,3,4]a.pop()print(a)print(a.pop())print(a) [1, 2, 3] 3 [1, 2] 12a=[1,2,3,4]a.pop(2) 3 123# 지정된 값이 몇개인지 (count)a=[1,2,3,1]a.count(1) 2 1234# 확장 (extend)a=[1,2,3]a.extend([4,5,3])print(a) [1, 2, 3, 4, 5, 3]","link":"/2021/11/01/Codding/Python/basic/python2-list/"},{"title":"pythone 튜플","text":"튜플(tuple)튜플은 리스트와 달리 수정이 불가능하다.리스트는 []로 둘러싸지만 튜플은 ()로 둘러싼다.리스트는 값의 생성, 삭제, 수정이 가능하지만 튜플은 불가능하다.프로그램이 실행되는 동안 그 값이 항상 변하지 않기를 바를 때 사용한다.1reset -f 12345t1 = ()t2 = (1,) # 요소가 1개일 경우 반드시 콤마(,)를 넣어야한다.t3 = (1,2,3)t4 = 1,2,3 # 괄호 생략 가능t5 = ('a','b',('ab','cd')) # 튜플 내부에 튜플 삽입 가능. 단, 리스트는 변경 가능 변수이므로 삽입할 수 없다. 1whos Variable Type Data/Info ----------------------------- t1 tuple n=0 t2 tuple n=1 t3 tuple n=3 t4 tuple n=3 t5 tuple n=3 1234567891011# 인덱싱t1 =(1,2,'a','b')print(t1[0])print(t1[3])# 슬라이싱print(t1[1:])# 덧셈t2 =(3,4)print(t1+t2)# 곱셈print(t2*3) 1 b (2, 'a', 'b') (1, 2, 'a', 'b', 3, 4) (3, 4, 3, 4, 3, 4)","link":"/2021/11/01/Codding/Python/basic/python3-tuple/"},{"title":"python 불","text":"불 자료형 (bool)참(Ture), 거짓(False) 2가지 값만 가진다.123# 따옴표로 감싸지 않아도 변수 지정이 된다.a = True #참b = False #거짓 1type(a) bool 1type(b) bool 12a = 1 == 1 # '=' : 할당 , '==' : equal , '!=' : 같지 않다.print(a) True 자료형의 참과 거짓문자형이나 리스트, 튜플 등은 비어 있으면 거짓(False)가 되고, 비어 있지 않으면 참(True)이 된다. 숫자에서는 그 값이 0이 될 때 거짓이 된다.[문자열]&quot;python&quot; = Ture &quot;&quot; = False [리스트][1,2,3] = Ture [] = False [튜플](1,2,3) = Ture () = False [딕셔너리]{1,2,3} = Ture {} = False [숫자형]0이 아닌 수 = Ture 0 = False 1234567# bool 자료형 활용 예시# while 조건문:# 수행할 문장a=[1,2,3,4]while a: # a가 참이 동안 print(a.pop()) # 리스트 마지막 요소를 하나씩 꺼낸다 4 3 2 1 1234567891011# 예시 2if []: #만약 [ ] 가 참이면, print(&quot;Ture&quot;) # '참' 문자열 출력else: # 만약 [ ] 가 거짓이면, print(&quot;False&quot;) # '거짓' 문자열 출력 if [1,2,3]: print(&quot;Ture&quot;) else: print(&quot;False&quot;) False Ture","link":"/2021/11/01/Codding/Python/basic/python5-bool/"},{"title":"python 변수","text":"변수(Variable), 객체(Object), 자료(Data), 자료형(Data type)자료는 우리가 컴퓨터 메모리에 입력할 컴퓨터 외부에 존재하는 수, 문자 등을 의미자료를 컴퓨터에 입력하기 위해서 일정한 규칙이 필요하고 그 규칙은 자료형으로 규정된다.컴퓨터 외부에 존재하는 자료를 컴퓨터 머리에 입력하는 독특한 방식은 ‘=’ 기호를 쓰고 주로 ‘변수 = 자료’ 형태를 취한다일단 컴퓨터 메모리에 자료를 입력하면 그 자료는 ‘자료’라 부르지 않고 파이썬에선 ‘객체(Object)’라 칭한다.변수란 컴퓨터 메모리 어딘가에 존재하는 객체가 어디에 있는지를 알려주는 주소 개념이다.타 프로그래밍 언어인 C나 Java에선 자료형(Data type)이 무엇인지 친절히 알려줘야한다.반면, 파이썬은 자료를 스스로 살펴보고 자료형이 무엇인지 판단한다. 따라사 그 과정이 필요 없다.변수를 만들 때는 반드시 ‘=’(assignment) 기호를 사용한다.예 : a = [1,2,3] 이면, [1,2,3] 값을 가지는 리스트 자료형(객체)은 메모리에 자동생성되고 변수 a는 리스트가 저장된 메모리 주소를 가리킨다. 12a = [1,2,3]id(a) # id() : 변수가 가리키고 있는 객체의 주고 값을 돌려주는 함수 2456107858688 1234# 여러 변수 한번에 만들기a, b = 1, 2print(a)print(b) 1 2 1234# null 변수 만들기a = Noneprint(a)type(a) None NoneType 123456# 변수에 변수를 할당할 경우b = a ## 주소값 공유print(a)print(b)print(id(a))print(id(b)) None None 140715255699584 140715255699584 12# a와 b가 가리키는 객체가 동일한지 묻는 방법 (is)a is b True 12345# * 주의 *a[1] = 4print(a)print(b)## 주소값 공유란, 자료를 복사하는 것이 아니라 메모리 주소를 서로 공유한다는 것. --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-72-a5aa4d30ec01&gt; in &lt;module&gt; 1 # * 주의 * ----&gt; 2 a[1] = 4 3 print(a) 4 print(b) 5 ## 주소값 공유란, 자료를 복사하는 것이 아니라 메모리 주소를 서로 공유한다는 것. TypeError: 'NoneType' object does not support item assignment 123456789# [:] 사용a = [1,2,3]b = a[:]a[1] = 4print(a)print(b)## [:]는 리스트 전체를 가리키는 방법이기에 자료를 복사하는 경우다.a is b [1, 4, 3] [1, 2, 3] False 1234#1 자연수 a 홀수 짝수 판별a = 13b = a%2print(b) # print 값이 0일 경우 짝수, 1일 경우 홀수 1 123#2 주민등록번호 13자리를 생년월일(YYMMDD)과 그 외 숫자로 분류a = &quot;0101011234567&quot;print(a[:6],&quot;-&quot;,a[6:]) ## a[:6] : 0 =&lt; print &lt; 6 , a[6:] : 6 =&lt; print 010101 - 1234567 12345#3 [1,3,5,4,2] 리스트를 [5,4,3,2,1]로 변경 ## 오름차순 내림차순a = [1,3,5,4,2]a.sort()a.reverse()print(a) [5, 4, 3, 2, 1]","link":"/2021/11/01/Codding/Python/basic/python6-Variable/"},{"title":"python 딕셔너리","text":"딕셔너리 (Dictionary)‘이름’=’홍길동, ‘생일’=’n월n일’과 같이 대응 관계를 나타낼 수 있는 자료형 (연관배열, 해시){key1:Value1, key2:Value2, key3:Value3} —&gt; {} 로 둘러싸여 있고, 쉼표로 구분열쇠(key)가 있어야 값(value)을 얻는다.1reset -f 1dict = {'name':'pei','birth':'1118'} 1whos Variable Type Data/Info ---------------------------- dict dict n=2 1a = {'a':[1,2,3]} # Value에 리스트도 넣을 수 있다. 123456789101112# 딕셔너리 추가a = {1:'a'}print(a)a[2] = 'b' # a[ 2 ]에서 2는 몇번째 요소의 의미가 아니라 key 값을 의미한다.print(a)a[3] = [1,2,3]print(a)a['name'] = 'pay'print(a) {1: 'a'} {1: 'a', 2: 'b'} {1: 'a', 2: 'b', 3: [1, 2, 3]} {1: 'a', 2: 'b', 3: [1, 2, 3], 'name': 'pay'} 123# 삭제 deldel a['name']print(a) {1: 'a', 2: 'b', 3: [1, 2, 3]} 123# 딕셔너리 주의사항 : key 값이 중복될 경우 기존 값을 대체한다.a={1:'a',1:'b'}print(a) {1: 'b'} 123456# 딕셔너리 관련 함수# key 리스트 생성a = {'name':'pey','phone':'01012345678','birth':'1118'}print(a.keys()) #딕셔너리의 key 만을 모아 딕셔너리(dict_keys)로 만듦print(list(a.keys())) dict_keys(['name', 'phone', 'birth']) ['name', 'phone', 'birth'] 123456# Value 리스트 만들기 (values)print(a.values())# key, value 쌍 얻기 (items)print(a.items())# key, value 쌍 모두 지우기 (clear)print(a.clear()) dict_values(['pey', '01012345678', '1118']) dict_items([('name', 'pey'), ('phone', '01012345678'), ('birth', '1118')]) None 1234# key로 value 얻기 (get)a = {'name':'pey','phone':'01012345678','birth':'1118'}print(a.get('name'))a['name'] ## get 대체로 index를 이용 가능 pey 'pey'","link":"/2021/11/01/Codding/Python/basic/python4-dictionary/"},{"title":"python 비교연산자","text":"비교 연산자 &lt; 작다 &gt; 크다 == 같다 != 같지 않다 &gt;= 크거나 같다 &lt;= 작거나 같다 비교 연산 결과는 반드시 bool(참 or 거짓)이 되야한다. x or y 둘 중 하나만 참이면 된다. x and y 둘 모두 참일 경우 not x x가 거짓이면 참이다 12# ex1&gt;3 and 2&lt;4 ## false and ture False 1True and False or True or False and True ## 연산은 왼쪽부터 수행한다. True 1not False True 1not False or not True True 11 or 0 or -1 ## 0 : 거짓(0) , 0 이외 : 참(1 혹은 다른 수) 1 1bool(5) ## bool 값으로 변경 True x in s , x not in sx in list,튜플,문자열 / x not in list,튜플,문자열: list,튜플,문자열 안에 x가 있는가? 11 in [1,2,3] ## 존재하면 ture 하지 않으면 false True 1'a' not in ['a','b'] False 1't' in 'pythone' ## 문자열 같은 경우 해당 문자가 존재하는가로 결정 True 123456pocket = ['phone','money','card']if ('money' in pocket) or ('card' in pocket): ## 괄호 설정으로 확실히하기 print(&quot;택시&quot;)else: print(&quot;보도&quot;) 택시 123456pocket = ['phone','money','card']if not ('money' in pocket) or not ('card' in pocket): print(&quot;보도&quot;)else: print(&quot;택시&quot;) 택시 1234567# elif (else if) elif 문 사용 수에 제한은 없다.pocket = ['phone','card']if 'money' in pocket: print(&quot;택시 by money&quot;) ## 수행문이 1줄일 경우 줄이기 가능elif 'card' in pocket: print(&quot;택시 by card&quot;)else: print(&quot;보도&quot;) 택시 by card","link":"/2021/11/01/Codding/Python/basic/python8-%EB%B9%84%EA%B5%90%EC%97%B0%EC%82%B0%EC%9E%90/"},{"title":"python 제어문","text":"제어문파이썬 프로그래밍의 첫번째 단계 : 변수(variable)를 선언해서 객체(object)를 메모리에 담는 것파이썬 프로그래밍의 두번째 단계 : 객체로 뭔가 컴퓨터가 일을 하게 만든다.컴퓨터가 할 수 있는 일은 크게 나누어 판단과 반복 밖에 없음을 기억한다.1) 판단 : 컴퓨터가 객체들을 비교하여 판단하게 만들기 : if 문2) 반복 : 사람보다 수만배 빠른 두뇌회전 속도를 이용하여 반복계산 시키기 : for 문3) 판단 + 반복 : 두 과정을 결합하여 조건이 맞는 동안만 반복하기 : while 문 if 문123456# ex1money = True ## 불(bool) 타입: True or False ; 판단에 쓰이는 자료이기에 매우 중요하다.if money: ## if 다음 불(bool)이 나온다. print(&quot;택시를 타고 가라&quot;) ## 실행문에는 반드시 들여쓰기를 해줘야 한다.else: print(&quot;걸어 가라&quot;) ## **동일한 수행 동작은 줄을 맞춰야한다.** ## Tab 이용 택시를 타고 가라 money에 True를 입력했으므로 money는 참이다. 따라서 if문 다음 문장이 수행되어 ‘택시를 타고 가라’가 출력된다. 12345678910111213# if 문 기본구조'''if 조건문: 수행할 문장1 ## 조건문 = ture 일 경우 수행 문장 수행할 문장2 ...else: 수행할 문장A ## 조건문 = false 일 경우 수행 문장 수행할 문장B ...''' '\\n\\nif 조건문:\\n 수행할 문장1 ## 조건문 = ture 일 경우 수행 문장\\n 수행할 문장2\\n ...\\nelse:\\n 수행할 문장A ## 조건문 = false 일 경우 수행 문장\\n 수행할 문장B\\n ...\\n'","link":"/2021/11/01/Codding/Python/basic/python7-%EC%A0%9C%EC%96%B4%EB%AC%B8/"},{"title":"python for문","text":"FOR 문 (반복문)123456# fortest_list = ['one','two','three']for i in test_list: print(i) one two three 123x = [1,'2',3]for i in x: print(i,type(i)) 1 &lt;class 'int'&gt; 2 &lt;class 'str'&gt; 3 &lt;class 'int'&gt; 1234a = [(1,2),(3,4),(5,6)]for (first, last) in a: print(first,last) 1 2 3 4 5 6 12345a = [(1,2),(3,4),(5,6)]for i in a: print(i) print(i[0]+i[1]) ## a : 튜플 [ ] (1, 2) 3 (3, 4) 7 (5, 6) 11 formatted print %a%d : 정수 , %f : 실수 , %s : 문자 %#d : # 만큼의 칸을 변수에 할당한다.%#.?f : # 만큼의 칸을 할당하고 ?만큼의 소수점 이하 자리를 표현한다. ‘.’도 #의 칸 수에 해당한다. 12345678910111213# 응용# '총 5명의 학생이 시험을 보았는대 60점이 넘으면 합격 아니면 불합격'marks =[90,25,97,45,80]number = 0for mark in marks: number = number + 1 ## x = x + 1 if mark &gt;= 60: print(&quot;%4d번 학생은 합격입니다.&quot; % number) ## 문자열 외부에 % (변수) 지정 else: print(&quot;%d번 학생은 불합격입니다.&quot; % number) 1번 학생은 합격입니다. 2번 학생은 불합격입니다. 3번 학생은 합격입니다. 4번 학생은 불합격입니다. 5번 학생은 합격입니다. 12345678# range(시작 수, 끝 수) 함수. 단 끝 수는 해당하지 않는다. (시작 수 =&lt; range &lt; 끝 수)# 시작 수 생략 가능 ex) range(6) == (0,1,2,3,4,5)add = 0for i in range(1,11): add = add + i print(add) 55 1234marks = [90,25,67,45,80]for mark in marks: if mark &gt;= 60: print(&quot;%d번 학생 합격&quot; %(marks.index(mark)+1)) ## '+1' index의 경우 0번부터 시작하기 때문에 1번 학생 합격 3번 학생 합격 5번 학생 합격 12345marks = [90,25,67,45,80]for number in range(len(marks)): ## for number in range(5) -&gt; (0,1,2,3,4) if marks[number] &lt; 60: continue ## 아무 작업을 하지 않고 'for'문으로 돌아간다. print(&quot;%d번 학생 합격&quot; %(number+1)) 1번 학생 합격 3번 학생 합격 5번 학생 합격 123456# 2중 루프for i in range(2,5): for j in range(1,5): print(i*j) print('') 2 4 6 8 3 6 9 12 4 8 12 16 123456# 2중 루프for i in range(2,5): for j in range(1,5): print(i*j,end=' ') ## end = '' 이 문장에 끝은 \\n이 아닌 '' 내부 문자로 대신한다. print('') 2 4 6 8 3 6 9 12 4 8 12 16 12345678910111213#for 구문 ## range(#1,#2,#3) 를 이용한 리스트 만들기 #1 : 시작값 / #2 : 종료값 / #3 : 간격result = [x*y for x in range(2,10) for y in range(1,10)]print(result)range(1,30,2)print(type(range(1,30,2)))print(list(range(1,30,2))) ### range 는 list 와 비슷한 형식이다. [2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16, 20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72, 9, 18, 27, 36, 45, 54, 63, 72, 81] &lt;class 'range'&gt; [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]","link":"/2021/11/01/Codding/Python/basic/python9-for%EB%AC%B8/"},{"title":"Matplotlib의 pyplot과 pyplot.subplots","text":"Matplotlib는 matlab 수치해석 프로그램을 python 기반 작업공간에서 다양한 작업을 하기 위해 개발된 외부 라이브러리다.이 라이브러리에서 그래프를 그리는 방식은 크게 2종류가 있는데, 간편하게 사용할 수 있는 pyplot가 첫번째다. 두번째 방식은 객체지향형 모듈에 좀 복잡한 객체 생성을 거쳐야하지만 다양한 설정 및 한 그래프 공간에 여러 축을 표현할 수 있는 pyplot.subplots가 있다. Matplotlib 튜토리얼 pyplot APIpyplot 예제123456789101112131415161718192021import pandas as pd ## pandas 라이브러리f1 = &quot;E:\\\\Fear\\\\Univ\\\\4-2\\\\대기정보전산학\\\\실습\\\\co2.csv&quot;f2 = &quot;E:\\\\Fear\\\\Univ\\\\4-2\\\\대기정보전산학\\\\실습\\\\1880-2019.csv&quot;data1 = pd.read_csv(f1, engine='python')styr = 1900edyr = 2014+1 # [이상:미만] 이므로 2014 -&gt; 2015year = data1['year'] ### ['year'] -&gt; year 열만 읽어낸다.conc = data1['data_mean_global']time = year[styr:edyr]co2 = conc[styr:edyr]print(co2)## [n번째 줄] [co2값]print(co2.head(3)) ## 위에서 n개print(co2.tail(3)) ## 아래서 n개 1900 295.674998 1901 296.006998 1902 296.324997 1903 296.653997 1904 296.953996 ... 2010 388.717029 2011 390.944015 2012 393.015993 2013 395.724979 2014 397.546977 Name: data_mean_global, Length: 115, dtype: float64 1900 295.674998 1901 296.006998 1902 296.324997 Name: data_mean_global, dtype: float64 2012 393.015993 2013 395.724979 2014 397.546977 Name: data_mean_global, dtype: float64 1234567891011121314151617181920212223import numpy as np ## numpy 라이브러리data2 = np.genfromtxt(f2, encoding='utf8',dtype=None,delimiter=',',names=('year','value'), skip_header=5)## 변수 / 인코딩 / 혼합 데이터 : dtype=None / 값 사이 구분 / 열 이름 지정 / 머릿말 생략 열 수size=len(data2)print(size)for i in range(0,size): t = data2['year'][i] ## year 열의 i번째 값을 t에 저장 if t == 1900: styr = i elif t == 2015: edyr = i i=i+1 print(styr)print(edyr)temp = data2['value'][styr:edyr]print(temp) 140 20 135 [-0.07 -0.15 -0.25 -0.37 -0.46 -0.28 -0.21 -0.38 -0.43 -0.44 -0.4 -0.44 -0.34 -0.32 -0.14 -0.09 -0.32 -0.39 -0.3 -0.25 -0.23 -0.16 -0.24 -0.25 -0.24 -0.18 -0.07 -0.17 -0.18 -0.32 -0.11 -0.06 -0.13 -0.26 -0.11 -0.16 -0.12 -0.01 -0.02 0.01 0.16 0.27 0.11 0.1 0.28 0.18 -0.01 -0.04 -0.05 -0.07 -0.15 0. 0.04 0.13 -0.1 -0.13 -0.18 0.07 0.12 0.08 0.05 0.09 0.1 0.12 -0.14 -0.07 -0.01 0. -0.03 0.1 0.06 -0.07 0.03 0.19 -0.06 0.01 -0.07 0.21 0.12 0.23 0.28 0.32 0.19 0.36 0.17 0.16 0.24 0.38 0.39 0.29 0.45 0.39 0.24 0.28 0.34 0.47 0.32 0.51 0.65 0.44 0.43 0.57 0.62 0.64 0.58 0.67 0.64 0.62 0.54 0.65 0.73 0.58 0.64 0.67 0.74] 설정값이 적은 pyplot에선 아래와 같이 기본형태가 정해진 matplotlib를 로드해서 사용한다. 12%matplotlib notebook ## matplotlib 그림툴 로드 123456import matplotlib.pyplot as pltplt.plot(time,co2,'b') ## 'matplotlib named color' 참고plt.xlabel('Year')plt.ylabel('CO₂concentration') ## 한글 유니코드, 특수문자 모두 사용가능plt.show() &lt;IPython.core.display.Javascript object&gt; 1plt.close() 1234plt.plot(time,temp,'r')plt.xlabel('Year')plt.ylabel('Global Mean Surface Temperature')plt.show() &lt;IPython.core.display.Javascript object&gt; 1plt.close() pylot.subplots (객체지향 API)pylot.subplots 예제112345678910111213141516fig, ax1 = plt.subplots() ## matplotlib.pyplot.subplots 참고ax2 = ax1.twinx() ## 축을 하나 더 추가하기 위한 함수 twinxax1.set_ylabel('GMST anomaly (C)') ##ax1.set_xlabel('Year') ## 라벨 지정ax2.set_ylabel('CO₂(ppm)') ##line1 = ax1.plot(time, temp, color='crimson', label='Global temperature anomaly',linewidth = 1.5)line2 = ax2.plot(time, co2, color='limegreen', label='CO₂concentration',linewidth = 2.)lines = line1 + line2 ## 두 장의 line 그림을 합친 변수labels = [l.get_label() for l in lines]ax1.legend(lines, labels, loc='upper left') ## loc 'location' ## matplotlin.axes.Axes.legend 참고plt.show &lt;IPython.core.display.Javascript object&gt; &lt;function matplotlib.pyplot.show(block=None)&gt; 1plt.close() 12345678910111213141516171819fig, ax1 = plt.subplots() ax2 = ax1.twinx() ax1.set_ylabel('GMST anomaly (C)') ax1.set_xlabel('Year') ax2.set_ylabel('CO₂(ppm)') ax1.set_ylim([-0.46,0.72]) ## 범위 조정ax2.set_ylim([280,390]) ##ax1.set_xlim([1900,2014])line1 = ax1.plot(time, temp, color='crimson', label='Global temperature anomaly',linewidth = 1.5)line2 = ax2.plot(time, co2, color='limegreen', label='CO₂concentration',linewidth = 2.)lines = line1 + line2 labels = [l.get_label() for l in lines]ax1.legend(lines, labels, loc='upper left') plt.show &lt;IPython.core.display.Javascript object&gt; &lt;function matplotlib.pyplot.show(block=None)&gt; 1plt.close()","link":"/2021/11/03/Codding/Python/basic_module/Matplotlib's%20pyplot%20&%20pyplot.subplots/"},{"title":"파이썬 라이브러리 math와 numpy","text":"파이썬 모듈 기초 내장 라이브러리 Math파이썬에는 기본적으로 수학 관련 작업을 위해 자주 사용되는 Math 내장 라이브러리가 존재한다. 1234import math # math 라이브러리를 불러오는 명령어. ''' 라이브러리 명령어는 [라이브러리명(혹은 as로 지정한 임의의 명칭)].[명령어]로 사용할 수 있으며. 명령어 자동완성(혹은 명령어 목록)은 tap 키로 사용 및 확인 가능하다. ''' math 라이브러리는 수학 연산을 도와주는 라이브러리로 삼각함수부터 1~N까지 값을 곱해주는 factorial 함수 등 다양한 작업이 가능한 기본 함수들을 제공한다. 12print(math.cos( (300 / 180) * math.pi ))print(math.factorial(4)) 0.5000000000000001 24 파이썬에서 기본적으로 제공하는 List 형식의 행은 사용할 수 있으나 Math 라이브러리가 추가해주는 method 및 상수는 기본적인 식과 pi 등의 상수 뿐으로 다차원 연산으로 인해 행렬이 필요한 vector나 선형대수 등의 작업 형식에 대해선 복잡해지는 불편함이 있다. 외부 라이브러리 Numpy위 문제를 해결해주는 라이브러리가 C언어 기반으로 만들어진 Numpy 외부 라이브러리로 작업 공간에서 행렬 형식의 변수를 사용할 수 있게 도와준다. numpy 명령어 튜토리얼 12import numpy as npprint(np.__version__) 1.20.1","link":"/2021/11/02/Codding/Python/basic_module/python14-%EB%AA%A8%EB%93%88_numpy/"},{"title":"문자열에서 특정 값을 뽑아내고 input을 받는 함수","text":"Kaggle Survey Data Transformation2021 Kaggle Machine Learning &amp; Data Science Survey 에서 질문지를 나누는 작업 중 여러 part로 다수의 칼럼명을 가진 question number 부분의 칼럼명을 뽑아내는 함수를 찾았고, 이 함수에 대응할 수 있으며 질문의 A,B type을 특정해낼 수 있는 input 함수를 짜봤다. 데이터 칼럼명 나누기12345import numpy as npimport pandas as pdfrom warnings import filterwarningsfilterwarnings('ignore') 우선 모든 Question 칼럼명을 추출해낸다.물론 데이터를 나누는 작업 전에 나눌 데이터와 데이터 명을 학습해야한다.kaggle_survey_2021_responses.csv의 칼럼명 형식은 다음과 같다. 'Q'(num1) 'Q'(num1)'_Part_'(num2) 'Q'(num1)'_'(type)'_Part_'(num2) 각각을 Question, sub_Qustion, type_Qustion(sub 포함)으로 볼 수 있다. 1234#df = pd.read_csv(&quot;D:/_Bdata/Codding-base-Python/Python/Python-jupyter/Kaggle Survey - 2021 Analysis - Plotly/kaggle_survey_2021_responses.csv&quot;)df = pd.read_csv(&quot;E:/Fear/Univ/Big_data/Training/Github/Codding-base-Python/Python/Python-jupyter/Kaggle Survey - 2021 Analysis - Plotly/kaggle_survey_2021_responses.csv&quot;)df_col_name = df.columns[1:]df_col_name Index(['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7_Part_1', 'Q7_Part_2', 'Q7_Part_3', 'Q7_Part_4', ... 'Q38_B_Part_3', 'Q38_B_Part_4', 'Q38_B_Part_5', 'Q38_B_Part_6', 'Q38_B_Part_7', 'Q38_B_Part_8', 'Q38_B_Part_9', 'Q38_B_Part_10', 'Q38_B_Part_11', 'Q38_B_OTHER'], dtype='object', length=368) 문자열을 인식해서 input 값을 특정해주는 함수 만들기questions_count에 대응할 수 있는 input 함수를 짜낸다. 12345678910111213141516171819def input_num(): print(&quot;input Question no.: &quot;) Qnum = input() Qnum_subQ = [s for s in df_col_name if &quot;Q&quot;+Qnum+&quot;_&quot; in s] if Qnum_subQ == []: return &quot;Q&quot;+Qnum+&quot; has not part_Q&quot; Question_type = None if [s for s in Qnum_subQ if (&quot;A&quot;or&quot;B&quot;) in s]: print(&quot;input Q&quot;+Qnum+&quot;'s type&quot;) Question_type = input().upper() if Qnum_subQ: print(&quot;input Q&quot;+Qnum+&quot;'s last part no.: &quot;) part_num = input() return questions_count(Qnum,part_num,Question_type) 위 함수는Question number(Qnum)을 입력받은 뒤 이전에 정의한 칼럼명을 추출해 낸 df_col_name 객체내에서 &quot;Q&quot;+Qnum+&quot;_&quot; 문자열이 있는 sub_Question 형식을 찾아낸다. Data Transformation에서 얻어낸 코드는 Qnum 만 있는 경우에 대한 작업이 없으므로 이 경우는 line6 조건문에서 함수를 종료한다. line 9의 if문에선 'A' or 'B' 문자가 들어있는 문자열을 list에서 식별해 해당하는 경우엔 Question_type 객체에 type을 입력 받게 되는 조건문을 작성했다.이 때, upper() 함수를 이용해 소문자로 입력받아도 대문자로 자동변환되게 설정했다. line 14의 조건문은 sub Question의 마지막 열을 입력받는 조건문으로 사용자가 ‘kaggle_survey’에서 직접 확인해서 input 값을 정해야한다. 칼럼명 리스트로 뽑아내기Data Transformation에서 가져온 코드로, 원하는 sub_Question들을 뽑아낼 수 있는 함수다. 123456789101112131415161718192021222324def questions_count(question_num, part_num, Question_type = False): part_questions = [] if Question_type in [&quot;A&quot;,&quot;B&quot;]: part_questions = ['Q'+question_num+&quot;_&quot;+Question_type+&quot;_Part_&quot;+str(j) for j in range(1,int(part_num))] part_questions.append(&quot;Q&quot;+question_num+&quot;_&quot;+Question_type+&quot;_OTHER&quot;) else: part_questions = ['Q'+question_num+'_Part_'+str(j) for j in range(1,int(part_num))] part_questions.append('Q'+question_num+'_OTHER') categories = [] counts = [] for i in part_questions: category = df[i].value_counts().index[0] val = df[i].value_counts()[0] categories.append(category) counts.append(val) combined_df = pd.DataFrame() combined_df['Category'] = categories combined_df['Count'] = counts combined_df = combined_df.sort_values(['Count'], ascending = False) return combined_df part_question List를 만들어서 칼럼명을 저장하는데, Question_type이 입력되었을 경우와 아닌경우로 조건문이 나뉜다. type이 있는 경우: &quot;Q(num)_(type)_Part_(part_num)&quot; type이 없는 경우: &quot;Q(num)_Part_(part_num)&quot; csv 파일을 보면 알 수 있지만, sub_qustion의 마지막 칼럼은 Q(num)_OTHER로 구성된다.위 예외에 대응하기 위해 append함수를 이용해서 list에 Q(num)_OTHER 값을 추가한다. 남은 작업은 기존 df에서 칼럼명과 칼럼에 응답한 합을 구하기 위해value_counts함수의 index와 values를 사용해서 만든 dataframe을 반환하면 Data Transformation 작업이 끝난다. 1input_num() input Question no.: 1 'Q1 has not part_Q' 1input_num() input Question no.: 7 input Q7's last part no.: 12 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Category Count 0 Python 21860 2 SQL 10756 4 C++ 5535 1 R 5334 5 Java 4769 3 C 4709 6 Javascript 4332 10 MATLAB 2935 11 Other 2575 9 Bash 2216 7 Julia 305 8 Swift 242 1input_num() input Question no.: 27 input Q27's type a input Q27's last part no.: 11 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Category Count 0 Amazon Web Services (AWS) 3721 2 Google Cloud Platform (GCP) 3142 1 Microsoft Azure 2450 3 IBM Cloud / Red Hat 572 4 Oracle Cloud 454 7 VMware Cloud 390 10 Other 337 5 SAP Cloud 290 6 Salesforce Cloud 275 8 Alibaba Cloud 259 9 Tencent Cloud 172 외부 링크 Data Transformation 리스트에서 특정 문자열을 포함한 원소 뽑아내기 기억이 안날 때는 응애.. python 함수 python 입출력 python if문 python 비교연산자 python for문 python list_명령어","link":"/2021/11/11/Codding/Python/kaggle_survey/Data-Transformation-input-num/"},{"title":"Kaggle_Survey Graphs","text":"Dynamic plotKaggle_Survey01 - Pie Kaggle_Survey02 - Bar Kaggle_Survey03 - Treemap Data Kaggle_Survey: 2017 Kaggle_Survey: 2018 Kaggle_Survey: 2019 Kaggle_Survey: 2020 Kaggle_Survey: 2021","link":"/2021/12/07/Codding/Python/kaggle_survey/kaggle-survey-graphs/"},{"title":"Kaggle_Survey00: dtype Warning 해결하기 [pandas]","text":"1import pandas as pd 12345#df = pd.read_csv(&quot;D:/_Bdata/Codding-base-Python/Python/Python-jupyter/Kaggle Survey - 2021 Analysis - Plotly/kaggle_survey_2021_responses.csv&quot;)df = pd.read_csv(&quot;E:/Fear/Univ/Big_data/Training/Github/Codding-base-Python/Python/Python-jupyter/Kaggle Survey - 2021 Analysis - Plotly/kaggle_survey_2021_responses.csv&quot;)#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;) E:\\Sadness\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3165: DtypeWarning: Columns (0,195,201,285,286,287,288,289,290,291,292) have mixed types.Specify dtype option on import or set low_memory=False. has_raised = await self.run_ast_nodes(code_ast.body, cell_name, cvs datasat을 불러오는데 위와 같이 DtypeWarning 이라는 경고가 출력되었다. DtypeWarning 해결하기filterwarnings경고 그 자체가 원하는 작업은 아니지만 문제가 발생하지 않는 이상 user는 경고를 무시해도 상관없다. 권장하지 않지만 거슬린다면 warnings 모듈의 경고 필터 ignore를 사용해 경고 출력을 무시할 수 있다. 12from warnings import filterwarningsfilterwarnings('ignore') low_memory하지만 근본적인 해결은 아니므로 terminal이 제안한 방식인 low_memory=False 를 넣어 해결할 수 있다. 1df = pd.read_csv(&quot;csv url&quot;, low_memory=False) 위 방식은 각 column마다 data type을 추측하는 방식으로 옵션명(낮은 메모리)처럼 작업량이 data 크기에 비례해 증가한다. 방대한 데이터를 처리해야되서 Dtype 추측 방식이 부담된다면? dtype 형식 지정불러올 file의 문자 형식을 알고 있다면 dtype을 지정해 warning을 해결하고 memory 가용량도 줄일 수 있다. 1df = pd.read_csv(&quot;csv url&quot;, dtype='unicode') 외부링크 warnings — 경고 제어 DataFrame의 칼럼","link":"/2021/11/18/Codding/Python/kaggle_survey/kaggle-survey00/"},{"title":"Kaggle_Survey01: Pie 시각화 [plotly]","text":"dataset 구조 확인하기1234import pandas as pdimport plotly.graph_objects as go colors = ['#FF0000','#FFBB00','#ffff00','#00FF00','#0000FF','#9C009C'] 12df = pd.read_csv(&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;, dtype='unicode')#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;) Columns 구조는 문자열에서 특정 값을 뽑아내고 input을 받는 함수 포스트에서 확인했으므로 넘어간다. 비교 대상 선정하기2021 kaggle_survey 분석을 계속 진행한다. 베이스는 2021년 기준 survey 응답 count 수가 비슷한 일본과 중국을 선정했다.한국 넣으려다 응답수가 낮아 방향을 바꿨다 kaggle_survey_2021_responses의 모든 row를 사용할 필요 없으므로 Q3(country) 응답에 Jp(Japan), Ch(China)인 요소만 추출한다. 1234df_ChJp = df[df.Q3.isin([&quot;Japan&quot;,&quot;China&quot;])]df_Ch = df_ChJp[df_ChJp.Q3.isin([&quot;China&quot;])]df_Jp = df_ChJp[df_ChJp.Q3.isin([&quot;Japan&quot;])] Gender [plotly: Pie]일단 간단히 비교할 수 있는 Gender(Q2)와 Age(Q1) 중 Q2를 Pie 그래프로 시각화할 예정이다. 간단한 Pie 그래프를 사용할 예정이고, 간단한 그래프인 만큼 pie 요소 option을 만질 여지가 많다.따라서 express가 아닌 graph_objects 모듈로 작업했다. plotly.graph_objects.Pie Pie Charts in Python plotly.graph_objects.Pie를 사용해서 만든 그래프를 Figure 형식으로 지정하고 fig_j 객체에 저장한다. 아래 코드는 필수 요소인 lables와 values만 넣은 결과다. 1234567fig_j = go.Figure(data=[go.Pie(labels=df_Jp['Q2'][1:].value_counts().index, values=df_Jp['Q2'][1:].value_counts().values ) ] )fig_j.show() 대응하는 value_counts 함수 만들기앞으로 많은 그래프를 그려낼거고 df_Jp['Q2'][1:].value_counts() 형식이 반복된다. df_Jp['Q2'][1:].value_counts()을 객체로 만들어서 넣어도 되겠지만, 이번 작업에서 사용할 df은 df_Jp&amp;df_Ch 2개로 dataframe 객체의 변동이 있고, 칼럼명도 Q1,Q2로 변동이 있다.위 조건에 부합하는 간단한 함수 하나 만들겠다. 123def indiQ_value_counts(dataframe, indi_Qnum): df = dataframe[indi_Qnum][1:].value_counts() return df 12df_Jp_gen = indiQ_value_counts(df_Jp, 'Q2')df_Ch_gen = indiQ_value_counts(df_Ch, 'Q2') subplots: 그래프 figure 합치기japan과 china 함수를 각각의 figure로 보기엔 불편하다.subplost를 이용해 하나의 fig로 합칠 예정이다. plotly.subplots.make_subplots Subplots Types 1from plotly.subplots import make_subplots 1234567Pie_J = go.Pie(labels=df_Jp_gen.index, values=df_Jp_gen.values )Pie_C = go.Pie(labels=df_Ch_gen.index, values=df_Ch_gen.values ) 123456fig = make_subplots(rows=1, cols=2,specs=[[{&quot;type&quot;: &quot;domain&quot;},{&quot;type&quot;: &quot;domain&quot;}]])fig.add_trace(Pie_J,row=1,col=1)fig.add_trace(Pie_C,row=1,col=2)fig.show() text, color 커스텀커스텀 색상이나 타이틀 등 텍스트를 넣어 간단한 시각적 커스텀을 입혀보자 1234567891011Pie_J = go.Pie(labels=df_Jp_gen.index, values=df_Jp_gen.values, title='Japan', textinfo ='label,percent' )Pie_C = go.Pie(labels=df_Ch_gen.index, values=df_Ch_gen.values, title='China', textinfo ='label,percent' ) 123456789fig = make_subplots(rows=1, cols=2,specs=[[{&quot;type&quot;: &quot;domain&quot;},{&quot;type&quot;: &quot;domain&quot;}]])fig.add_trace(Pie_J,row=1,col=1)fig.add_trace(Pie_C,row=1,col=2)fig.update_layout(title_text='Gender')fig.update_traces(marker=dict(colors=colors[1:]))fig.show() 시각 요소 커스텀Trace의 title이 Pie 외부에 위치하는게 맘에들지 않는 부분을 수정하기 위해 시각 효과에서 legend를 제거하는 등 각종 요소 값을 변경한다. 123456789101112131415Pie_J = go.Pie(labels=df_Jp_gen.index, values=df_Jp_gen.values,# pull=[0,0,0.2,0.2,0.2], ## 중앙에서 n% 떨어진 위치 할당 title='Japan', textinfo ='label,percent', hole=0.3 )Pie_C = go.Pie(labels=df_Ch_gen.index, values=df_Ch_gen.values,# pull=[0,0,0.2,0.2,0.2], title='China', textinfo ='label,percent', hole=0.3 ) 12345678910111213fig = make_subplots(rows=1, cols=2,specs=[[{&quot;type&quot;: &quot;domain&quot;},{&quot;type&quot;: &quot;domain&quot;}]])fig.add_trace(Pie_J,row=1,col=1)fig.add_trace(Pie_C,row=1,col=2)fig.update_layout(title_text='Gender',# showlegend=False, ## ledend(lable 목록) 시각적으로 제거 margin=dict(t=0, b=0, l=0, r=0) )fig.update_traces(marker=dict(colors=colors[1:]))fig.show() 외부링크 plotly.graph_objects.Pie Pie Charts in Python plotly.subplots.make_subplots Subplots Types","link":"/2021/12/02/Codding/Python/kaggle_survey/kaggle-survey01/"},{"title":"Kaggle_Survey03-A: value_counts error size 0 [pandas]","text":"Kaggle_Survey03 - Treemap 시각화 [plotly]에서 넘어왔다. 오류 식별12345678910111213141516171819202122df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([&quot;China&quot;])]df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([&quot;Japan&quot;])]## Q7(Program_Language): 칼럼번호 8~20 - othersdf21_Jp_PL = pd.DataFrame()df21_Jp_PL['Program_Language'] = [df21_Jp[col][1:].value_counts().index[0] for col in df21_Jp.columns[7:20]]df21_Jp_PL['counts'] = [df21_Jp[col][1:].value_counts().values[0] for col in df21_Jp.columns[7:20]]## Q7(Program_Language): 칼럼번호 8~20 - othersdf21_Ch_PL = pd.DataFrame()df21_Ch_PL['Program_Language'] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]]df21_Ch_PL['counts'] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]]## 제거된 나라 칼럼과 value를 각각 삽입 및 통합df21_Jp_PL.insert(0, 'Country', 'Japan')df21_Ch_PL.insert(0, 'Country', 'China')df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=True) --------------------------------------------------------------------------- IndexError Traceback (most recent call last) &lt;ipython-input-5-89d86f0a4d0b&gt; in &lt;module&gt; 11 ## Q7(Program_Language): 칼럼번호 8~20 - others 12 df21_Ch_PL = pd.DataFrame() ---&gt; 13 df21_Ch_PL['Program_Language'] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]] 14 df21_Ch_PL['counts'] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]] 15 &lt;ipython-input-5-89d86f0a4d0b&gt; in &lt;listcomp&gt;(.0) 11 ## Q7(Program_Language): 칼럼번호 8~20 - others 12 df21_Ch_PL = pd.DataFrame() ---&gt; 13 df21_Ch_PL['Program_Language'] = [df21_Ch[col][1:].value_counts() .index[0] for col in df21_Ch.columns[7:20]] 14 df21_Ch_PL['counts'] = [df21_Ch[col][1:].value_counts() .values[0] for col in df21_Ch.columns[7:20]] 15 E:\\Sadness\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py in __getitem__(self, key) 4295 if is_scalar(key): 4296 key = com.cast_scalar_indexer(key, warn_float=True) -&gt; 4297 return getitem(key) 4298 4299 if isinstance(key, slice): IndexError: index 0 is out of bounds for axis 0 with size 0 결측 column 식별 및 제거*IndexError: index 0 is out of bounds for axis 0 with size 0오류가 식별됐다.아마 China, Program_Language의 특정 응답이 없어서 발생한거같다. N/A 개수를 식별해보자 12print(&quot;df21_Ch\\'s rows_num:&quot;,len(df21_Ch))print(df21_Ch.isnull().sum().iloc[7:20]) df21_Ch's rows_num: 814 Q7_Part_1 76 Q7_Part_2 729 Q7_Part_3 599 Q7_Part_4 588 Q7_Part_5 546 Q7_Part_6 602 Q7_Part_7 728 Q7_Part_8 810 Q7_Part_9 809 Q7_Part_10 783 Q7_Part_11 645 Q7_Part_12 814 Q7_OTHER 787 dtype: int64 Q7_Part_12 이 녀석이 문제였다. 행 개수는 814개고 Part_12의 N/A 개수도 814개이다. 위 식별 과정의 시행 횟수가 많아진다면 if 문을 사용한 define을 사용해도 되겠지만 일단은 수동으로 제거하자. 123456789101112131415161718192021222324df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([&quot;China&quot;])]df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([&quot;Japan&quot;])]## Q7(Program_Language): 칼럼번호 8~20 - othersdf21_Jp_PL = pd.DataFrame()df21_Jp_PL['Program_Language'] = [df21_Jp[col][1:].value_counts().index[0] for col in df21_Jp.columns[7:19]]df21_Jp_PL['counts'] = [df21_Jp[col][1:].value_counts().values[0] for col in df21_Jp.columns[7:19]]## 2021 China: Q7_Part12(None) value == 0이므로 결측값 제거df21_Ch_rmQ07P12 = df21_Ch.drop(['Q7_Part_12'], axis='columns')## Q7(Program_Language): 칼럼번호 8~20 - others - Q7_Part12(None)df21_Ch_PL = pd.DataFrame()df21_Ch_PL['Program_Language'] = [df21_Ch_rmQ07P12[col][1:].value_counts() .index[0] for col in df21_Ch_rmQ07P12.columns[7:18]]df21_Ch_PL['counts'] = [df21_Ch_rmQ07P12[col][1:].value_counts() .values[0] for col in df21_Ch_rmQ07P12.columns[7:18]]## 제거된 나라 칼럼과 value를 각각 삽입 및 통합df21_Jp_PL.insert(0, 'Country', 'Japan')df21_Ch_PL.insert(0, 'Country', 'China')df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=True)","link":"/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-a/"},{"title":"Kaggle_Survey02: Bar 시각화 [plotly]","text":"이전 포스팅들과 동일 과정1234import pandas as pdimport plotly.graph_objects as go colors = ['#FF0000','#FFBB00','#ffff00','#00FF00','#0000FF','#9C009C'] 12df = pd.read_csv(&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;, dtype='unicode')#df = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;) 1234df_ChJp = df[df.Q3.isin([&quot;Japan&quot;,&quot;China&quot;])]df_Ch = df_ChJp[df_ChJp.Q3.isin([&quot;China&quot;])]df_Jp = df_ChJp[df_ChJp.Q3.isin([&quot;Japan&quot;])] 123def indiQ_value_counts(dataframe, indi_Qnum): df = dataframe[indi_Qnum][1:].value_counts() return df 12df_Jp_age = indiQ_value_counts(df_Jp, 'Q1')df_Ch_age = indiQ_value_counts(df_Ch, 'Q1') Age [plotly: Bar]01에 이어 이번에도 두 나라의 값을 비교할 예정이니 아예 처음부터 데이터를 합쳐서 표현한 그래프를 뽑아내겠다. plotly.graph_objects.Bar Bar Charts in Python 12345678Bar_C = go.Bar(name='China', x=df_Ch_age.index, y=df_Ch_age.values )Bar_J = go.Bar(name='Japan', x=df_Jp_age.index, y=df_Jp_age.values ) 12345678fig = go.Figure(data=[Bar_C, Bar_J])fig.update_layout(title='Age: Japan &amp; China', xaxis_title=&quot;Age&quot;, yaxis_title='Counts' )fig.show() bar chart에서 stack 형식을 사용하거나 group과 stack을 동시에 사용하지 않는 이상 하나의 plot에 여러 bar data를 넣으면 default는 group 형식으로 뽑힌다. index 정렬나이 순으로 출력하고 싶었지만, value_counts 할 때 원본 dataframe의 요소 순서로 index가 들어가버렸다. 그래서 value_counts된 dataframe을 sort_index를 사용해 오름차순 정렬한다. 12df_Ch_sortAge = df_Ch_age.sort_index()df_Jp_sortAge = df_Jp_age.sort_index() 60-69 구간에 더미값 추가정렬은 문제없어 보였지만 70+와 60-69 순서가 이상하다. 1df_Ch_sortAge 18-21 206 22-24 274 25-29 159 30-34 109 35-39 39 40-44 14 45-49 8 50-54 1 55-59 2 70+ 1 Name: Q1, dtype: int64 아무래도 China에 60-69 구간에 해당하는 value가 없어서 index 추가가 안된거같다. index가 전부 있는 Japan을 앞 순서로 바꿔도 되겠지만, 그냥 China 60-69 index를 추가하고 임의로 값 0를 넣겠다. 12df_Ch_sortAge.loc['60-69'] = 0df_Ch_sortAge = df_Ch_sortAge.sort_index() 외부링크 plotly.graph_objects.Bar Bar Charts in Python","link":"/2021/12/03/Codding/Python/kaggle_survey/kaggle-survey02/"},{"title":"Kaggle-Survey03-B: replace가 작동 안함 [pandas]","text":"Japan &amp; China: IDE’sProgram_Language 과정과 동일 Treemap을 뽑으려니 “Jupyter (JupyterLab, Jupyter Notebooks, etc)”와 “Visual Studio / Visual Studio Code”가 너무 길어 플롯에서 식별하기 난감하다. 각각 “Jupyter”와 “VS / VSCode”로 간략화 하려한다. 1차 시도12df_IDEs_JnC_21n19.replace(to_replace = 'Jupyter (JupyterLab, Jupyter Notebooks, etc)', value = 'Jupyter', inplace = True)df_IDEs_JnC_21n19.replace(to_replace = 'Visual Studio / Visual Studio Code', value = 'VS / VSCode', inplace = True) 둘 다 변경되지 않았다. 2차 시도실제 string을 확인해보자. 12print(df_IDEs_JnC_21n19.loc[0].tolist())print(df_IDEs_JnC_21n19.iloc[29].tolist()) ['2021', 'Japan', 'Jupyter (JupyterLab, Jupyter Notebooks, etc) ', 200] ['2019', 'China', ' Visual Studio / Visual Studio Code ', 200] 뒤(혹은 앞뒤)로 공백이 들어간 상황임을 알 수 있다. 12df_IDEs_JnC_21n19.replace(to_replace = 'Jupyter (JupyterLab, Jupyter Notebooks, etc) ', value = 'Jupyter', inplace = True)df_IDEs_JnC_21n19.replace(to_replace = ' Visual Studio / Visual Studio Code ', value = 'VS / VSCode', inplace = True) 성공적으로 변경됐다. 더 간편하게근대 이럴거면 그냥 요소를 뽑아내서 직접 삽입하는게 편할 듯하다. 12df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[0,&quot;IDE\\'s&quot;], value = 'Jupyter', inplace = True)df_IDEs_JnC_21n19.replace(to_replace = df_IDEs_JnC_21n19.loc[29,&quot;IDE\\'s&quot;], value = 'VS / VSCode', inplace = True) 인덱스와 칼럼명을 직접 지정해 뽑아낸 string과 동일한 요소를 모두 변경한다. 정규식?‘ Visual Studio / Visual Studio Code ‘ 요소는 실제로는 아니지만 정규 표현식으로 해석할 여지가 있다.정 방법을 못찾겠다면 regex 요소를 True로 지정해보는것도 방법이 될 수 있다. 12df_IDEs_JnC_21n19.replace(to_replace = 'Jupyter (JupyterLab, Jupyter Notebooks, etc) ', value = 'Jupyter', inplace = True)df_IDEs_JnC_21n19.replace(to_replace = 'Visual Studio / Visual Studio Code', value = 'VS / VSCode', inplace = True, regex = True) IDE’s Treemap 외부링크 pandas.DataFrame.replace","link":"/2021/12/06/Codding/Python/kaggle_survey/kaggle-survey03-b/"},{"title":"Kaggle_Survey03: Treemap 시각화 [plotly]","text":"기본 설정moduletreemap으로 많은 요소를 건드리진 않을 예정이니 express 라이브러리를 사용 12import pandas as pdimport plotly.express as px Import data2021년 자료 외에도 19년 자료를 추가 1234df21 = pd.read_csv(&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;, dtype='unicode')df19 = pd.read_csv(&quot;https://raw.githubusercontent.com/hangack/project-green/main/Kaggle_Survey-2021/data/kaggle-survey-2019/multiple_choice_responses.csv&quot;, dtype='unicode')#df21 = pd.read_csv(&quot;../input/kaggle-survey-2021/kaggle_survey_2021_responses.csv&quot;, dtype='unicode')#df19 = pd.read_csv(&quot;../input/kaggle-survey-2019/multiple_choice_responses.csv&quot;, dtype='unicode') Japan &amp; China: Programming_Languages2021 Japan &amp; China total2021년 Q3(Country) 일본 중국 추출 dataframe 1df21_ChJp = df21[df21.Q3.isin([&quot;Japan&quot;,&quot;China&quot;])] Split Country나라별 value_counts를 위해 각 나라로 dataframe 분리 2021value_counts 오류 식별 결측값 제거 123456789101112131415161718192021222324df21_Ch = df21_ChJp[df21_ChJp.Q3.isin([&quot;China&quot;])]df21_Jp = df21_ChJp[df21_ChJp.Q3.isin([&quot;Japan&quot;])]## Q7(Program_Language): 칼럼번호 8~20 - othersdf21_Jp_PL = pd.DataFrame()df21_Jp_PL['Program_Language'] = [df21_Jp[col][1:].value_counts().index[0] for col in df21_Jp.columns[7:19]]df21_Jp_PL['counts'] = [df21_Jp[col][1:].value_counts().values[0] for col in df21_Jp.columns[7:19]]## 2021 China: Q7_Part12(None) value == 0이므로 결측값 제거df21_Ch_rmQ07P12 = df21_Ch.drop(['Q7_Part_12'], axis='columns')## Q7(Program_Language): 칼럼번호 8~20 - others - Q7_Part12(None)df21_Ch_PL = pd.DataFrame()df21_Ch_PL['Program_Language'] = [df21_Ch_rmQ07P12[col][1:].value_counts() .index[0] for col in df21_Ch_rmQ07P12.columns[7:18]]df21_Ch_PL['counts'] = [df21_Ch_rmQ07P12[col][1:].value_counts() .values[0] for col in df21_Ch_rmQ07P12.columns[7:18]]## 제거된 나라 칼럼과 value를 각각 삽입 및 통합df21_Jp_PL.insert(0, 'Country', 'Japan')df21_Ch_PL.insert(0, 'Country', 'China')df21_PL_JnC = pd.concat([df21_Jp_PL,df21_Ch_PL], ignore_index=True) 2019 Japan &amp; China total2019년 Q3(Country) 일본 중국 추출 dataframe 1df19_ChJp = df19[df19.Q3.isin([&quot;Japan&quot;,&quot;China&quot;])] 20192021년과 동일 과정 123456789101112131415161718192021222324df19_Ch = df19_ChJp[df19_ChJp.Q3.isin([&quot;China&quot;])]df19_Jp = df19_ChJp[df19_ChJp.Q3.isin([&quot;Japan&quot;])]## Q18(Program_Language): 칼럼번호 83~95 - others &amp; other(text)df19_Jp_PL = pd.DataFrame()df19_Jp_PL['Program_Language'] = [df19_Jp[col][1:].value_counts().index[0] for col in df19_Jp.columns[82:93]]df19_Jp_PL['counts'] = [df19_Jp[col][1:].value_counts().values[0] for col in df19_Jp.columns[82:93]]## 2019 China Q18_Part11(None) 결측값 제거df19_Ch_rmQ18P11 = df19_Ch.drop(['Q18_Part_11'], axis='columns')## Q18(Program_Language): 칼럼번호 83~95 - others &amp; other(text) - Q18_Part11(None)df19_Ch_PL = pd.DataFrame()df19_Ch_PL['Program_Language'] = [df19_Ch_rmQ18P11[col][1:].value_counts() .index[0] for col in df19_Ch_rmQ18P11.columns[82:92]]df19_Ch_PL['counts'] = [df19_Ch_rmQ18P11[col][1:].value_counts() .values[0] for col in df19_Ch_rmQ18P11.columns[82:92]]df19_Jp_PL.insert(0, 'Country', 'Japan')df19_Ch_PL.insert(0, 'Country', 'China')df19_PL_JnC = pd.concat([df19_Jp_PL,df19_Ch_PL], ignore_index=True) Split year{Country}다른 csv인 2019자료와 2021자료 통합 1234df21_PL_JnC.insert(0, 'year', '2021')df19_PL_JnC.insert(0, 'year', '2019')df_PL_JnC_21n19 = pd.concat([df21_PL_JnC,df19_PL_JnC], ignore_index=True) Program_Language의 19년도 21년도 통합 value_counts의 정렬(연도 - 언어 - 나라) values는 Program_Language의 value_counts Programming_Languages [treemap]이전 언급처럼 treemap으로 많은 요소를 건드리진 않을 예정이니 express 라이브러리를 사용했다. path 요소의 순서는 부모자식 순서로 dataframe 칼럼 순서에 제한되지 않는다. -&gt; path 요소 조정으로 순서를 맘대로 바꿀 수 있다. color 기준: country 123456789fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(&quot;2019n2021&quot;),'year','Program_Language','Country'], values='counts', color='Country', color_discrete_map={'(?)':'lightgrey', 'China':'gold', 'Japan':'darkblue'})fig.data[0].textinfo = 'label+percent parent+value'fig.update_layout(margin = dict(t=0, l=0, r=0, b=0))fig.show() color 참조 값을 counts로 넣었을 때는 plotly.express 설정대로 colorbar가 나온다. color 기준: counts 1colors = ['#D2691E','#E19B50','#E6C17B','#F0CB85','#F5D08A','#FFEFD5'] 12345678fig = px.treemap(df_PL_JnC_21n19, path=[px.Constant(&quot;2019n2021&quot;),'year','Program_Language','Country'], values='counts', color='counts', color_continuous_scale=colors)fig.data[0].textinfo = 'label+percent parent+value'fig.update_layout(margin = dict(t=0, l=0, r=0, b=0))fig.show()","link":"/2021/12/05/Codding/Python/kaggle_survey/kaggle-survey03/"},{"title":"의사결정트리(Decision Tree)에 대한 간단 설명","text":"간단 설명의사결정트리는 여러 객체가 모인 집단에서 절차적 “Yes”||”No” 혹은 간단한 문답문을 이용해 원하는 특성을 가진 객체를 분류해내는 과정이다. 주변에서 한가지 예시를 살펴본다면 법률로 경차를 정의해서 고속도로 / 보험 등 각종 형식으로 혜택을 주는 경우가 있다.돈과 관련된 문제인 만큼 경차를 분류하는 기준은 필수가 된다. 한국에서의 경차를 보자면 배기량 1,000cc 이하 길이 3.6m 이하 너비 1.6m 이하 높이 2.0m 이하 인 자동차로 정의한다. 그러면 의사결정트리는 어떻게 만들어질까?우선 나라마다 정의한 경차에 대한 포멧이 다르기 때문에 간단한 문답문을 이용해 어느 나라의 포멧을 불러올지 결정한다. 다음으로 배기량이나 차량의 크기같은 포멧이 만족하는지 하나씩 Y/N 문답을 절차적으로 진행한다. 효율성에 관해선 다음에 설명하고 이번 포스팅에선 배기량부터 순차적으로 진행한다. 위와 같은 의사결정트리(Decision Tree) 과정을 통해 한국의 법률에서 경차로 정의되는 차량을 나눌 수 있다.객체의 종류가 적다면 큰 문제는 없겠지만, 차량 객체 각각에 대한 데이터를 가지고 있고 법률적인 포멧이 있다면 수 많은 차량에 대한 포멧을 컴퓨터 작업을 통해 간단히 나눌 수 있을 것이다. 추가정보 Matlab utube Minsuk Heo 허민석 utube 엔트로피 심화 및 수식 설명","link":"/2021/11/04/Big_data/Decision-Tree/"},{"title":"평가지표 RMSE와 MAE, MSE","text":"DATARow(행)가 $n$개 있는 dataframe에서;실측 값에 대한 dataframe의 column(열)을 $Y$로 봤을 때, $Y$는 다음과 같은 원소의 집합이 된다. Y= \\begin{pmatrix} y_1 \\\\ y_2\\\\ \\vdots\\\\ y_n \\end{pmatrix}모델링 결과 등 $Y$에 대한 추정값의 집합이 $\\hat{Y}$다. \\hat Y= \\begin{pmatrix} \\hat y_1 \\\\ \\hat y_2\\\\ \\vdots\\\\ \\hat y_n \\end{pmatrix}평가 지표실측값$Y$와 추정값$\\hat Y$가 있으니 두 값의 차이인 오차(error: $\\Delta y_i = y_i-\\hat{y_i}$)가 발생한다.$\\Delta y_i$를 여러 방식으로 가공해서 측정값의 신뢰도를 보여주는게 평가 지표다. 다양한 평가지표 중 RMSE에 관해 공부할 것이며, MSE, MAE는 RMSE와 매우 유사한 형태를 가진다. MAE(Mean Absolute Error): 평균 절대 오차MAE=\\sum_{i=1}^n\\frac{\\vert y_i-\\hat{y_i}\\vert}{n}$\\Delta y_i$의 절대값을 모두 더한 값의 평균이다. MSE(Mean Squared Error): 평균 제곱 오차MSE=\\sum_{i=1}^n\\frac{(y_i-\\hat{y_i})^2}{n}$\\Delta y_i$의 제곱을 모두 더한 값의 평균이다. RMSE(Root Mean Square Error): 평균 제곱근 오차RMSE=\\sqrt{\\sum_{i=1}^n\\frac{(y_i-\\hat{y_i})^2}{n}}$\\Delta y_i$의 제곱을 모두 더한 값의 평균에 Root를 씌운 형태로 $\\sqrt{MSE}=RMSE$다. 특징위 세 지표는 모두 오차 그 자체인 $y_i-\\hat{y_i}$를 포함해 값이 낮을수록 좋은 추정모델임을 의미한다.단, 실측값과 추정값의 차에 지나치게 의존하는 경향을 보여 $3-1=2$와 $100-102=2$ 모두 동일한 평가로 보여진다. 위 세 지표는 오차 자체에 의존하는 만큼 직관적인 지표가 나와 대중에게 설명하기 좋다.MAE로 예를 들자면, 600과 620의 차는 20이므로 20의 예측 오류가 발생했다고 설명할 수 있다. MSE의 경우 오차 제곱하기 때문에 $\\vert error\\vert&lt;1$일 경우 error값은 작아지고 반대의 경우 커지는 왜곡이 발생한다.RMSE에서는 MSE에 Root를 씌웠기 때문에 MSE만큼의 왜곡은 발생하지 않는다. python간단한 예시로 아래의 $Y_1$과 $Y_2$ python 예제가 있다. MAE12345678910import numpy as npdef mean_absolute_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): error = error + np.abs(yt-yp) mae = error / len(y_true) return mae MSE12345678910import numpy as npdef mean_squared_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): error = error + (yt - yp) ** 2 mse = error / len(y_true) return mse RMSE1234567891011import numpy as npdef root_rmse_squared_error(y_true, y_pred): error = 0 for yt, yp in zip(y_true, y_pred): error = error + (yt - yp) ** 2 mse = error / len(y_true) rmse = np.round(np.sqrt(mse), 3) return rmse 12345y1_true = [400, 300, 800]y1_pred = [380, 320, 777]y2_true = [400, 300, 800, 900]y2_pred = [380, 320, 777, 600] 123print(&quot;MAE:&quot;, mean_absolute_error(y1_true, y1_pred))print(&quot;MSE:&quot;, mean_squared_error(y1_true, y1_pred))print(&quot;RMSE:&quot;, root_rmse_squared_error(y1_true, y1_pred)) MAE: 21.0 MSE: 443.0 RMSE: 21.048 123print(&quot;MAE:&quot;, mean_absolute_error(y2_true, y2_pred))print(&quot;MSE:&quot;, mean_squared_error(y2_true, y2_pred))print(&quot;RMSE:&quot;, root_rmse_squared_error(y2_true, y2_pred)) MAE: 90.75 MSE: 22832.25 RMSE: 151.103 오차값이 20~30 사이에서 놀다가 $\\Delta y=300$인 이상값이 하나 들어가면서 지표가 지나치게 커짐을 확인할 수 있다.마찬가지로 MSE와 RMSE의 왜곡 차이도 확연히 드러난다.","link":"/2021/11/12/Big_data/MAE-MSE-RMSE/"},{"title":"[TGA] The Game Awards 2021 봤음","text":"TGA 2021 작년 야랄났던 그 시상식 2021년이번년도 TGA GOTY 게임은 하고 싶지만 실행도 못해보겠네 ㅠ근대 저 아저씨는 실제로도 저런 말투 엌ㅋㅋ 데스 루프는 난 들어본적 없는데 계속 나오네.케나, 데스루프 중 하나는 해볼 듯 발매 예정드에 인퀴지션 만든 사람이 새로운 스튜디오에서 나이팅게일이란 게임을 만든다. 발헤임? 이카루스?에 스토리를 얹은 스팀펑크 느낌인건가. 드에 만든 사람이라니 일단 기대컨 들어간다 IP 깡패 즌쟁망치는 매년 등장하네 죽지 않아 부?활할 파란 고슴도치는 젤다 라이크? 히어로 영화 게임 스핀오프는 그닥이지만 아캄 시리즈는 괜춘다고 보기에 살자 특공대, 괜찮을지도 원더(보더)랜드는 클리셰들이 내 취향일거같은대.그래서 앨리스 어사일럼은 대체 언제 나옴 도깨V 개같이 흥행? 요구르팅 노선? 자칫하면 심심할 수 밖에 없는 플레이를 어떤 방식으로 풀었을지 기대 중","link":"/2021/12/11/hobby/games/TGA2021/"},{"title":"파이참 파일 확장자 타입 변경하기","text":"파이참에서 파일을 만들다보면 확장자명을 지정하지 않고 파일을 만드면서 text 형식으로 지정하는 경우가 있다.보통의 경우 auto-detected이지만, 잘못 지정하면 확장자를 바꿔도 기존에 지정한 형식으로 읽어온다.이 경우 지정한 형식을 제거해주면 된다. Setting - File Types","link":"/2021/12/11/Codding/Python/Setting/pycharm-file-type/"},{"title":"selenium 사용하기","text":"크롤링 문제 발생G2G 페이지를 크롤링하면서 원하는 html 구문이 requests 방식으로는 스크래핑이 안되서 이유를 찾아봤다.g2g 페이지는 javascript를 활용, 동적 페이지로 구성된 녀석이라 페이지를 열어서 활성된 html 구문을 가져와야 원하는 정보를 받아올 수 있는 경우였다. Selenium직접 페이지를 열기 위한 라이브러리 selenium의 파이썬(or 아나콘다) 설치를 진행한다.12$ pip install selenium$ conda install selenium나의 경우 venv 환경을 이용할 예정이라 venv 경로에서 bash를 이용해 pip install 해줬다. 브라우저 webdriver 설치selenium을 받으면 끝이 아니라 selenium으로 html 구문을 받아오기 위해 webdriver를 받아와서 지정해줘야한다. Chrome(old), Chrome(new) Firefox Edge Safari 사용중인 os 기준으로 driver를 다운받으면 되지만, chrome의 경우 chrome 버전에 맞춰서 받아주자. 난 비교적 깔린 확장프로그램이 적어 가벼운 Firefox로 진행했다. 사용하기위에서 다운받은 webdriver를 압축해제 해주고 받은 브라우저에 맞춰서 driver를 지정해주자. 123456from selenium import webdriverdriver = webdriver.Firefox(executable_path=&quot;webdriver 경로.exe&quot;)url = &quot;https://www.g2g.com/categories/new-world-coins&quot;driver.get(url)html = driver.page_source 일반 Firefox와 Nightly 버전이 같이 깔려있어서 그런지 Firefox Nightly 버전으로 열렸다. 불러온 html 구문을 BeautifulSoup, Scrapy와 같은 크롤링 라이브러리 명령어에 가져올 수 있다. 123from bs4 import BeautifulSoupsoup = BeautifulSoup(html) tipdriver 명령어만 이용하면 url을 직접 넣어줘야하지만,클릭, 새창에서 열기 등 다양한 명령어를 사용할 수 있다. 필요할 때 찾아볼 예정이다. 페이지 크롤링이 끝났고, 브라우저가 열려있을 필요 없다면 종료해주면 된다. 12driver.close() # 탭 닫기driver.quit() # 창 닫기 외부링크 Python Selenium 사용법 G2G javascript crawling","link":"/2022/01/16/Codding/Python/crawling/selenium-driver/"},{"title":"datetime 날짜와 시간","text":"datatimedatetime 모듈은 특정 시간과 날짜를 불러오는 파이썬 내장 모듈이다. 날짜와 시간 함수datatime 모듈을 사용하면 시간 날짜 UTC timezone을 불러올 수 있고, 내장 함수로 data, time 등을 사용해 날짜 혹은 시간만 지정하고 특정 시간대를 지정해 불러올 수도 있다.12345import datetimeprint(datetime.date.today())print(datetime.datetime.today())print(datetime.time(12,59,33, microsecond=333333, tzinfo=datetime.timezone.utc)) 2022-02-03 2022-02-03 03:36:07.407621 12:59:33.333333+00:00 strftime(원하는 형식으로 변경)strftime을 사용하면 불러온 시간을 원하는 형식으로 바꿀 수 있다.1print(datetime.datetime.today().strftime(&quot;%Y/%m/%d %H:%M:%S&quot;)) 2022/02/03 03:40:36 외부링크 datatime — 기본 날짜와 시간 형","link":"/2022/02/04/Codding/Python/basic_module/datetime-%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84/"},{"title":"pyspark 설치","text":"pyspark대용량 data를 관리하기 위한 유사 SQL 라이브러리 사전 준비 python 설치 java 설치 spark 다운로드 winutils 다운로드 python 설치파이썬 혹은 아나콘다를 설치한다.python 버전 3 이상으로 설치한다. https://www.python.org/downloads/ 아나콘다 설치 java 설치나의 경우 java가 설치되어있고 JAVA_HOME 환경변수까지 설정되있기에 그대로 사용했으나 아니라면 오라클에 로그인하고 java를 설치한다. https://www.oracle.com/java/technologies/downloads/#jdk17-windows 이후 JAVA_HOME 환경 변수를 추가해준다. 시스템 변수, 사용자 변수 중 원하는 영역에 추가해준다.난 여러 계정을 사용하지 않으니 그냥 사용자 변수에 넣어줬다. Spark 다운로드Spark tgz 압축파일을 다운받는다. spark 원하는 경로에 압축 풀고 위와 동일하게 환경 변수를 설정해준다. winutils 다운로드위에서 받은 spark 버전과 동일 버전의 winutils.exe를 받아준다. winutils winutils용 폴더를 만들고 bin 파일 아래에 넣어준다. hadoop 환경변수도 설정한다. Path 설정마지막으로 path 값에 %JAVA_HOME%\\bin %SPARK_HOME%\\bin %HADOOP_HOME%\\bin을 넣어준다. pyspark 실행CMD(혹은 Anaconda Prompt)를 열어서 pyspark 설치한다.1&gt; pip install pyspark 1&gt; pyspark 외부링크 PySpark란 무엇입니까? Spark Installation on Windows 10 WINDOWS에 PySpark 설치","link":"/2022/02/14/Codding/Python/pyspark/pyspark-%EC%84%A4%EC%B9%98/"},{"title":"unique 요소만 포함하는 set","text":"특정 집합을 만들다보니 같은 값이 저장되지 않는 리스트를 만들 필요가 생겼다.set() 형식을 사용하면 unique한 객체만 포함하는 집합을 만들 수 있다. 단, 사용하려면 set()으로 객체를 초기화 해야한다. 12set = set([1,1,1,1,2,3,10,10,31])print(set) {1, 2, 3, 10, 31} dictionary와 동일한 {, }로 사용되지만 dictionary와 다르게 key가 없는 list 형식이다. 외부링크 set(집합)","link":"/2022/02/07/Codding/Python/basic/unique-list-set/"},{"title":"BeautifulSoup find와 select","text":"request 혹은 selenium으로 html 코드를 뜯어왔다면 태그를 특정지어서 불러올 데이터를 지정해줘야한다.이 때, 사용할 수 있는 모듈 중 하나가 BeautifulSoup와 Scrapy다. BeautifulSoupbs4를 설치하고 BeautifulSoup를 사용한다. 1$ pip install beautifulsoup4 123from bs4 import BeautifulSoupsoup = BeautifulSoup(html) 기본적으로 태그를 식별하는 방법은 find와 select가 있다. findfind의 경우 tag의 id, class 등을 지정해서 찾을 수 있다. python에서는 class가 따로 쓰이므로 class 요소를 지정할 때는 class_로 넣어줘야한다. 1234soup.find(&quot;strong&quot;)soup.find(&quot;a&quot;, class_=&quot;cdp_i&quot;)soup.find(class_=&quot;cdp_i&quot;)soup.find(&quot;div&quot;, id=&quot;hide&quot;) class와 id같은 요소를 지정해서 불러오기 때문에 특정 상황에선 정확도가 높다. find_allfind()의 경우 하나의 태그 html만 불러올 수 있는대, find_all()을 사용하면 조건을 만족하는 모든 html을 list 형식으로 받아온다. 1soup.find_all(&quot;a&quot;) selectselect를 사용하면 find_all()처럼 list로 받아올 수 있다. 1234soup.select(&quot;a&quot;)soup.select(&quot;a.cdp_i&quot;)soup.select(&quot;.cdp_i&quot;)soup.select(&quot;div#hide&quot;) 또한, 중첩 tag를 선택할 수도 있다. 1soup.select(&quot;div#hide &gt; a.cdp_i&quot;) div 태그의 id=”hide” 내부의 a 태그의 class=”cdp_i”인 html을 불러온다. select의 경우 메모리 소모량과 수행시간이 find와 비교하면 효율적이다. select_onefind의 경우와 반대로 가장 앞의 하나만 불러오기 위해선 select_one을 사용하면된다. 1soup.select_one(&quot;a&quot;) 외부링크 Beautiful Soup Documentation","link":"/2022/01/20/Codding/Python/crawling/bs4-find%EC%99%80-select/"},{"title":"time 모듈로 일시정지","text":"python 내장 함수인 time 모듈을 사용하면 시간 관련 추출이나 간섭을 할 수 있다. 그 중 이번에 내가 사용할 함수는 sleep() 함수로 지정한 시간 단위만큼 프로그램 실행 중간에 딜레이를 줄 수 있다. 특히 이번에 크롤링 중인 페이지가 동적페이지에 하나의 URL에서 클릭으로 HTML 코드만 바뀌는 옵션이 들어가 selenium만으로 크롤링하면 때때로 에러가 발생했다. 123import timetime.sleep(3) 을 사용하면 코드 중간에 3초간 딜레이 줄 수 있다. 외부링크 time — 시간 액세스와 변환","link":"/2022/02/02/Codding/Python/basic_module/time-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%9D%BC%EC%8B%9C%EC%A0%95%EC%A7%80/"},{"title":"g2g-crwaling00: javascript 동적페이지 크롤링","text":"현거래 매물 거래 현황을 수집하려 한다.전 세계를 대상으로하는 게임의 거래 데이터를 수집할 예정이니 세계 규모의 사이트 중 유명한 현거래 사이트인 G2G를 크롤링할 예정이다. G2G를 크롤링 하는데 request로 html을 가져오니 사이트 구조만 긁어오고 텍스트 내용이 들어간 태그들은 가져오지 못했다. 문제는 request의 경우 사이트에서 바로 html 코드를 긁어오기 때문에 유저의 행동에 따라 혹은 서버에서 요청을 받고 정보를 불러오는 javascript 동적페이지에 대한 대응을 할 수 없던거였다. my work selenium 사용하기 github: project crawl_URL_boost.py 외부링크 G2G","link":"/2022/01/17/Codding/Python/crwaling_G2G/g2g-crwaling00/"},{"title":"pandas_gbq python과 google bigquery 연동하기","text":"GCP 엑세스키 발급받기를 선행 라이브러리 설치google-cloud-bigquerypython과 google bigquery를 연동하기 위한 라이브러리 1$ pip install google-cloud-bigquery pandas-gbqdataframe을 gbq에 업로드하기 위한 라이브러리 1$ pip install pandas-gbq GBQ 연동1234567891011121314151617181920from google.oauth2 import service_account## json 파일 내용credentials = service_account.Credentials.from_service_account_info( { &quot;type&quot;: &quot;&quot;, &quot;project_id&quot;: &quot;&quot;, &quot;private_key_id&quot;: &quot;&quot;, &quot;private_key&quot;: &quot;&quot;, &quot;client_email&quot;: &quot;&quot;, &quot;client_id&quot;: &quot;&quot;, &quot;auth_uri&quot;: &quot;&quot;, &quot;token_uri&quot;: &quot;&quot;, &quot;auth_provider_x509_cert_url&quot;: &quot;&quot;, &quot;client_x509_cert_url&quot;: &quot;&quot; })## json 파일 경로를 사용하고 싶으면 `from_service_account_file` 함수를 사용하면된다credentials = service_account.Credentials.from_service_account_file(&quot;URL.json&quot;) 업로드 하고싶은 dataframe(df)을 만들어두자. pandas.to_gbq로 연동하면 브라우저 창을 통해 쿠키를 받아야하므로 pandas_gbq를 사용한다. 1234567import pandas_gbqproject_id = &quot;project_id&quot;table_name = &quot;data_set_name.table_name&quot;pandas_gbq.context.credentials = credentialspandas_gbq.context.project = project_id dataframe 업로드if_exists 요소의 기본값 = “fail” fail: 테이블이 존재하면 pandas_gbq.gbq.TableCreationError 발생 replace: 테이블이 있는 경우 다시 만들고 데이터 삽입 append: 테이블에 데이터 삽입(테이블이 없는 경우 테이블 생성) 1pandas_gbq.to_gbq(df, table_name, project_id=project_id, if_exists=&quot;append&quot;) bigquery data 받아오기1234import pandas as pdquery = &quot;SELECT * FROM `data_set_name.table_name`&quot;readdf = pd.read_gbq(query=query, project_id=project_id, credentials=credentials, dialect='standard') 외부링크 API Reference: pandas_gbq pandas.to_gbq pandas.read_gbq","link":"/2022/02/16/Codding/Python/SQL/pandas_gbq-python-google-bigquery/"},{"title":"GCP 엑세스키 발급받기","text":"Google Cloud PlatformPython 코드에서 Bigquery로 data를 보내기 위해 GCP 엑세스 키가 필요해졌다. google cloud 콘솔에 접속하자. Service Account 생성콘솔에서 엑세스 키를 발급받을 프로젝트를 선택하자. 다음으로 [탐색 메뉴] - [IAM 및 관리자] - [서비스 계정]에 접속한다. [+ 서비스 계정 만들기]를 클릭해서 서비스 계정을 만들고 프로젝트 엑세스 권한을 설정하면된다. Service Account Key 발급받기 생성된 계정의 [작업] - [키 관리]로 이동한다. [키 추가] - [새 키 만들기] - [JSON]으로 발급받아서 사용하면 된다. python GCP 연동하기 pandas_gbq python과 google bigquery 연동하기 외부링크 Python BigQuery 연동하기","link":"/2022/01/27/Codding/GCP/BigQuery/GCP-accesskey/"},{"title":"G2G poe 현거래 매물 수집시작","text":"저번 토요일(02/05) poe 리그 시작일에 맞춰 한국시간 06시마다 매일 현거래 매물 데이터를 postSQL과 GBQ에 수집중이다. pandas_gbq python과 google bigquery 연동하기 2, 3 시즌 이상 데이터가 쌓이면 반복되는 데이터로 머신 러닝을 돌려 유저가 빠지는(혹은 매물이 폭락하는) 기간을 예상할 수 있을 것이다. 그 전에 google data studio를 이용해서 대쉬보드도 관리할 예정이다.","link":"/2022/02/07/Codding/Python/crwaling_G2G/G2G-poe-start-crwaling/"},{"title":"g2g-crwaling01: 크롤링 g2g 종목 선정","text":"현거래 매물 크롤링을 통해 얻을 수 있는 정보는 간단하게 가격 범위와 판매자 인원으로 볼 수 있다. 판매 가격은 대쉬보드로 활용할 수 있을거 같다. 하지만 결국 어느 시점에 게임(혹은 신규 컨텐츠)의 수명이 어느 순간까지 지속되는지 예측하는 등 프로모션, 마케팅적으로 아웃풋이 나오는게 중요하다.따라서 신규 컨텐츠 출시 간격이 나름 규칙적인, 그리고 신규 컨텐츠 발매마다 서버가 초기화되서 재화 가치도 고정되지 않는 게임인 POE에 대한 현거래 data를 크롤링하기로 했다. 전 세계가 공유하고 모드만 바뀌는 서버 구성이므로 모든 서버를 수집할 예정이고, 시각화 혹은 예측 모델을 만들 때 업자 매물을 제거하기 편하게 리그가 종료된 시점에도 수집을 계속한다. 신규 컨텐츠가 나올 때 항상 20:00 UTC(05:00 KOR)에 서버가 열리므로 1시간 뒤인 새벽 6시에 매일 수집한다. 외부링크 G2G Path of Exile POE League","link":"/2022/01/23/Codding/Python/crwaling_G2G/g2g-crwaling01/"}],"tags":[{"name":"블로그","slug":"블로그","link":"/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"설정","slug":"설정","link":"/tags/%EC%84%A4%EC%A0%95/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"plotly","slug":"plotly","link":"/tags/plotly/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"수식","slug":"수식","link":"/tags/%EC%88%98%EC%8B%9D/"},{"name":"파이썬","slug":"파이썬","link":"/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"js","slug":"js","link":"/tags/js/"},{"name":"마크다운","slug":"마크다운","link":"/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"mathjax","slug":"mathjax","link":"/tags/mathjax/"},{"name":"R","slug":"R","link":"/tags/R/"},{"name":"Rstudio","slug":"Rstudio","link":"/tags/Rstudio/"},{"name":"Rtools","slug":"Rtools","link":"/tags/Rtools/"},{"name":"취미","slug":"취미","link":"/tags/%EC%B7%A8%EB%AF%B8/"},{"name":"게임","slug":"게임","link":"/tags/%EA%B2%8C%EC%9E%84/"},{"name":"인디게임","slug":"인디게임","link":"/tags/%EC%9D%B8%EB%94%94%EA%B2%8C%EC%9E%84/"},{"name":"DJMAX Respect V","slug":"DJMAX-Respect-V","link":"/tags/DJMAX-Respect-V/"},{"name":"쥬피터","slug":"쥬피터","link":"/tags/%EC%A5%AC%ED%94%BC%ED%84%B0/"},{"name":"파이참","slug":"파이참","link":"/tags/%ED%8C%8C%EC%9D%B4%EC%B0%B8/"},{"name":"다운로드","slug":"다운로드","link":"/tags/%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C/"},{"name":"code","slug":"code","link":"/tags/code/"},{"name":"pandas","slug":"pandas","link":"/tags/pandas/"},{"name":"빅데이터","slug":"빅데이터","link":"/tags/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0/"},{"name":"정의","slug":"정의","link":"/tags/%EC%A0%95%EC%9D%98/"},{"name":"TGA","slug":"TGA","link":"/tags/TGA/"},{"name":"selenium","slug":"selenium","link":"/tags/selenium/"},{"name":"datetime","slug":"datetime","link":"/tags/datetime/"},{"name":"numpy","slug":"numpy","link":"/tags/numpy/"},{"name":"pyspark","slug":"pyspark","link":"/tags/pyspark/"},{"name":"bs4","slug":"bs4","link":"/tags/bs4/"},{"name":"time","slug":"time","link":"/tags/time/"},{"name":"GCP","slug":"GCP","link":"/tags/GCP/"},{"name":"GBQ","slug":"GBQ","link":"/tags/GBQ/"},{"name":"크롤링","slug":"크롤링","link":"/tags/%ED%81%AC%EB%A1%A4%EB%A7%81/"}],"categories":[{"name":"블로그","slug":"블로그","link":"/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"설정","slug":"블로그/설정","link":"/categories/%EB%B8%94%EB%A1%9C%EA%B7%B8/%EC%84%A4%EC%A0%95/"},{"name":"연습","slug":"연습","link":"/categories/%EC%97%B0%EC%8A%B5/"},{"name":"R","slug":"연습/R","link":"/categories/%EC%97%B0%EC%8A%B5/R/"},{"name":"마크다운","slug":"연습/마크다운","link":"/categories/%EC%97%B0%EC%8A%B5/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"},{"name":"취미(뻘짓중)","slug":"취미-뻘짓중","link":"/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/"},{"name":"파이썬","slug":"연습/파이썬","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"},{"name":"게임","slug":"취미-뻘짓중/게임","link":"/categories/%EC%B7%A8%EB%AF%B8-%EB%BB%98%EC%A7%93%EC%A4%91/%EA%B2%8C%EC%9E%84/"},{"name":"기초","slug":"연습/파이썬/기초","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EA%B8%B0%EC%B4%88/"},{"name":"설정","slug":"연습/파이썬/설정","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EC%84%A4%EC%A0%95/"},{"name":"모듈","slug":"연습/파이썬/모듈","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/%EB%AA%A8%EB%93%88/"},{"name":"Kaggle_Survey 2021","slug":"연습/파이썬/Kaggle-Survey-2021","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/Kaggle-Survey-2021/"},{"name":"빅데이터","slug":"빅데이터","link":"/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0/"},{"name":"crawling","slug":"연습/파이썬/crawling","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crawling/"},{"name":"pyspark","slug":"연습/파이썬/pyspark","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/pyspark/"},{"name":"crwaling_G2G","slug":"연습/파이썬/crwaling-G2G","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/crwaling-G2G/"},{"name":"Google Cloud","slug":"연습/Google-Cloud","link":"/categories/%EC%97%B0%EC%8A%B5/Google-Cloud/"},{"name":"SQL","slug":"연습/파이썬/SQL","link":"/categories/%EC%97%B0%EC%8A%B5/%ED%8C%8C%EC%9D%B4%EC%8D%AC/SQL/"},{"name":"bigquery","slug":"연습/Google-Cloud/bigquery","link":"/categories/%EC%97%B0%EC%8A%B5/Google-Cloud/bigquery/"}]}